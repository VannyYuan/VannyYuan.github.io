<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UE4高级程序开发系列教程 - 2_虚幻4引擎关卡蓝图设计</title>
    <link href="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;📢 继续教程的学习~</p><h2 id="L1-面向对象"><a href="#L1-面向对象" class="headerlink" title="L1 面向对象"></a>L1 面向对象</h2><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/1.png" alt="1"></p><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/2.png" alt="2"></p><h3 id="对象和模版"><a href="#对象和模版" class="headerlink" title="对象和模版"></a>对象和模版</h3><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/3.png" alt="3"></p><p>🎹 蓝图模版</p><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/4.png" alt="4"></p><h3 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h3><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/5.png" alt="5"></p><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p><img src="/2022/07/19/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/2_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%93%9D%E5%9B%BE%E8%AE%BE%E8%AE%A1/6.png" alt="6"></p>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
      <category>UE4高级程序开发系列教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE4高级程序开发系列教程 - 1_虚幻4引擎关卡设计</title>
    <link href="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;🧁 这是一套比较久远（2019年）的教程，基本都是直接截取知识点，主要是入门基础学习总结，方便自己之后翻阅复习_(:з」∠)_。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/1.jpg" alt="冲鸭"></p><h2 id="L1-获取Epic-Games引擎源码"><a href="#L1-获取Epic-Games引擎源码" class="headerlink" title="L1 获取Epic Games引擎源码"></a>L1 获取Epic Games引擎源码</h2><ol><li>注册 Github 账号。（相信大家都有吧！）</li><li>在 Unreal 引擎中选择 “管理账户”。<br><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/2.png" alt="管理账户"></li><li>进入连接页面，连接 Github 账号，登陆后选择加入 Epic 组织。<br><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/3.png" alt="连接"></li><li>在 Github 中的个人主页中可以看到 Epic Games 的图标，则成功加入！<br><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/4.png" alt="成功加入"></li></ol><h2 id="L2-引擎中的坐标系"><a href="#L2-引擎中的坐标系" class="headerlink" title="L2 引擎中的坐标系"></a>L2 引擎中的坐标系</h2><h3 id="左手坐标系"><a href="#左手坐标系" class="headerlink" title="左手坐标系"></a>左手坐标系</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/5.png" alt="左手坐标系"></p><h3 id="世界坐标系与自身坐标系"><a href="#世界坐标系与自身坐标系" class="headerlink" title="世界坐标系与自身坐标系"></a>世界坐标系与自身坐标系</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/6.png" alt="坐标系"></p><h2 id="L3-虚幻中的光照"><a href="#L3-虚幻中的光照" class="headerlink" title="L3 虚幻中的光照"></a>L3 虚幻中的光照</h2><h3 id="虚幻中的光照分类"><a href="#虚幻中的光照分类" class="headerlink" title="虚幻中的光照分类"></a>虚幻中的光照分类</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/7.png" alt="光照分类"></p><h3 id="光源的移动特性"><a href="#光源的移动特性" class="headerlink" title="光源的移动特性"></a>光源的移动特性</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/8.png" alt="移动特性"></p><h3 id="固定光源"><a href="#固定光源" class="headerlink" title="固定光源"></a>固定光源</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/9.png" alt="固定光源"></p><h3 id="光照模式"><a href="#光照模式" class="headerlink" title="光照模式"></a>光照模式</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/10.png" alt="光照模式"></p><h3 id="间接光照缓存"><a href="#间接光照缓存" class="headerlink" title="间接光照缓存"></a>间接光照缓存</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/11.png" alt="间接光照缓存"></p><h3 id="重要光照体积"><a href="#重要光照体积" class="headerlink" title="重要光照体积"></a>重要光照体积</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/12.png" alt="重要光照体积"></p><h2 id="L4-蓝图认知"><a href="#L4-蓝图认知" class="headerlink" title="L4 蓝图认知"></a>L4 蓝图认知</h2><p>&emsp;&emsp;蓝图是虚幻中的一种可视化编程语言。</p><h3 id="蓝图种类"><a href="#蓝图种类" class="headerlink" title="蓝图种类"></a>蓝图种类</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/13.png" alt="蓝图种类"></p><h3 id="Actor"><a href="#Actor" class="headerlink" title="Actor"></a>Actor</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/14.png" alt="Actor"></p><h3 id="蓝图编辑器"><a href="#蓝图编辑器" class="headerlink" title="蓝图编辑器"></a>蓝图编辑器</h3><p>&emsp;&emsp;可以在 “内容浏览器” 中右键添加蓝图。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/15.png" alt="蓝图编辑器"></p><p>&emsp;&emsp;选择父类，即创建的蓝图需要继承的类。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/16.png" alt="父类"></p><p>&emsp;&emsp;组件优先于继承，组件可以避免继承的臃肿，既可以完成继承拓展的功能特性，又可以保证继承队列的清晰和干净。</p><p>&emsp;&emsp;场景中可渲染物体只有静态网格和骨骼网格（mesh）在蓝图Actor编辑器中选择添加mesh组件，在组件属性中的“视口选项”选择“显示引擎内容”。</p><p>&emsp;&emsp;对于已经创建蓝图Actor对象，修改蓝图模板不会影响已创建对象，只能重新生成。</p><h3 id="蓝图日志输出"><a href="#蓝图日志输出" class="headerlink" title="蓝图日志输出"></a>蓝图日志输出</h3><p>&emsp;&emsp;Print String节点 - 日志输出节点</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/17.png" alt="输出日志"></p><p>&emsp;&emsp;蓝图节点名词</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/18.png" alt="名词"></p><p>&emsp;&emsp;Print 节点</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/19.png" alt="print"></p><h3 id="蓝图连接"><a href="#蓝图连接" class="headerlink" title="蓝图连接"></a>蓝图连接</h3><p>&emsp;&emsp;断开执行线：Alt + 左键 针脚</p><p>&emsp;&emsp;移动执行线：ctrl + 左键拖拽 针脚</p><h3 id="蓝图添加注释"><a href="#蓝图添加注释" class="headerlink" title="蓝图添加注释"></a>蓝图添加注释</h3><ol><li>框选需要注释的节点，按键C</li></ol><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/20.png" alt="蓝图添加注释"></p><ol><li><p>选中注释，按键 Delete 删除注释</p></li><li><p>点选需要添加注释的节点，点击节点上方的“…”</p></li></ol><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/21.png" alt="蓝图添加注释"></p><h3 id="Actor-蓝图构建节点（构造函数）"><a href="#Actor-蓝图构建节点（构造函数）" class="headerlink" title="Actor 蓝图构建节点（构造函数）"></a>Actor 蓝图构建节点（构造函数）</h3><p>&emsp;&emsp;Construction：在Actor构造完整后调用的第一函数（调整函数），在物体被拖动时也相当于重新构建。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/22.png" alt="构造函数"></p><p>&emsp;&emsp;可以取消勾选 “拖拽时运行” 取消拖动调用构造函数。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/23.png" alt="拖动"></p><h3 id="蓝图事件"><a href="#蓝图事件" class="headerlink" title="蓝图事件"></a>蓝图事件</h3><ol><li>事件BeginPlay节点只调用一次。Actor构造完后先调用construction，再调用beginplay</li><li>事件ActorBeginOverlap：与另一个Actor重叠时调用。一般禁用，通过添加组件可以实现该功能。</li><li>事件Tick：定时调用函数。默认为每帧调用一次。BeginPlay先于Tick。</li></ol><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/24.png" alt="事件"></p><h3 id="位移节点"><a href="#位移节点" class="headerlink" title="位移节点"></a>位移节点</h3><ol><li>差量位移节点：AddActorWorldOffset ，基于原有位置再进行偏移</li></ol><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/25.png" alt="25"></p><ol start="2"><li>直接位移节点：SetActorLocation ，根据世界坐标移动到指定位置</li></ol><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/26.png" alt="26"></p><h2 id="L5-3D数学（向量）"><a href="#L5-3D数学（向量）" class="headerlink" title="L5 3D数学（向量）"></a>L5 3D数学（向量）</h2><ul><li>向量<ul><li>有长度有方向</li><li>UE里用空间直角坐标系表示法</li><li>三维空间向量由三分量构成，虚幻里用xyz表示</li><li>坐标是一个特殊的向量</li></ul></li></ul><h3 id="向量类型"><a href="#向量类型" class="headerlink" title="向量类型"></a>向量类型</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/27.png" alt="向量"></p><h3 id="位置向量运算"><a href="#位置向量运算" class="headerlink" title="位置向量运算"></a>位置向量运算</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/28.png" alt="28"></p><ul><li>计算向量的模（长度）<ul><li>先计算两个坐标向量的差向量，再计算向量的长度。</li><li>使用VectorLength节点求模</li></ul></li><li>计算单位向量<ul><li>使用Normalize节点标量化</li></ul></li><li>点乘<ul><li>a·b = |a||b|cosθ</li><li>单位向量的点乘可以求方向</li><li>节点：dot</li></ul></li><li>叉乘<ul><li>得到的是一个垂直于向量ab平面的向量</li><li>节点：cross</li></ul></li><li>获取正方向<ul><li>节点：Get Actor Forword Vector（返回的是单位向量）</li></ul></li></ul><h2 id="L6-蓝图数据类型"><a href="#L6-蓝图数据类型" class="headerlink" title="L6 蓝图数据类型"></a>L6 蓝图数据类型</h2><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/31.png" alt="31"></p><h3 id="强类型与弱类型"><a href="#强类型与弱类型" class="headerlink" title="强类型与弱类型"></a>强类型与弱类型</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/29.png" alt="29"></p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/30.png" alt="30"></p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/32.png" alt="32"></p><h3 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/33.png" alt="33"></p><h3 id="命名法则"><a href="#命名法则" class="headerlink" title="命名法则"></a>命名法则</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/34.png" alt="34"></p><h2 id="L7-蓝图基本运算"><a href="#L7-蓝图基本运算" class="headerlink" title="L7 蓝图基本运算"></a>L7 蓝图基本运算</h2><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/35.png" alt="35"></p><h3 id="赋值和获取"><a href="#赋值和获取" class="headerlink" title="赋值和获取"></a>赋值和获取</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/36.png" alt="36"></p><h3 id="整形的自增和自减"><a href="#整形的自增和自减" class="headerlink" title="整形的自增和自减"></a>整形的自增和自减</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/37.png" alt="37"></p><h3 id="取余运算"><a href="#取余运算" class="headerlink" title="取余运算"></a>取余运算</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/38.png" alt="38"></p><h2 id="L8-蓝图运算符"><a href="#L8-蓝图运算符" class="headerlink" title="L8 蓝图运算符"></a>L8 蓝图运算符</h2><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/39.png" alt="39"></p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/40.png" alt="40"></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/41.png" alt="41"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/42.png" alt="42"></p><p>&emsp;&emsp;节点：or（或） and（且） not（非）</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/43.png" alt="43"></p><h2 id="L9-流程控制节点"><a href="#L9-流程控制节点" class="headerlink" title="L9 流程控制节点"></a>L9 流程控制节点</h2><h3 id="Sequence（序列）"><a href="#Sequence（序列）" class="headerlink" title="Sequence（序列）"></a>Sequence（序列）</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/44.png" alt="44"></p><p>&emsp;&emsp;执行完0，再执行1，再执行2<br><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/45.png" alt="45"></p><h3 id="Do-N-amp-Do-once"><a href="#Do-N-amp-Do-once" class="headerlink" title="Do N &amp; Do once"></a>Do N &amp; Do once</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/46.png" alt="46"></p><p>&emsp;&emsp;Do once</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/47.png" alt="47"></p><p>&emsp;&emsp;Do N</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/48.png" alt="48"></p><h3 id="Do-once-Multilnput"><a href="#Do-once-Multilnput" class="headerlink" title="Do once Multilnput"></a>Do once Multilnput</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/49.png" alt="49"></p><p>&emsp;&emsp;当有多个逻辑输出，只允许执行首个进入节点的逻辑输出，除非重置reset。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/50.png" alt="50"></p><h3 id="FlipFlop"><a href="#FlipFlop" class="headerlink" title="FlipFlop"></a>FlipFlop</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/51.png" alt="51"></p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/52.png" alt="52"></p><h3 id="ForLoop循环"><a href="#ForLoop循环" class="headerlink" title="ForLoop循环"></a>ForLoop循环</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/53.png" alt="53"></p><p>&emsp;&emsp;从1到100的相加总和</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/54.png" alt="54"></p><h3 id="ForLoopWithBreak循环中断"><a href="#ForLoopWithBreak循环中断" class="headerlink" title="ForLoopWithBreak循环中断"></a>ForLoopWithBreak循环中断</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/55.png" alt="55"></p><h3 id="Gate"><a href="#Gate" class="headerlink" title="Gate"></a>Gate</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/56.png" alt="56"></p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/57.png" alt="57"></p><h3 id="MultiGate"><a href="#MultiGate" class="headerlink" title="MultiGate"></a>MultiGate</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/58.png" alt="58"></p><h3 id="WhileLoop"><a href="#WhileLoop" class="headerlink" title="WhileLoop"></a>WhileLoop</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/59.png" alt="59"></p><p>&emsp;&emsp;从0开始递增1自加，直到总和大于500退出循环。</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/60.png" alt="60"></p><h3 id="切换Switch"><a href="#切换Switch" class="headerlink" title="切换Switch"></a>切换Switch</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/61.png" alt="61"></p><h3 id="Delay"><a href="#Delay" class="headerlink" title="Delay"></a>Delay</h3><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/62.png" alt="62"></p><p>&emsp;&emsp;独立计时与重置计时</p><p><img src="/2022/07/15/unreal/UE4%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/1_%E8%99%9A%E5%B9%BB4%E5%BC%95%E6%93%8E%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1/63.png" alt="63"></p>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
      <category>UE4高级程序开发系列教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Cgtw的打包工具</title>
    <link href="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;因为公司制作资产项目时，经常需要把文件发送给外包或者客户，但是一个个文件整理发送，特别是 Maya 文件位置移动后，里面使用的路径也需要更新，如果逐个文件更改路径显然非常麻烦。因此打包工具的作用就是再打包后实现打开即可用，简化打包方和接收方的操作。</p><p>&emsp;&emsp;其实早在之前就已经开发过打包工具，但是由于当时对 Qt 还不是很熟悉，没有掌握 MVC 框架的知识，而且刚接触 Cgtw，对它的接口以及使用方法都没有深入研究过，因此开发出来的工具十分拙劣，基本都是参考 Cgtw 原有的打包工具而修改开发出来的。</p><h2 id="一、打包工具的更迭"><a href="#一、打包工具的更迭" class="headerlink" title="一、打包工具的更迭"></a>一、打包工具的更迭</h2><ol><li><p>🙄 Cgtw 的打包工具<br>&emsp;&emsp;这是 Cgtw 的自带的打包工具，只有单纯的复制文件功能。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/1.png">  </p></li><li><p>😲 打包工具 2<br>&emsp;&emsp;这是模仿 Cgtw 开发出来的打包工具，添加了对 Maya 场景的处理。在 Cgtw 的界面基础上，还添加了资产/镜头、打包路径、项目、当前选择文件夹路径、文件夹显示文件列表的显示。<br>&emsp;&emsp;由于没有使用 MVC 框架，像视图使用的都是 QListWidget、 QTreeWidget，而不是 QListView、QTreeView等，因此如果有修改需求，则代码改动会很大，以至于后面已经不想再维护这个工具，而是去开发新一代的打包工具。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/2.png">  </p></li></ol><ol><li>😇 打包工具 3<br>&emsp;&emsp;基本上打包工具 3 已经是整个界面、内置方法全都重写了，由于是自己整理编写的，因此对里面的方法和原理都比较熟悉，下面就重点讲一下这个工具吧！<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/3.png">  </li></ol><hr><h2 id="二、功能演示说明"><a href="#二、功能演示说明" class="headerlink" title="二、功能演示说明"></a>二、功能演示说明</h2><h3 id="🥕-启动工具"><a href="#🥕-启动工具" class="headerlink" title="🥕 启动工具"></a>🥕 启动工具</h3><ol><li><p>Cgtw 中选中需要打包的 资产/镜头，启动 “打包工具 3.0”。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/g1.gif"></p></li><li><p>等待读取打包信息、界面加载。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/g2.gif"></p></li></ol><h3 id="🥕-设置打包信息"><a href="#🥕-设置打包信息" class="headerlink" title="🥕 设置打包信息"></a>🥕 设置打包信息</h3><ol><li><p>修改打包路径<br>&emsp;&emsp;默认为项目设定的打包路径，如果想打包到其他文件夹也可以自行设定。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/g3.gif"></p></li><li><p>资产整合<br>&emsp;&emsp;对于资产打包阶段，勾选“资产整合”会对资产列表中的所有资产分别整合，对绑定、贴图、毛发阶段资产整合到一个文件里，并且输出整合信息。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/5.png"></p></li><li><p>使用打包模版<br>&emsp;&emsp;可以通过选择预设的打包模版快速选择需要打包的文件夹。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/g4.gif"></p></li><li><p>项目路径更改<br>&emsp;&emsp;假如项目经过移动，而maya场景文件没有修改对应引用路径，则需要通过勾选“项目路径更改”，填写新旧项目路径进行打包。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/7.png"></p></li><li><p>批量选择<br>&emsp;&emsp;在资产中选择 ALL，之后在文件框中勾选文件夹会对所有资产的文件夹进行统一勾选。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/8.png"></p></li><li><p>勾选文件夹<br>&emsp;&emsp;在选好资产后，点击文件夹，会在右边显示文件夹路径，勾选文件夹则表示该文件夹的内容会被打包。勾选阶段会把阶段以下的文件夹全部勾选。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/g5.gif"></p></li><li><p>编辑文件夹内打包的文件<br>&emsp;&emsp;在默认情况下，该工具仅会打包 Cgtw 文件框内符合显示规则的文件和文件夹，如果需要打包文件框的其他文件，则可以在选择资产、文件框后，勾选“编辑文件夹打包内容”，再勾选需要打包的文件和文件夹。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/9.png"></p></li><li><p>生成打包资产表<br>&emsp;&emsp;勾选“生成打包资产表”，在打包结束后会在打包路径下生成一个“项目打包记录表.xlsx”的文件，描述本次资产整合的情况。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/10.png"><br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/11.png"></p></li></ol><h3 id="🥕-打包方式"><a href="#🥕-打包方式" class="headerlink" title="🥕 打包方式"></a>🥕 打包方式</h3><p>&emsp;&emsp;打包方式有三种：前台打包、后台打包和提交Deadline。  </p><ol><li>前台打包：打包 maya 文件时前台打开文件进行打包。</li><li>后台打包：打包 maya 文件时后台打开文件进行打包。</li><li>提交Deadline：把打包任务提交到 Deadline，由渲染农场分配机器进行打包。</li></ol><h3 id="🥕-打包进度"><a href="#🥕-打包进度" class="headerlink" title="🥕 打包进度"></a>🥕 打包进度</h3><p>&emsp;&emsp;如果使用前台打包或后台打包，开始打包后会弹出进度条以及打包信息窗口。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/12.png"></p><h3 id="🥕-打包文件存放"><a href="#🥕-打包文件存放" class="headerlink" title="🥕 打包文件存放"></a>🥕 打包文件存放</h3><p>&emsp;&emsp;所有勾选需要打包的文件都会打包到打包路径下，而且会继承原路径（整合资产除外，具体规则在“项目打包记录表”中）。<br>&emsp;&emsp;Maya 文件内引用的文件会放在 s: 盘符下，当外包和客户映射一个 s: 盘并把打包文件放在该盘下，打开 maya 文件后能够读取到对应的引用文件。<br><img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/13.png"></p><hr><h2 id="三、Cgtw-接口"><a href="#三、Cgtw-接口" class="headerlink" title="三、Cgtw 接口"></a>三、Cgtw 接口</h2><p>&emsp;&emsp;由于是在 Cgtw 中进行工具的调用，那么在调用时肯定要通过 Cgtw 获取打包内容信息的，因此需要这些信息获取的接口。当在 Cgtw 中执行操作时（如选择制作阶段打开工具、打开文件等），Cgtw 会记录你上一个操作，可以通过接口获取对应信息。</p><h3 id="获取基本数据"><a href="#获取基本数据" class="headerlink" title="获取基本数据"></a>获取基本数据</h3><p>&emsp;&emsp;一般数据库、模块、模块类型等基本信息，都是通过 <code>cgtw2.tw().client</code> 获取。</p><pre><code class="hljs Python"><span class="hljs-keyword">import</span> cgtw2self.m_tw          = cgtw2.tw()self.m_database    = self.m_tw.client.get_database()self.m_module      = self.m_tw.client.get_module()self.m_module_type = self.m_tw.client.get_module_type()self.m_id_list     = self.m_tw.client.get_id()</code></pre><p>&emsp;&emsp;其中：  </p><ol><li>m_database 为数据库</li><li>m_module 为模块（asset/shot）</li><li>m_module_type 为模块类型</li><li>m_id_list 为当前选中的项id列表，如选中两项则该列表数有两个。<br> <img src="/2021/04/13/cgtw/%E5%9F%BA%E4%BA%8ECgtw%E7%9A%84%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/4.png"></li></ol><h3 id="获取具体信息"><a href="#获取具体信息" class="headerlink" title="获取具体信息"></a>获取具体信息</h3><p>&emsp;&emsp;通过基本数据，我们可以获取更多信息。</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_proj_name</span>(<span class="hljs-params">self</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取项目名</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        proj_name[str]: 项目名</span><span class="hljs-string">    &quot;&quot;&quot;</span>    proj_name = self.m_tw.task.get(self.m_database,self.m_module,self.m_id_list,[<span class="hljs-string">&#x27;eps.project_code&#x27;</span>])[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;eps.project_code&#x27;</span>]    <span class="hljs-keyword">return</span> proj_name<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_type_id</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取task id</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        task_id[str]: task id</span><span class="hljs-string">    &quot;&quot;&quot;</span>    task_id = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module_type+<span class="hljs-string">&#x27;.id&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module_type+<span class="hljs-string">&#x27;.id&#x27;</span>]    <span class="hljs-keyword">return</span> task_id<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_id</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取module id</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        module_id[str]: module id</span><span class="hljs-string">    &quot;&quot;&quot;</span>    module_id = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.id&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.id&#x27;</span>]    <span class="hljs-keyword">return</span> module_id<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_entity</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取当前资产名/镜头号</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        module_entity[str]: module_entity</span><span class="hljs-string">    &quot;&quot;&quot;</span>    module_entity = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.entity&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.entity&#x27;</span>]    <span class="hljs-keyword">return</span> module_entity<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_cn_name</span>(<span class="hljs-params">self, m_id</span>):</span>     <span class="hljs-string">&quot;&quot;&quot;获取资产中文名</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        module_cn_name[str]: module_cn_name</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> self.m_module == <span class="hljs-string">&#x27;asset&#x27;</span>:        module_cn_name = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.cn_name&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.cn_name&#x27;</span>]    <span class="hljs-keyword">else</span>:        module_cn_name = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">return</span> module_cn_name<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_link_eps</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取镜头的关联集数</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        module_link_eps[str]: module_link_eps</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> self.m_module == <span class="hljs-string">&#x27;shot&#x27;</span>:        module_link_eps = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.link_eps&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.link_eps&#x27;</span>]    <span class="hljs-keyword">else</span>:        module_link_eps = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">return</span> module_link_eps<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_beizhu</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取镜头的备注</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        module_beizhu[str]: module_beizhu</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> self.m_module == <span class="hljs-string">&#x27;shot&#x27;</span>:        module_beizhu = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.beizhu&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.beizhu&#x27;</span>]    <span class="hljs-keyword">else</span>:        module_beizhu = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">return</span> module_beizhu<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_module_image</span>(<span class="hljs-params">self, m_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取资产/镜头的缩略图</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        img_path[str]: img_path</span><span class="hljs-string">    &quot;&quot;&quot;</span>    module_image = self.m_tw.task.get(self.m_database,self.m_module,[m_id],[self.m_module+<span class="hljs-string">&#x27;.image&#x27;</span>])[<span class="hljs-number">0</span>][self.m_module+<span class="hljs-string">&#x27;.image&#x27;</span>]    img_path = <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-keyword">if</span> module_image:        img_path = eval(module_image)[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;min&#x27;</span>]        img_path = os.path.join(CGTW_DISK, img_path.lstrip(<span class="hljs-string">&#x27;/&#x27;</span>)).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)    <span class="hljs-keyword">return</span> img_path</code></pre><p>&emsp;&emsp;通过 m_tw.task 获取 asset task id。选择的项中含有多少个资产则 asset_task_ids 列表就有多少个。  </p><pre><code class="hljs python">asset_task_ids = self.m_tw.task.get_id(self.m_database, self.m_module, [[self.m_module+<span class="hljs-string">&#x27;.id&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>,asset_id]])</code></pre><p>&emsp;&emsp;通过 asset task id 获取 pipeline 信息。  </p><pre><code class="hljs python">pipeline_id_info = self.m_tw.task.get(self.m_database,self.m_module,[asset_task_id],[<span class="hljs-string">&#x27;pipeline.id&#x27;</span>,self.m_module_type+<span class="hljs-string">&#x27;.pipeline&#x27;</span>])</code></pre><p>&emsp;&emsp;通过 pipeline 信息获取该阶段创建的文件框信息。  </p><pre><code class="hljs python">pipeline_id = info[<span class="hljs-string">&#x27;pipeline.id&#x27;</span>]filebox_info = self.m_tw.filebox.get(db=self.m_database, module=self.m_module, module_type=self.m_module_type, field_list=[<span class="hljs-string">&#x27;sign&#x27;</span>,<span class="hljs-string">&#x27;#id&#x27;</span>], pipeline_id_list=[pipeline_id])</code></pre><p>&emsp;&emsp;通过 filebox 获取文件夹的名称、路径、显示类型、显示规则等信息。</p><pre><code class="hljs python">filebox_id = info[<span class="hljs-string">&#x27;#id&#x27;</span>]self.m_tw.info.get_filebox(self.m_database,self.m_module,id=module_id,filebox_id=filebox_id)</code></pre><hr><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><p>&emsp;&emsp;当我们获取了 cgtw 的信息之后，需要将其储存起来，在需要时进行获取。在该工具中，使用了类和对象来存储数据。</p><p>&emsp;&emsp;首先，我们要清楚要实现什么样的功能：我们先在 cgtw 的某个项目中的 资产任务/镜头任务 中，选择需要打包的 资产阶段/镜头号 。工具根据选中的任务进行分析，在设定的规则上让用户选择需要打包的文件夹，最后对用户选择的内容进行打包。</p><p>&emsp;&emsp;我们梳理了工具工作流程后，可以开始分析哪些信息是需要的、关联的。当模块为资产时，关联数据为“资产 - 阶段 - 文件夹 - 文件夹内容”；当模块为镜头时，关联数据为“镜头 - 阶段 - 文件夹 - 文件夹内容”。由于关联的信息是层层递进的关系，因此利用了类的继承来保存这些信息。</p><h3 id="资产-镜头节点"><a href="#资产-镜头节点" class="headerlink" title="资产/镜头节点"></a>资产/镜头节点</h3><p>&emsp;&emsp;这个节点基本定义了大部分的信息，比如节点名称、子节点、父节点、文件夹节点、勾选状态、节点中文名、节点缩略图、节点备注的信息。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>(<span class="hljs-params">object</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;资产节点/镜头节点</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        object (class): 继承object类</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, m_data, parent=None</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;初始化节点</span><span class="hljs-string"></span><span class="hljs-string">        Args:</span><span class="hljs-string">            m_data (str): 节点名称</span><span class="hljs-string">            parent : Defaults to None.</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.__name = m_data        self.__children = []        self.__parent = parent        self.__folder_node_list = []        self.__checkState = <span class="hljs-literal">False</span>        self.__cn_name = <span class="hljs-string">&quot;&quot;</span>        self.__image = <span class="hljs-string">&quot;&quot;</span>        self.__beizhu = <span class="hljs-string">&quot;&quot;</span></code></pre><h3 id="阶段节点"><a href="#阶段节点" class="headerlink" title="阶段节点"></a>阶段节点</h3><p>&emsp;&emsp;这个节点比基础节点多了一个属性：展开折叠。该属性记录阶段是否展开。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PipeNode</span>(<span class="hljs-params">Node</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;阶段节点</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        Node (class): 继承 Node 节点</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, m_data, parent=None</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;初始化节点</span><span class="hljs-string"></span><span class="hljs-string">        Args:</span><span class="hljs-string">            m_data (str): 节点名称</span><span class="hljs-string">            parent : Defaults to None.</span><span class="hljs-string">        &quot;&quot;&quot;</span>        super(PipeNode, self).__init__(m_data, parent)        self.__expand = <span class="hljs-literal">True</span></code></pre><h3 id="文件夹节点"><a href="#文件夹节点" class="headerlink" title="文件夹节点"></a>文件夹节点</h3><p>&emsp;&emsp;文件夹节点继承阶段节点，同时新增了一些属性：文件夹标识、路径、符合显示规则的文件列表、文件夹所属资产名、是否编辑打包文件以及编辑的文件列表。</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FolderNode</span>(<span class="hljs-params">PipeNode</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;文件夹节点</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        PipeNode (class): 继承阶段节点</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, m_data, m_info, asset, parent=None</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;初始化节点</span><span class="hljs-string"></span><span class="hljs-string">        Args:</span><span class="hljs-string">            m_data (str): 节点名称</span><span class="hljs-string">            m_info (dict): 节点路径、标识、符合显示规则的文件</span><span class="hljs-string">            asset (asset): 节点关联的资产</span><span class="hljs-string">            parent : Defaults to None.</span><span class="hljs-string">        &quot;&quot;&quot;</span>        super(FolderNode, self).__init__(m_data, parent)        self.__sign = m_info[<span class="hljs-string">&#x27;sign&#x27;</span>]        self.__path = m_info[<span class="hljs-string">&#x27;path&#x27;</span>]        self.__rule_paths = m_info[<span class="hljs-string">&#x27;rule_paths&#x27;</span>]        self.__asset = asset        self.__edit_children = <span class="hljs-number">0</span>        self.__files_children = []</code></pre><h2 id="四、Maya-打包流程"><a href="#四、Maya-打包流程" class="headerlink" title="四、Maya 打包流程"></a>四、Maya 打包流程</h2><p>&emsp;&emsp;当处理 Maya 文件打包时，我们会新开一个进程，用于启动 Maya 以及运行脚本。</p><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>&emsp;&emsp;Qt 中的 QProcess 类可用于完成启动外部程序，并与之交互通信。</p><pre><code class="hljs python">process = QtCore.QProcess()</code></pre><h3 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h3><p>&emsp;&emsp;启动 QProcess 进程有两种方式：</p><ol><li>传递程序以及命令行参数给 start()  <pre><code class="hljs python">process.start(<span class="hljs-string">&quot;programm.exe&quot;</span>, <span class="hljs-string">&quot;echo&gt;test.txt&quot;</span>)</code></pre></li></ol><!--  --><hr><h2 id="获取最大版本号的文件"><a href="#获取最大版本号的文件" class="headerlink" title="获取最大版本号的文件"></a>获取最大版本号的文件</h2><p>&emsp;&emsp;由于制作文件的过程一般会更新很多个版本，因此需要一个方法来获取最大版本的文件。</p><pre><code class="hljs python"><span class="hljs-meta">@staticmethod</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_newset_files</span>(<span class="hljs-params">fd_files</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;获取最大版本文件 </span><span class="hljs-string">    文件格式：&quot;v&quot; + &quot;版本数字&quot; + &quot;.&quot; + &quot;后缀&quot;</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        fd_files (list): 需要筛选的文件列表</span><span class="hljs-string"></span><span class="hljs-string">    Returns:</span><span class="hljs-string">        max_ver_files[list]: 最大版本文件列表</span><span class="hljs-string">    &quot;&quot;&quot;</span>    max_ver_files = []    file_ver_dict = &#123;&#125;    <span class="hljs-keyword">for</span> fd_file <span class="hljs-keyword">in</span> fd_files:        split_info = re.split(<span class="hljs-string">&quot;v(?=\d)|\.&quot;</span>, fd_file)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> len(split_info) == <span class="hljs-number">3</span>:            <span class="hljs-keyword">continue</span>        file_start, file_ver, file_ext = split_info        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_start <span class="hljs-keyword">in</span> file_ver_dict.keys():            file_ver_dict[file_start] = &#123;<span class="hljs-string">&#x27;ver&#x27;</span>: file_ver, <span class="hljs-string">&#x27;ext&#x27;</span>: file_ext&#125;        <span class="hljs-keyword">elif</span> file_ver &gt; file_ver_dict[file_start][<span class="hljs-string">&#x27;ver&#x27;</span>]:            file_ver_dict[file_start][<span class="hljs-string">&#x27;ver&#x27;</span>] = file_ver    <span class="hljs-keyword">for</span> start, info <span class="hljs-keyword">in</span> file_ver_dict.items():        file_path = start + <span class="hljs-string">&#x27;v&#x27;</span> + info[<span class="hljs-string">&#x27;ver&#x27;</span>] + <span class="hljs-string">&#x27;.&#x27;</span> + info[<span class="hljs-string">&#x27;ext&#x27;</span>]        max_ver_files.append(file_path)    <span class="hljs-keyword">return</span> max_ver_files</code></pre>]]></content>
    
    
    <categories>
      
      <category>cgtw</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>CgTeamwork</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mel的使用</title>
    <link href="/2021/04/13/maya/mel%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/04/13/maya/mel%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;虽然接触 Maya 开发已经快接近两年了，但是发现自己其实并不会 Mel 语言！很多 Maya 中的命令也不知道怎么查询，有时候需要优化 Maya 自带功能时，不管是阅读还是修改都带来了极大的障碍。因此还是抽个时间把 Maya 文档中的 Mel 模块看一遍才行。</p><p>&emsp;&emsp;下面记录一些知识重点！</p><hr><h3 id="查询命令-whatIs"><a href="#查询命令-whatIs" class="headerlink" title="查询命令 whatIs"></a>查询命令 whatIs</h3><p>&emsp;&emsp;有时候我们不知道 Maya 做了什么具体操作，通常会打开脚本编辑器中的“Echo All Commands”，来查看执行过程中调用的命令。</p><p>&emsp;&emsp;我们可以用 <code>whatIs</code> 查询命令。whatIs 命令将返回一个字符串，表示该参数是一个命令、程序、脚本或未知。如果给它一个脚本名称，它将返回脚本路径。</p><p>&emsp;&emsp;以 Maya 的添加分段功能为例，键入命令：</p><pre><div class="caption"><span>SubdividePolygon;``` ，运行后返回结果： ```// Result: Run Time Command</span><a href="//">``` 。我们可以找到<font color< a></font></a></div><code class="hljs whatIs">SubdividePolygon 命令在文件中的部分如下所示：&#96;&#96;&#96;MelrunTimeCommand -default true-annotation (uiRes(&quot;m_defaultRunTimeCommands.kSubdividePolygonAnnot&quot;))-category   (&quot;Menu items.Modeling.Edit Mesh&quot;)-command    (&quot;performPolySubdivide \&quot;\&quot; 0&quot;)SubdividePolygon;</code></pre><p>再次键入命令查询 <code>whatIs performPolySubdivide;</code> ，运行后返回结果 <code>// Result: Mel procedure found in: C:/Program Files/Autodesk/Maya2018/scripts/others/performPolySubdivide.mel // </code> ，在这里我们就找到具体的执行文件了。</p><hr><h3 id="拖拽属性到脚本编辑器"><a href="#拖拽属性到脚本编辑器" class="headerlink" title="拖拽属性到脚本编辑器"></a>拖拽属性到脚本编辑器</h3><p>&emsp;&emsp;Maya 可以使用<font color="red">鼠标中键</font>将属性从“属性编辑器”(Attribute Editor)拖放到“脚本编辑器”(Script Editor)。node.attributeName 会直接添加到“脚本编辑器”(Script Editor)中。<br><img src="/2021/04/13/maya/mel%E7%9A%84%E4%BD%BF%E7%94%A8/1.gif"></p><hr><h3 id="Source-Script"><a href="#Source-Script" class="headerlink" title="Source Script"></a>Source Script</h3><p>&emsp;&emsp;执行文本文件的内容。</p><p>&emsp;&emsp;在调用自定义的 mel 的方法前，需要先定义，也就是先把方法运行声明一次。使用任意文件名保存脚本，然后使用 source 命令将其源化。脚本源化后，可以按任意顺序调用其任何全局程序。</p><p>&emsp;&emsp;可以点击脚本编辑器中的 <img src="/2021/04/13/maya/mel%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"> 按钮源化脚本。如果在源化脚本之后更改了脚本，那么 Maya 不会自动拾取该更改。您需要使用“文件 &gt; 源化脚本”(File &gt; Source Script)重新运行脚本。</p><p>&emsp;&emsp;如果不确定是否需要源化脚本，则可在调用之前测试函数在 MEL 中是否可用：</p><pre><code class="hljs Mel"><span class="hljs-keyword">if</span> (!<span class="hljs-string">`exists myLocalProc`</span>)&#123;    <span class="hljs-keyword">source</span> <span class="hljs-string">&quot;xxx.mel&quot;</span>;&#125;myLocalProc;</code></pre><p>注意： MEL 脚本和 mayaAscii 文件是不同的。如果将 .ma 文件重命名为 .mel 文件并源化该文件，则可能会出错。或者，如果将 .mel 脚本重命名为 .ma 文件并打开该文件，则可能会出错，或者甚至会使 Maya 崩溃。Maya 在读取文件时会执行一些特殊操作以提高性能，并非所有命令都与此兼容。</p><hr><h3 id="脚本编辑器自动补全"><a href="#脚本编辑器自动补全" class="headerlink" title="脚本编辑器自动补全"></a>脚本编辑器自动补全</h3><p>&emsp;&emsp;开启 Command -&gt; Command Completion ，键入时自动完成命令名称。如果启用“显示工具提示帮助”(Show Tooltip Help)，则命令名称将在您键入时自动显示。如果禁用“显示工具提示帮助”(Show Tooltip Help)，则必须按住 Ctrl+空格键才能显示它们。</p><p><img src="/2021/04/13/maya/mel%E7%9A%84%E4%BD%BF%E7%94%A8/3.gif"></p><p>&emsp;&emsp;开启 Command -&gt; Object Path Completion ，键入时自动完成对象路径名称。如果启用“显示工具提示帮助”(Show Tooltip Help)，则命令名称将在您键入时自动显示。如果禁用“显示工具提示帮助”(Show Tooltip Help)，则必须按住 Ctrl+空格键才能显示它们。</p><hr><h3 id="判断存在性"><a href="#判断存在性" class="headerlink" title="判断存在性"></a>判断存在性</h3><ul><li><p>命令和脚本: exists<br>如果参数为有效的命令、子程序或脚本，exists 命令将返回 true。</p>  <pre><code class="hljs Mel"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">exists</span>(<span class="hljs-string">&quot;sphere&quot;</span>)) &#123;    <span class="hljs-keyword">sphere</span>; <span class="hljs-comment">// make a sphere</span>&#125;</code></pre></li><li><p>对象: objExists<br>如果对象存在且包含某个明确的名称，objExists 函数将返回 true。</p>  <pre><code class="hljs Mel"><span class="hljs-keyword">sphere</span> -name <span class="hljs-string">&quot;george&quot;</span>;<span class="hljs-comment">// Result: george makeNurbSphere1 //</span><span class="hljs-keyword">print</span>(<span class="hljs-keyword">objExists</span>(<span class="hljs-string">&quot;george&quot;</span>));<span class="hljs-number">1</span><span class="hljs-keyword">print</span>(<span class="hljs-keyword">objExists</span>(<span class="hljs-string">&quot;martha&quot;</span>));<span class="hljs-number">0</span></code></pre></li><li><p>节点上的属性: attributeExists<br>使用 attributeExists 检查节点上是否存在给定属性。命令的形式为<code>attributeExists(&quot;attributeName&quot;,&quot;nodeName&quot;)</code></p>  <pre><code class="hljs MEL"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">attributeExists</span>(<span class="hljs-string">&quot;visibility&quot;</span>,<span class="hljs-string">&quot;mySphere&quot;</span>)) &#123;    <span class="hljs-keyword">setAttr</span> mySphere.visibility on;&#125;</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Maya</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>MEL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unreal材质替换插件</title>
    <link href="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在学习了 UnrealPython 基础教程后，尝试开发了一下小功能：把 A 物体的材质一一对应赋给 B 物体。</p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/1.png"></p><p>&emsp;&emsp;UE4 里面不能对物体选面上材质，一些对物体的操作只能从其他三维软件中进行。在 UE4 中，会把物体的材质信息记录在一个属性当中，对于两个材质分组一致的物体，可以通过替换材质球达到显示一致的效果。</p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/2.png"></p><p>&emsp;&emsp;同时，如果两个物体的材质球数量不一样的话，会对多出来的进行忽略，序号一致的进行一一对应。</p><hr><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>material_tool.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_component</span>(<span class="hljs-params">actor</span>):</span>    <span class="hljs-keyword">if</span> actor.static_class() == unreal.StaticMeshActor.static_class():        <span class="hljs-keyword">return</span> actor.static_mesh_component    <span class="hljs-keyword">elif</span> actor.static_class() == unreal.SkeletalMeshActor.static_class():        <span class="hljs-keyword">return</span> actor.skeletal_mesh_component    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Error: unacceptable type: &#123;&#125;, &#123;&#125;&quot;</span>.format(actor.name(), actor.static_class()))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">world_actor_function</span>():</span>    selected_actors = unreal.EditorLevelLibrary.get_selected_level_actors()    <span class="hljs-keyword">if</span> len(selected_actors) &lt; <span class="hljs-number">2</span>:        <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;please select more than two objects&quot;</span>)        <span class="hljs-keyword">return</span>    ori_actor = selected_actors[<span class="hljs-number">0</span>]    des_actors = selected_actors[<span class="hljs-number">1</span>:]    ori_component = get_component(ori_actor)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ori_component:        <span class="hljs-keyword">return</span>    ori_materials_num = len(ori_component.get_materials())    <span class="hljs-keyword">for</span> des_actor <span class="hljs-keyword">in</span> des_actors:        des_component = get_component(des_actor)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> des_component:            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> range(ori_materials_num):            index_material = ori_component.get_material(index)            des_component.set_material(index, index_material)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">asset_function</span>():</span>    selected_assets = unreal.EditorUtilityLibrary().get_selected_assets()    <span class="hljs-keyword">if</span> len(selected_assets) &lt; <span class="hljs-number">2</span>:        print( <span class="hljs-string">&quot;please select more than two objects&quot;</span>)        <span class="hljs-keyword">return</span>    ori_asset = selected_assets[<span class="hljs-number">0</span>]    des_assets = selected_assets[<span class="hljs-number">1</span>:]    <span class="hljs-keyword">if</span> ori_asset.static_class() == unreal.SkeletalMesh.static_class():        ori_mat = ori_asset.get_editor_property(<span class="hljs-string">&#x27;materials&#x27;</span>)        <span class="hljs-keyword">for</span> des_asset <span class="hljs-keyword">in</span> des_assets:            des_mat = des_asset.get_editor_property(<span class="hljs-string">&#x27;materials&#x27;</span>)            <span class="hljs-keyword">if</span> len(ori_mat) &gt; len(des_mat):                mat = ori_mat[:len(des_mat)]            <span class="hljs-keyword">elif</span> len(ori_mat) &lt; len(des_mat):                mat = des_mat                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(ori_mat)):                    mat[i] = ori_mat[i]            <span class="hljs-keyword">else</span>:                mat = ori_mat            des_asset.set_editor_property(<span class="hljs-string">&#x27;materials&#x27;</span>, mat)    <span class="hljs-keyword">elif</span> ori_asset.static_class() == unreal.StaticMesh.static_class():        ori_materials_num = <span class="hljs-number">0</span>        loop = <span class="hljs-literal">True</span>        interface_list = []        <span class="hljs-keyword">while</span> loop:            material = ori_asset.get_material(ori_materials_num)            <span class="hljs-keyword">if</span> material:                interface_list.append(material)                ori_materials_num = ori_materials_num + <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                loop = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> des_asset <span class="hljs-keyword">in</span> des_assets:            <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> range(ori_materials_num):                index_material = ori_asset.get_material(index)                des_asset.set_material(index, index_material)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;Error: unacceptable type: &#123;&#125;, &#123;&#125;&quot;</span>.format(ori_asset, ori_asset.static_class()))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">asset=True</span>):</span>    <span class="hljs-keyword">if</span> asset:        <span class="hljs-comment"># edit asset</span>        asset_function()    <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># edit world actor</span>        world_actor_function()</code></pre><p>注：</p><ol><li>可以转化资产材质，也可以转化世界中物体的材质。</li><li>当选择物体类型不一致（StaticMesh / SkeletonMesh）时，在转换资产材质时会出错。</li><li>可以实现一赋多，一套材质赋给多个物体。</li></ol><hr><h2 id="创建快捷菜单"><a href="#创建快捷菜单" class="headerlink" title="创建快捷菜单"></a>创建快捷菜单</h2><p>create_mt_tool_menu.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unrealmenus = unreal.ToolMenus.get()<span class="hljs-comment"># add contextbrowser menu</span>menu_name = <span class="hljs-string">&quot;ContentBrowser.AssetContextMenu&quot;</span>menu = menus.find_menu(menu_name)entry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.MENU_ENTRY)entry.set_label(<span class="hljs-string">&quot;Convert Materials&quot;</span>)<span class="hljs-comment"># NOTE 注册执行的命令</span>typ = unreal.ToolMenuStringCommandType.PYTHONrun_str = <span class="hljs-string">&quot;import material_tool; material_tool.main()&quot;</span>entry.set_string_command(typ, <span class="hljs-string">&quot;&quot;</span>, run_str)menu.add_section(<span class="hljs-string">&#x27;CustomControl&#x27;</span>, label=<span class="hljs-string">&#x27;CustomMenu&#x27;</span>)menu.add_menu_entry(<span class="hljs-string">&#x27;CustomControl&#x27;</span>,entry)<span class="hljs-comment"># add viewport right clicked menu</span>viewport_menu_name = <span class="hljs-string">&quot;LevelEditor.ActorContextMenu&quot;</span>menu = menus.find_menu(viewport_menu_name)entry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.MENU_ENTRY)entry.set_label(<span class="hljs-string">&quot;Convert Materials&quot;</span>)typ = unreal.ToolMenuStringCommandType.PYTHONrun_str = <span class="hljs-string">&quot;import material_tool; material_tool.main(False)&quot;</span>entry.set_string_command(typ, <span class="hljs-string">&quot;&quot;</span>, run_str)menu.add_section(<span class="hljs-string">&#x27;CustomControl&#x27;</span>, label=<span class="hljs-string">&#x27;ComstomMenu&#x27;</span>)menu.add_menu_entry(<span class="hljs-string">&#x27;CustomControl&#x27;</span>,entry)<span class="hljs-comment"># add toolbar menu</span>toolbar_menu_name = <span class="hljs-string">&quot;LevelEditor.LevelEditorToolBar&quot;</span>menu = menus.find_menu(toolbar_menu_name)menu.add_section(<span class="hljs-string">&#x27;CustomControl&#x27;</span>, label=<span class="hljs-string">&#x27;Convert Materials&#x27;</span>)typ = unreal.ToolMenuStringCommandType.PYTHONentry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.TOOL_BAR_BUTTON)entry.set_label(<span class="hljs-string">&quot;By Asset&quot;</span>)run_str = <span class="hljs-string">&quot;import material_tool; material_tool.main()&quot;</span>entry.set_string_command(typ, <span class="hljs-string">&quot;&quot;</span>, run_str)menu.add_menu_entry(<span class="hljs-string">&#x27;CustomControl&#x27;</span>,entry)entry = unreal.ToolMenuEntry(type=unreal.MultiBlockType.TOOL_BAR_BUTTON)entry.set_label(<span class="hljs-string">&quot;By World&quot;</span>)run_str = <span class="hljs-string">&quot;import material_tool; material_tool.main(False)&quot;</span>entry.set_string_command(typ, <span class="hljs-string">&quot;&quot;</span>, run_str)menu.add_menu_entry(<span class="hljs-string">&#x27;CustomControl&#x27;</span>,entry)<span class="hljs-comment"># add it to show the button</span>menus.refresh_all_widgets()</code></pre><p>可以选择资产右键、或选择世界中物体右键、或在工具架上点击使用。</p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/3.png"></p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/4.png"></p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/5.png"></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>&emsp;&emsp;一开始我是用 Startup Scripts 进行配置的，但是这种方式配置假如新建了项目，每次都要重新指定脚本路径，非常麻烦。</p><p>&emsp;&emsp;后来跟智伤帝探讨后发现可以像 Maya UserSetup 一样配置一个启动时自动运行的文件。创建一个名为 “init_unreal.py” 的文件，放置于我的文档 “Documents\UnrealEngine\Python” 文件夹中，Unreal 启动时就会自动读取该文件。</p><p>init_unreal.py</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> create_mt_tool_menu</code></pre><p>&emsp;&emsp;为了方便，我直接把这几个文件也放进“Documents\UnrealEngine\Python” 文件夹。</p><p><img src="/2021/04/05/unreal/Unreal%E6%9D%90%E8%B4%A8%E6%9B%BF%E6%8D%A2%E6%8F%92%E4%BB%B6/6.png"></p><p>&emsp;&emsp;这样，只需要在创建新项目时加载 Python 插件，重启引擎后就可以在菜单上看到配置好的工具了。</p><p>&emsp;&emsp;能不能让引擎在创建新项目的时候自动加载 Python 插件呢（以尽量减少操作为目的）？答案是可以的，智伤帝给出了修改启动 bat 的方式，这种方式以后再研究使用吧，暂时是用不上了。</p><p>&emsp;&emsp;至于加载 Python，项目只要加载过一次，下次就会自动加载了，所以动动手指也没有特别麻烦啦~</p>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UnrealPython基础学习</title>
    <link href="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;🛎 在 UE4 中使用 Python 开发入门。</p><p>&emsp;&emsp;视频学习链接：<a href="https://www.bilibili.com/video/BV1b4411r7kX?p=9">虚幻引擎使用Python开发</a></p><h2 id="L1-在-UE4-中配置-Python"><a href="#L1-在-UE4-中配置-Python" class="headerlink" title="L1 在 UE4 中配置 Python"></a>L1 在 UE4 中配置 Python</h2><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><p>&emsp;&emsp;从菜单 “Edit - Plugins” 进入插件管理，从左侧列表找到 “Scripting”。勾选 Python Editor Script Plugin 后重启引擎。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L1_1.png"></p><h3 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h3><p>&emsp;&emsp;从菜单 “Edit - Project Settings” 进入项目设置，从左侧列表找到 “Python”。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L1_2.png"></p><ul><li>Startup Scripts: 指定 UE4 打开时运行的脚本文件。</li><li>Additional Paths: UE4 可以读取到 Python 脚本的路径。</li></ul><h3 id="Unreal-Python-API"><a href="#Unreal-Python-API" class="headerlink" title="Unreal Python API"></a>Unreal Python API</h3><p>Unreal Python <a href="https://docs.unrealengine.com/en-US/PythonAPI/index.html">API 文档</a></p><h2 id="L2-使用-Python-导入资产"><a href="#L2-使用-Python-导入资产" class="headerlink" title="L2 使用 Python 导入资产"></a>L2 使用 Python 导入资产</h2><h3 id="Example1-导入贴图和音频"><a href="#Example1-导入贴图和音频" class="headerlink" title="Example1 导入贴图和音频"></a>Example1 导入贴图和音频</h3><p>AssetFunction_1.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># import AssetFunction_1 as af</span><span class="hljs-comment"># reload(af)</span><span class="hljs-comment"># af.importMyAssets()</span>asset_folder = <span class="hljs-string">&#x27;D:/ue4/test/asset&#x27;</span>texture_jpg = os.path.join(asset_folder, <span class="hljs-string">&#x27;dear.jpg&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)sound_mp3 = os.path.join(asset_folder, <span class="hljs-string">&#x27;easy.mp3&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">importMyAssets</span>():</span>    texture_task = bulidImportTask(texture_jpg, <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>)    sound_task = bulidImportTask(sound_mp3, <span class="hljs-string">&#x27;/Game/MyAsset/Sounds&#x27;</span>)    executeImportTasks([texture_task, sound_task])<span class="hljs-comment"># ! 设置导入资产属性</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bulidImportTask</span>(<span class="hljs-params">filename, destination_path</span>):</span>    task = unreal.AssetImportTask()    task.set_editor_property(<span class="hljs-string">&#x27;automated&#x27;</span>, <span class="hljs-literal">True</span>)    task.set_editor_property(<span class="hljs-string">&#x27;destination_name&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    task.set_editor_property(<span class="hljs-string">&#x27;destination_path&#x27;</span>, destination_path)    task.set_editor_property(<span class="hljs-string">&#x27;filename&#x27;</span>, filename)    task.set_editor_property(<span class="hljs-string">&#x27;replace_existing&#x27;</span>, <span class="hljs-literal">True</span>)    task.set_editor_property(<span class="hljs-string">&#x27;save&#x27;</span>, <span class="hljs-literal">True</span>)    <span class="hljs-keyword">return</span> task<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">executeImportTasks</span>(<span class="hljs-params">tasks</span>):</span>    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:        <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> task.get_editor_property(<span class="hljs-string">&#x27;imported_object_paths&#x27;</span>):            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Imported &#123;&#125;&#x27;</span>.format(path)</code></pre><h3 id="Example2-导入fbx"><a href="#Example2-导入fbx" class="headerlink" title="Example2 导入fbx"></a>Example2 导入fbx</h3><p>AssetFunction_2.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># import AssetFunction_2 as af</span><span class="hljs-comment"># reload(af)</span><span class="hljs-comment"># af.importMyAssets()</span>asset_folder = <span class="hljs-string">&#x27;D:/ue4/test/asset&#x27;</span>static_mesh_fbx = os.path.join(asset_folder, <span class="hljs-string">&#x27;static_fbx.fbx&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)skeletal_mesh_fbx = os.path.join(asset_folder, <span class="hljs-string">&#x27;skeletal_fbx.fbx&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">importMyAssets</span>():</span>    <span class="hljs-comment"># ! 静态网格</span>    static_mesh_task = bulidImportTask(static_mesh_fbx, <span class="hljs-string">&#x27;/Game/MyAsset/StaticMeshes&#x27;</span>, buildStaticMeshImportOptions())    <span class="hljs-comment"># ! 带骨骼的网格</span>    skeletal_mesh_task = bulidImportTask(skeletal_mesh_fbx, <span class="hljs-string">&#x27;/Game/MyAsset/SkeletalMeshes&#x27;</span>, buildSkeletalMeshImportOptions())    executeImportTasks([static_mesh_task, skeletal_mesh_task])<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bulidImportTask</span>(<span class="hljs-params">filename, destination_path, options=None</span>):</span>    task = unreal.AssetImportTask()    task.set_editor_property(<span class="hljs-string">&#x27;automated&#x27;</span>, <span class="hljs-literal">True</span>)    task.set_editor_property(<span class="hljs-string">&#x27;destination_name&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)    task.set_editor_property(<span class="hljs-string">&#x27;destination_path&#x27;</span>, destination_path)    task.set_editor_property(<span class="hljs-string">&#x27;filename&#x27;</span>, filename)    task.set_editor_property(<span class="hljs-string">&#x27;replace_existing&#x27;</span>, <span class="hljs-literal">True</span>)    task.set_editor_property(<span class="hljs-string">&#x27;save&#x27;</span>, <span class="hljs-literal">True</span>)    task.set_editor_property(<span class="hljs-string">&#x27;options&#x27;</span>, options)    <span class="hljs-keyword">return</span> task<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">executeImportTasks</span>(<span class="hljs-params">tasks</span>):</span>    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)    <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:        <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> task.get_editor_property(<span class="hljs-string">&#x27;imported_object_paths&#x27;</span>):            <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Imported &#123;&#125;&#x27;</span>.format(path)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildStaticMeshImportOptions</span>():</span>    options = unreal.FbxImportUI()    <span class="hljs-comment"># unreal.FbxImportUI</span>    options.set_editor_property(<span class="hljs-string">&#x27;import_mesh&#x27;</span>, <span class="hljs-literal">True</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_textures&#x27;</span>, <span class="hljs-literal">False</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_materials&#x27;</span>, <span class="hljs-literal">True</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_as_skeletal&#x27;</span>, <span class="hljs-literal">False</span>) <span class="hljs-comment"># Static Mesh</span>    <span class="hljs-comment"># unreal.FbxMeshImportData</span>    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="hljs-number">50.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>))    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">110.0</span>, <span class="hljs-number">0.0</span>))    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_uniform_scale&#x27;</span>, <span class="hljs-number">1.0</span>)    <span class="hljs-comment"># unreal.FbxStaticMeshImportData</span>    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;combine_meshes&#x27;</span>, <span class="hljs-literal">True</span>)    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;generate_lightmap_u_vs&#x27;</span>, <span class="hljs-literal">True</span>)    options.static_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;auto_generate_collision&#x27;</span>, <span class="hljs-literal">True</span>)    <span class="hljs-keyword">return</span> options<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildSkeletalMeshImportOptions</span>():</span>    options = unreal.FbxImportUI()    <span class="hljs-comment"># unreal.FbxImportUI</span>    options.set_editor_property(<span class="hljs-string">&#x27;import_mesh&#x27;</span>, <span class="hljs-literal">True</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_textures&#x27;</span>, <span class="hljs-literal">True</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_materials&#x27;</span>, <span class="hljs-literal">True</span>)    options.set_editor_property(<span class="hljs-string">&#x27;import_as_skeletal&#x27;</span>, <span class="hljs-literal">True</span>) <span class="hljs-comment"># Skeletal Mesh</span>    <span class="hljs-comment"># unreal.FbxMeshImportData</span>    options.skeletal_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>))    options.skeletal_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>))    options.skeletal_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_uniform_scale&#x27;</span>, <span class="hljs-number">1.0</span>)    <span class="hljs-comment"># unreal.FbxSkeletalMeshImportData</span>    options.skeletal_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;import_morph_targets&#x27;</span>, <span class="hljs-literal">True</span>)    options.skeletal_mesh_import_data.set_editor_property(<span class="hljs-string">&#x27;update_skeleton_reference_pose&#x27;</span>, <span class="hljs-literal">False</span>)    <span class="hljs-keyword">return</span> options</code></pre><h3 id="Example3-创建、复制、删除、重命名资产和文件夹"><a href="#Example3-创建、复制、删除、重命名资产和文件夹" class="headerlink" title="Example3 创建、复制、删除、重命名资产和文件夹"></a>Example3 创建、复制、删除、重命名资产和文件夹</h3><p>AssetFunction_3.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># import AssetFunction_3 as af</span><span class="hljs-comment"># reload(af)</span><span class="hljs-comment"># af.createDirectory()</span><span class="hljs-comment"># ! 创建文件夹 ~/MyNewDirectory</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createDirectory</span>():</span>    unreal.EditorAssetLibrary.make_directory(<span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)<span class="hljs-comment"># ! 复制文件夹 ~/MyNewDirectory -&gt; ~/MyNewDirectory_Duplicated</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicateDirectory</span>():</span>    <span class="hljs-keyword">return</span> unreal.EditorAssetLibrary.duplicate_directory(<span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>)<span class="hljs-comment"># ! 删除文件夹 ~/MyNewDirectory</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteDirectory</span>():</span>    unreal.EditorAssetLibrary.delete_directory(<span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)<span class="hljs-comment"># ! 重命名文件夹 ~/MyNewDirectory_Duplicated -&gt; ~/MyNewDirectory_Renamed</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">renameDirectory</span>():</span>    <span class="hljs-keyword">return</span> unreal.EditorAssetLibrary.rename_directory(<span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/MyNewDirectory_Renamed&#x27;</span>)<span class="hljs-comment"># ! 复制资产 ~/dear -&gt; ~/dear_Duplicated</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicateAsset</span>():</span>    <span class="hljs-keyword">return</span> unreal.EditorAssetLibrary.duplicate_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Duplicated&#x27;</span>)<span class="hljs-comment"># ! 删除资产 ~/dear</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteAsset</span>():</span>    unreal.EditorAssetLibrary.delete_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>)<span class="hljs-comment"># ! 判断资产是否存在</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">assetExist</span>():</span>    <span class="hljs-keyword">print</span> unreal.EditorAssetLibrary.does_asset_exist(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>)    <span class="hljs-keyword">print</span> unreal.EditorAssetLibrary.does_asset_exist(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Duplicated&#x27;</span>)<span class="hljs-comment"># ! 重命名资产 ~/dear_Duplicated -&gt; ~/dear_Renamed</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">renameAsset</span>():</span>    unreal.EditorAssetLibrary.rename_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Duplicated&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Renamed&#x27;</span>)<span class="hljs-comment"># ! 显示复制资产提示框 ~/dear_Renamed -&gt; ~/dear_Duplicated</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicateAssetDialog</span>(<span class="hljs-params">show_dialog=True</span>):</span>    <span class="hljs-keyword">if</span> show_dialog:        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset_with_dialog(<span class="hljs-string">&#x27;dear_Duplicated&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>, unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Renamed&#x27;</span>))    <span class="hljs-keyword">else</span>:        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset(<span class="hljs-string">&#x27;dear_Duplicated&#x27;</span>, <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>, unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Renamed&#x27;</span>))<span class="hljs-comment"># ! 显示重命名提示框 </span><span class="hljs-comment"># ! ~/dear_Renamed -&gt; ~/dear_Renamed_2</span><span class="hljs-comment"># ! ~/dear_Duplicated -&gt; ~/dear_Duplicated_Renamed</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">renameAssetDialog</span>(<span class="hljs-params">show_dialog=True</span>):</span>    first_renmae_data = unreal.AssetRenameData(unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Renamed&#x27;</span>), <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="hljs-string">&#x27;dear_Renamed_2&#x27;</span>)    second_rename_data = unreal.AssetRenameData(unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear_Duplicated&#x27;</span>), <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="hljs-string">&#x27;dear_Duplicated_Renamed&#x27;</span>)    <span class="hljs-keyword">if</span> show_dialog:        unreal.AssetToolsHelpers.get_asset_tools().rename_assets_with_dialog([first_renmae_data, second_rename_data])    <span class="hljs-keyword">else</span>:        unreal.AssetToolsHelpers.get_asset_tools().rename_assets([first_renmae_data, second_rename_data])</code></pre><h2 id="L3-使用-Python-调用-C-函数"><a href="#L3-使用-Python-调用-C-函数" class="headerlink" title="L3 使用 Python 调用 C++ 函数"></a>L3 使用 Python 调用 C++ 函数</h2><p>&emsp;&emsp;可以通过公开蓝图类的方式使 Python 可以访问 C++ 的函数。</p><h3 id="创建蓝图C-类"><a href="#创建蓝图C-类" class="headerlink" title="创建蓝图C++类"></a>创建蓝图C++类</h3><ol><li>首先，创建一个继承蓝图函数库的C++类，命名为“ ZFunction ”，创建成功后会自动打开 Visual Studio。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L3_1.png"></li><li>修改 .h 文件   <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CoreMinimal.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ZFunction.generated.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">* </span><span class="hljs-comment">*/</span>UCLASS()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SCRIPT_PROJ_API</span> <span class="hljs-title">UZFunction</span> :</span> <span class="hljs-keyword">public</span> UBlueprintFunctionLibrary&#123;    GENERATED_BODY()<span class="hljs-keyword">public</span>:    UFUNCTION(BlueprintCallable)        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CalledFromPython</span><span class="hljs-params">(FString InputString)</span></span>;&#125;;</code></pre></li><li>修改 .cpp 文件   <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ZFunction.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UZFunction::CalledFromPython</span><span class="hljs-params">(FString InputString)</span> </span>&#123;    UE_LOG(LogTemp, Error, TEXT(<span class="hljs-string">&quot;%s&quot;</span>), *InputString);&#125;</code></pre><h3 id="遍历函数和类"><a href="#遍历函数和类" class="headerlink" title="遍历函数和类"></a>遍历函数和类</h3>&emsp;&emsp;查看 UE4 中所有函数和类：<pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> sorted(dir(unreal)):<span class="hljs-keyword">print</span> x</code></pre>&emsp;&emsp;查看类中所含方法，可以看到我们创建的 ‘called_from_python’ 方法在其中。<pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> sorted(dir(unreal.ZFunction)):<span class="hljs-keyword">print</span> x</code></pre></li></ol><h3 id="调用-C-方法"><a href="#调用-C-方法" class="headerlink" title="调用 C++ 方法"></a>调用 C++ 方法</h3><pre><code class="hljs python">unreal.ZFunction.called_from_python(<span class="hljs-string">&#x27;haha&#x27;</span>)</code></pre><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L3_2.png"></p><h2 id="L4-修改文件夹颜色"><a href="#L4-修改文件夹颜色" class="headerlink" title="L4 修改文件夹颜色"></a>L4 修改文件夹颜色</h2><h3 id="定义类和方法"><a href="#定义类和方法" class="headerlink" title="定义类和方法"></a>定义类和方法</h3><ol><li>创建一个继承蓝图函数库的C++类，命名为“ CppLib ”<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_1.png"></li><li>修改 .h 文件   <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CoreMinimal.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.generated.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">* </span><span class="hljs-comment">*/</span>UCLASS()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SCRIPT_PROJ_API</span> <span class="hljs-title">UCppLib</span> :</span> <span class="hljs-keyword">public</span> UBlueprintFunctionLibrary&#123;    GENERATED_BODY()    <span class="hljs-keyword">public</span>:    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFolderColor</span><span class="hljs-params">(FString FolderPath, FLinearColor Color)</span></span>;&#125;;</code></pre></li><li>修改 .cpp 文件   <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span>  <span class="hljs-meta-string">&quot;Runtime/Core/Public/Misc/ConfigCacheIni.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::setFolderColor</span><span class="hljs-params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;    GConfig-&gt;SetString(TEXT(<span class="hljs-string">&quot;PathColor&quot;</span>), *FolderPath, *Color.ToString(), GEditorPerProjectIni);&#125;</code></pre></li><li>在 UE4 中点击重新编译。</li></ol><h3 id="在蓝图中设置文件夹颜色"><a href="#在蓝图中设置文件夹颜色" class="headerlink" title="在蓝图中设置文件夹颜色"></a>在蓝图中设置文件夹颜色</h3><ol><li>创建蓝图类“Folder”。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_2.png"></li><li>编辑事件节点，编译。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_3.png"><br>其中，自定义事件节点勾选“Call In Editor”，该事件会显示在属性编辑器上。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_4.png"></li><li>在场景中创建“Folder”，点击其属性中的“Set Folder Color”<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_5.png"></li><li>创建 “/Game/MyAsset/EXFolder”，可以看到颜色为蓝色，而对已经存在的文件夹颜色修改需要重启后才能看到效果。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_6.png"></li></ol><h3 id="在Python中创建颜色文件夹"><a href="#在Python中创建颜色文件夹" class="headerlink" title="在Python中创建颜色文件夹"></a>在Python中创建颜色文件夹</h3><p>AssetFunction_4.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># import AssetFunction_4 as af</span><span class="hljs-comment"># reload(af)</span><span class="hljs-comment"># af.generateColoredDirectories()</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateColoredDirectories</span>():</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">40</span>, <span class="hljs-number">80</span>):        dir_path = <span class="hljs-string">&#x27;/Game/MyAsset/MyColorFolder/&#x27;</span> + str(x)        linear_color = getGradientColor(x)        unreal.CppLib.set_folder_color(dir_path, linear_color)        unreal.EditorAssetLibrary.make_directory(dir_path)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getGradientColor</span>(<span class="hljs-params">x</span>):</span>    x = float(x) / <span class="hljs-number">100</span>    <span class="hljs-keyword">return</span> unreal.LinearColor(x, <span class="hljs-number">1</span>-x, <span class="hljs-number">1</span>-x, <span class="hljs-number">1</span>)</code></pre><p>&emsp;&emsp;在 UE4 运行后，会创建颜色不同的文件夹。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L4_7.png"></p><h2 id="L5-打开和关闭资产"><a href="#L5-打开和关闭资产" class="headerlink" title="L5 打开和关闭资产"></a>L5 打开和关闭资产</h2><p>&emsp;&emsp;Python只能打开资产，如果要实现关闭资产，需要添加 C++ 类增加功能来实现效果。</p><ol><li><p>添加 build.cs 依赖<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L5_1.png"></p></li><li><p>CppLib .h 文件代码  </p> <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CoreMinimal.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.generated.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">* </span><span class="hljs-comment">*/</span>UCLASS()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SCRIPT_PROJ_API</span> <span class="hljs-title">UCppLib</span> :</span> <span class="hljs-keyword">public</span> UBlueprintFunctionLibrary&#123;    GENERATED_BODY()    <span class="hljs-keyword">public</span>:    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseEditorForAssets</span><span class="hljs-params">(TArray&lt;UObject*&gt; Assets)</span></span>;    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> TArray&lt;UObject*&gt; <span class="hljs-title">GetAssetsOpenedInEditor</span><span class="hljs-params">()</span></span>;&#125;;</code></pre></li><li><p>CppLib .cpp 文件代码  </p> <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Editor.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Editor/UnrealEd/Public/Subsystems/AssetEditorSubsystem.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::CloseEditorForAssets</span><span class="hljs-params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;GetEditorSubsystem&lt;UAssetEditorSubsystem&gt;();    <span class="hljs-keyword">for</span> (UObject* Asset : Assets) &#123;        AssetEditorSubsystem-&gt;CloseAllEditorsForAsset(Asset);    &#125;&#125;<span class="hljs-function">TArray&lt;UObject*&gt; <span class="hljs-title">UCppLib::GetAssetsOpenedInEditor</span><span class="hljs-params">()</span> </span>&#123;    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;GetEditorSubsystem&lt;UAssetEditorSubsystem&gt;();    TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;GetAllEditedAssets();        <span class="hljs-keyword">return</span> EditedAssets;&#125;</code></pre><p> 注：教程上用的是 FAssetEditorManager ，但由于版本更新已经不适用，需要替换成 UAssetEditorSubsystem 。</p></li><li><p>AssetFunction_5.py 文件代码  </p> <pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># ! 加载资产</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">openAssets</span>():</span>    assets = [        unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>),        unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Sounds/easy&#x27;</span>),        unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/StaticMeshes/static_fbx&#x27;</span>)    ]    unreal.AssetToolsHelpers.get_asset_tools().open_editor_for_assets(assets)<span class="hljs-comment"># ! 获取已经打开的资产列表</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAllOpenedAssets</span>():</span>    <span class="hljs-keyword">return</span> unreal.CppLib.get_assets_opened_in_editor()<span class="hljs-comment"># ! 关闭所有打开的资产</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closeAssets</span>():</span>    assets = getAllOpenedAssets()    unreal.CppLib.close_editor_for_assets(assets)</code></pre></li><li><p>在 UE4 中调试代码   </p> <pre><code class="hljs python"><span class="hljs-keyword">import</span> AssetFunction_5 <span class="hljs-keyword">as</span> afreload(af)<span class="hljs-keyword">print</span> af.getAllOpenedAssets()af.closeAssets()</code></pre><p> 打印出已经打开的资产窗口，以及关闭所有资产窗口。<br> <img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L5_2.png"></p></li></ol><h2 id="L6-选择内容浏览器中的资产"><a href="#L6-选择内容浏览器中的资产" class="headerlink" title="L6 选择内容浏览器中的资产"></a>L6 选择内容浏览器中的资产</h2><h3 id="利用-Python-选择指定资产"><a href="#利用-Python-选择指定资产" class="headerlink" title="利用 Python 选择指定资产"></a>利用 Python 选择指定资产</h3><p>AssetFunction_6.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># import AssetFunction_6 as af</span><span class="hljs-comment"># reload(af)</span><span class="hljs-comment"># af.showAssetsInContentBrowser()</span><span class="hljs-comment"># ! 选择指定资产</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showAssetsInContentBrowser</span>():</span>    paths = [        <span class="hljs-string">&#x27;/Game/MyAsset/Sounds/easy&#x27;</span>,        <span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>    ]    unreal.EditorAssetLibrary.sync_browser_to_objects(paths)</code></pre><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L6_1.png"></p><h3 id="利用-C-和-Python-设置选择资产和文件夹"><a href="#利用-C-和-Python-设置选择资产和文件夹" class="headerlink" title="利用 C++ 和 Python 设置选择资产和文件夹"></a>利用 C++ 和 Python 设置选择资产和文件夹</h3><ol><li><p>添加 build.cs 依赖<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L6_2.png"></p></li><li><p>CppLib .h 文件代码  </p> <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CoreMinimal.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.generated.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">* </span><span class="hljs-comment">*/</span>UCLASS()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SCRIPT_PROJ_API</span> <span class="hljs-title">UCppLib</span> :</span> <span class="hljs-keyword">public</span> UBlueprintFunctionLibrary&#123;    GENERATED_BODY()    <span class="hljs-keyword">public</span>:    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> TArray&lt;FString&gt; <span class="hljs-title">GetSelectedAssets</span><span class="hljs-params">()</span></span>;    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> TArray&lt;FString&gt; <span class="hljs-title">GetSelectedFolders</span><span class="hljs-params">()</span></span>;    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetSelectedAssets</span><span class="hljs-params">(TArray&lt;FString&gt; Paths)</span></span>;    UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetSelectedFolders</span><span class="hljs-params">(TArray&lt;FString&gt; Paths)</span></span>;&#125;;</code></pre></li><li><p>CppLib .cpp 文件代码  </p> <pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CppLib.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Editor/ContentBrowser/Public/ContentBrowserModule.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Editor/ContentBrowser/Private/SContentBrowser.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Runtime/AssetRegistry/Public/AssetRegistryModule.h&quot;</span></span><span class="hljs-function">TArray&lt;FString&gt; <span class="hljs-title">UCppLib::GetSelectedAssets</span><span class="hljs-params">()</span> </span>&#123;    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::LoadModuleChecked&lt;FContentBrowserModule&gt;(<span class="hljs-string">&quot;ContentBrowser&quot;</span>);    <span class="hljs-comment">// get selected assets</span>    TArray&lt;FAssetData&gt; SelectedAssets;    ContentBrowserModule.Get().GetSelectedAssets(SelectedAssets);    <span class="hljs-comment">// convert assets to string</span>    TArray&lt;FString&gt; Result;    <span class="hljs-keyword">for</span> (FAssetData&amp; AssetData : SelectedAssets) &#123;        Result.Add(AssetData.PackageName.ToString());    &#125;    <span class="hljs-keyword">return</span> Result;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::SetSelectedAssets</span><span class="hljs-params">(TArray&lt;FString&gt; Paths)</span> </span>&#123;    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::LoadModuleChecked&lt;FContentBrowserModule&gt;(<span class="hljs-string">&quot;ContentBrowser&quot;</span>);    FAssetRegistryModule&amp; AssetRegistryModule = FModuleManager::LoadModuleChecked&lt;FAssetRegistryModule&gt;(<span class="hljs-string">&quot;AssetRegistry&quot;</span>);    <span class="hljs-comment">// convert the string to FName</span>    TArray&lt;FName&gt; PathsName;    <span class="hljs-keyword">for</span> (FString Path : Paths) &#123;        PathsName.Add(*Path);    &#125;    FARFilter AssetFilter;    AssetFilter.PackageNames = PathsName;    <span class="hljs-comment">// Find the assets</span>    TArray&lt;FAssetData&gt; AssetDatas;    AssetRegistryModule.Get().GetAssets(AssetFilter, AssetDatas);    <span class="hljs-comment">// Ask the ContentBrowser to select them Different to python, the folder levels is also selected.</span>    ContentBrowserModule.Get().SyncBrowserToAssets(AssetDatas);&#125;<span class="hljs-function">TArray&lt;FString&gt; <span class="hljs-title">UCppLib::GetSelectedFolders</span><span class="hljs-params">()</span> </span>&#123;    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::LoadModuleChecked&lt;FContentBrowserModule&gt;(<span class="hljs-string">&quot;ContentBrowser&quot;</span>);    TArray&lt;FString&gt; SelectedFolders;    ContentBrowserModule.Get().GetSelectedFolders(SelectedFolders);    <span class="hljs-keyword">return</span> SelectedFolders;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::SetSelectedFolders</span><span class="hljs-params">(TArray&lt;FString&gt; Paths)</span> </span>&#123;    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::LoadModuleChecked&lt;FContentBrowserModule&gt;(<span class="hljs-string">&quot;ContentBrowser&quot;</span>);    TArray&lt;FString&gt; SelectedFolders;    ContentBrowserModule.Get().SyncBrowserToFolders(Paths);&#125;</code></pre></li><li><p>Python 调用 C++ 测试运行  </p> <pre><code class="hljs python"><span class="hljs-comment"># ! 调用 C++ 命令设置选择文件夹</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSelectedAssets</span>():</span>    <span class="hljs-keyword">return</span> unreal.CppLib.get_selected_assets(paths)<span class="hljs-comment"># ! 调用 C++ 命令设置选择文件夹</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setSelectedAssets</span>():</span>    paths = [        <span class="hljs-string">&#x27;/Game/MyAsset/Sounds/easy&#x27;</span>,        <span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>    ]    <span class="hljs-keyword">return</span> unreal.CppLib.set_selected_assets(paths)<span class="hljs-comment"># ! 调用 C++ 命令获取选择文件夹</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSelectedFolders</span>():</span>    <span class="hljs-keyword">return</span> unreal.CppLib.get_selected_folders()<span class="hljs-comment"># ! 调用 C++ 命令设置文件夹</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setSelectedFolders</span>():</span>    paths = [        <span class="hljs-string">&#x27;/Game/MyAsset/Sounds&#x27;</span>,        <span class="hljs-string">&#x27;/Game/MyAsset/Textures&#x27;</span>    ]    <span class="hljs-keyword">return</span> unreal.CppLib.set_selected_folders(paths)</code></pre></li></ol><p>&emsp;&emsp;⚠ 令人奇怪的是，在 UE4 中编译测试可以实现我们想要的效果，但是在Visual Studio中却会报错：<code>无法打开源文件 &quot;SAssetSearchBox.h&quot;12    </code>。然鹅在VS2017有小伙伴测试没有报错，不知道是不是版本的问题。</p><p>&emsp;&emsp;为了解决这个问题，我重新新建了一个项目，把代码重新编译，仍然不通过。我在VS 2019 的项目设置 VC++ 目录的包含目录中添加了一个新路径，在 bulid.cs 文件 <em>PublicDependencyModuleNames.AddRange()</em> 中添加”EditorWidgets”，重新生成项目，成功！😄</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L6_3.png"></p><p>&emsp;&emsp;该路径是通过 C++ Api SAssetSearchBox 中找到的。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L6_4.png"></p><h2 id="L7-显示进度条"><a href="#L7-显示进度条" class="headerlink" title="L7 显示进度条"></a>L7 显示进度条</h2><p>&emsp;&emsp;该部分实现效果为：在 UE4 中显示进度条框并执行相对应任务。</p><p>&emsp;&emsp;教程中可以完全使用 Python 来实现该功能，但实际测试时发现，当前版本某些方法已经弃用或找不到 Python 接口，如 unreal.EditorCppLib.begin_spawn_actor() 和 unreal.GameplayStatics.finish_spawning_actor()。因此还是结合 C++、Blueprint 以及 Python 实现。</p><p>EditorFunction_1.py</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">executeSlowTask</span>():</span>    quantity_steps_in_slow_task = <span class="hljs-number">10</span>    <span class="hljs-keyword">with</span> unreal.ScopedSlowTask(quantity_steps_in_slow_task, <span class="hljs-string">&#x27;My Slow Task Text ...&#x27;</span>) <span class="hljs-keyword">as</span> slow_task:        slow_task.make_dialog(<span class="hljs-literal">True</span>)        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(quantity_steps_in_slow_task):            <span class="hljs-keyword">if</span> slow_task.should_cancel():                <span class="hljs-keyword">break</span>            slow_task.enter_progress_frame(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;My Slow Task Text ...&#x27;</span> + str(x) + <span class="hljs-string">&#x27; / &#x27;</span> + str(quantity_steps_in_slow_task))            <span class="hljs-comment"># Execute slow logic</span>            deferredSpawnActor()            time.sleep(<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deferredSpawnActor</span>():</span>    world = unreal.EditorLevelLibrary.get_editor_world()    <span class="hljs-comment"># ! blueprint actor</span>    actor_class = unreal.EditorAssetLibrary.load_blueprint_class(<span class="hljs-string">&#x27;/Game/BluePrint/bp_actor&#x27;</span>)    actor_location = unreal.Vector(random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">2000.0</span>), random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">2000.0</span>), <span class="hljs-number">0.0</span>)    actor_rotation = unreal.Rotator(random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">360.0</span>), random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">360.0</span>), random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">360.0</span>))    actor_scale = unreal.Vector(random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">2.0</span>), random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">2.0</span>), random.uniform(<span class="hljs-number">0.1</span>, <span class="hljs-number">2.0</span>))    actor_transform = unreal.Transform(actor_location, actor_rotation, actor_scale)    <span class="hljs-comment"># ! &quot;GameplayStatics.begin_spawning_actor_from_class()&quot; is deprecated. Use BeginDeferredActorSpawnFromClass instead.</span>    <span class="hljs-comment"># actor = unreal.GameplayStatics.begin_spawning_actor_from_class(world, actor_class, actor_transform)</span>    <span class="hljs-comment"># unreal.GameplayStatics.finish_spawning_actor(actor, actor_transform)</span>    actor = unreal.EditorCppLib.begin_spawn_actor(world, actor_class, actor_transform)    unreal.EditorCppLib.finish_spawn_actor(actor, actor_transform)</code></pre><p>EditorCppLib.h</p><pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;CoreMinimal.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;EditorCppLib.generated.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span>UCLASS()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SCRIPT_PROJ_API</span> <span class="hljs-title">UEditorCppLib</span> :</span> <span class="hljs-keyword">public</span> UBlueprintFunctionLibrary&#123;GENERATED_BODY()<span class="hljs-keyword">public</span>:UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">static</span> AActor* <span class="hljs-title">BeginSpawnActor</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UObject* WorldContextObj,TSubclassOf &lt; AActor &gt; ActorClass, <span class="hljs-keyword">const</span> FTransform&amp; SpawnTransform)</span></span>;UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FinishSpawnActor</span><span class="hljs-params">(AActor* MyActor, <span class="hljs-keyword">const</span> FTransform&amp; SpawnTransform)</span></span>;&#125;;</code></pre><p>EditorCppLib.cpp</p><pre><code class="hljs C++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;EditorCppLib.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Runtime/Engine/Classes/Kismet/GameplayStatics.h&quot;</span></span><span class="hljs-function">AActor* <span class="hljs-title">UEditorCppLib::BeginSpawnActor</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UObject* WorldContextObj, TSubclassOf &lt; AActor &gt; ActorClass, <span class="hljs-keyword">const</span> FTransform&amp; SpawnTransform)</span> </span>&#123;    <span class="hljs-keyword">return</span> UGameplayStatics::BeginDeferredActorSpawnFromClass(WorldContextObj, ActorClass, SpawnTransform);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UEditorCppLib::FinishSpawnActor</span><span class="hljs-params">(AActor* MyActor, <span class="hljs-keyword">const</span> FTransform&amp; SpawnTransform)</span> </span>&#123;    UGameplayStatics::FinishSpawningActor(MyActor, SpawnTransform);&#125;</code></pre><p>&emsp;&emsp;在 C++ API 中可以查到函数需要的参数及类型。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L7_1.png"></p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L7_2.png"></p><h2 id="L8-获取物体属性"><a href="#L8-获取物体属性" class="headerlink" title="L8 获取物体属性"></a>L8 获取物体属性</h2><p>&emsp;&emsp;利用 C++ 获取类的所有属性名，再用 Python 获取属性值。</p><p>CppLib.h文件</p><pre><code class="hljs C++">UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)    <span class="hljs-function"><span class="hljs-keyword">static</span> TArray&lt;FString&gt; <span class="hljs-title">GetAllProperties</span><span class="hljs-params">(UClass* Class)</span></span>;</code></pre><p>CppLib.cpp文件</p><pre><code class="hljs C++"><span class="hljs-function">TArray&lt;FString&gt; <span class="hljs-title">UCppLib::GetAllProperties</span><span class="hljs-params">(UClass* Class)</span> </span>&#123;    TArray&lt;FString&gt; Ret;    <span class="hljs-keyword">if</span> (Class != <span class="hljs-literal">nullptr</span>) &#123;        <span class="hljs-keyword">for</span> (TFieldIterator&lt;UProperty&gt; It(Class); It; ++It) &#123;            UProperty* Property = *It;            <span class="hljs-keyword">if</span> (Property-&gt;HasAnyPropertyFlags(EPropertyFlags::CPF_Edit)) &#123;                Ret.Add(Property-&gt;GetName());            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> Ret;&#125;</code></pre><p>PythonHelpers.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAllProperties</span>(<span class="hljs-params">object_class</span>):</span>    <span class="hljs-keyword">return</span> unreal.CppLib.get_all_properties(object_class)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printAllProperties</span>():</span>    obj = unreal.Actor()    object_class = obj.get_class()    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> getAllProperties(object_class):        name = x        <span class="hljs-keyword">while</span> len(name) &lt; <span class="hljs-number">50</span>:            name = <span class="hljs-string">&#x27; &#x27;</span> + name        <span class="hljs-keyword">print</span> name + <span class="hljs-string">&#x27;:&#x27;</span> + str(obj.get_editor_property(x))</code></pre><p>效果展示：</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L8_1.png"></p><h2 id="L9-运行-Cmd"><a href="#L9-运行-Cmd" class="headerlink" title="L9 运行 Cmd"></a>L9 运行 Cmd</h2><p>&emsp;&emsp;使用 Python 和 C++ 在 UE4 中运行 Cmd 指令。</p><p>CppLib.h文件</p><pre><code class="hljs C++">UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExecuteConsoleCommand</span><span class="hljs-params">(FString ConsoleCommand)</span></span>;</code></pre><p>CppLib.cpp文件</p><p>需要在cs文件中添加依赖项 “UnrealEd” -&gt; PublicDependencyModuleNames）</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Editor/UnrealEd/Public/Editor.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::ExecuteConsoleCommand</span><span class="hljs-params">(FString ConsoleCommand)</span> </span>&#123;    <span class="hljs-keyword">if</span> (GEditor) &#123;        UWorld* World = GEditor-&gt;GetEditorWorldContext().World();        <span class="hljs-keyword">if</span> (World) &#123;            GEditor-&gt;Exec(World, *ConsoleCommand, *GLog);        &#125;    &#125;&#125;</code></pre><p>EditorFunction_2.py文件</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">executeConsoleCommand</span>():</span>    console_commands = [<span class="hljs-string">&#x27;r.ScreenPercentage 0.1&#x27;</span>, <span class="hljs-string">&#x27;r.Color.Max 6&#x27;</span>, <span class="hljs-string">&#x27;stat fps&#x27;</span>, <span class="hljs-string">&#x27;stat unit&#x27;</span>]    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> console_commands:        unreal.CppLib.execute_console_command(x)</code></pre><p>运行效果：<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L9_1.png"></p><h2 id="L10-在场景中实例化-Actor"><a href="#L10-在场景中实例化-Actor" class="headerlink" title="L10 在场景中实例化 Actor"></a>L10 在场景中实例化 Actor</h2><p>&emsp;&emsp;在 Python 中可以使用 <code>unreal.EditorLevelLibrary.spawn_actor_from_class(actor_class, actor_location, actor_rotation)</code> 进行实例化 Actor 。</p><p>WorldFunctions.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spawnActor</span>():</span>    actor_class = unreal.EditorAssetLibrary.load_blueprint_class(<span class="hljs-string">&#x27;/Game/BluePrint/MyActor&#x27;</span>)    actor_location = unreal.Vector(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)    actor_rotation = unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)    unreal.EditorLevelLibrary.spawn_actor_from_class(actor_class, actor_location, actor_rotation)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deferredSpawnActor</span>():</span>    world = unreal.EditorLevelLibrary.get_editor_world()    actor_class = unreal.EditorAssetLibrary.load_blueprint_class(<span class="hljs-string">&#x27;/Game/BluePrint/MyActor&#x27;</span>)    actor_location = unreal.Vector(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)    actor_rotation = unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)    actor_scale = unreal.Vector(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>)    actor_transform = unreal.Transform(actor_location, actor_rotation, actor_scale)    actor = unreal.EditorCppLib.begin_spawn_actor(world, actor_class, actor_transform)    actor_tags = actor.get_editor_property(<span class="hljs-string">&#x27;tags&#x27;</span>)    actor_tags.append(<span class="hljs-string">&#x27;My Python Tag&#x27;</span>)    actor.set_editor_property(<span class="hljs-string">&#x27;tag&#x27;</span>, actor_tags)    unreal.EditorCppLib.finish_spawn_actor(actor, actor_transform)</code></pre><p>&emsp;&emsp;为了更直观看到实例化过程，我们可以对蓝图 Actor 进行编辑并对节点连接，使得在实例化时会打印出内容。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L10_1.png"></p><p>在 UE4 中运行效果：</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L10_2.png"></p><p>可以看到，使用 unreal.EditorLevelLibrary.spawn_actor_from_class() 时，虽然只创建了一次物体但实例化了两次，而后面的方法只实例化了一次。</p><h2 id="L11-类型转换"><a href="#L11-类型转换" class="headerlink" title="L11 类型转换"></a>L11 类型转换</h2><p>&emsp;&emsp;如果使用 Python 进行类型转换，转换不支持的类型时会引起崩溃，可以用 C++ 进行类型转换判断。</p><p>PythonHelpers_2.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tryCast</span>():</span>    <span class="hljs-comment"># ! this run crash use python</span>    <span class="hljs-comment"># if unreal.Actor.cast(unreal.load_asset(&#x27;/Game/MyAsset/Textures/dear&#x27;)):   </span>    <span class="hljs-keyword">if</span> unreal.Texture2D.cast(unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>)):        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Cast Succeeded&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Cast Failed&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">castObject</span>():</span>    <span class="hljs-comment"># ! this will not crash user C++</span>    <span class="hljs-keyword">if</span> cast(unreal.load_asset(<span class="hljs-string">&#x27;/Game/MyAsset/Textures/dear&#x27;</span>), unreal.Actor):        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Cast Succeeded&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Cast Failed&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cast</span>(<span class="hljs-params">object_to_cast, object_class</span>):</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">return</span> object_class.cast(object_to_cast)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></code></pre><h2 id="L12-获取世界中的指定Actor"><a href="#L12-获取世界中的指定Actor" class="headerlink" title="L12 获取世界中的指定Actor"></a>L12 获取世界中的指定Actor</h2><p>&emsp;&emsp;有三种方法筛选Actor：</p><ul><li>获取选择的Actor：unreal.EditorLevelLibrary.get_selected_level_actors()</li><li>通过类型获取： unreal.GameplayStatics.get_all_actors_of_class()</li><li>通过 tag 获取： unreal.GameplayStatics.get_all_actors_of_class()</li></ul><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSelectedActors</span>():</span>    <span class="hljs-comment"># ! Selected</span>    selected_actors = unreal.EditorLevelLibrary.get_selected_level_actors()    <span class="hljs-keyword">return</span> selected_actors<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getClassActors</span>(<span class="hljs-params">actor_class</span>):</span>    <span class="hljs-comment"># ! Class</span>    world = unreal.EditorLevelLibrary.get_editor_world()    class_actors = unreal.GameplayStatics.get_all_actors_of_class(world, actor_class)    <span class="hljs-keyword">return</span> class_actors<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTagActors</span>(<span class="hljs-params">actor_tag</span>):</span>    <span class="hljs-comment"># ! Tag</span>    world = unreal.EditorLevelLibrary.get_editor_world()    tag_actors = unreal.GameplayStatics.get_all_actors_with_tag(world, actor_tag)    <span class="hljs-keyword">return</span> tag_actors<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAllActors</span>():</span>    <span class="hljs-comment"># ! All</span>    world = unreal.EditorLevelLibrary.get_editor_world()    all_actors = unreal.GameplayStatics.get_all_actors_of_class(world, unreal.Actor)    <span class="hljs-keyword">return</span> all_actors<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sortActors</span>(<span class="hljs-params">use_selection = False, actor_class = None, actor_tag = None</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;如果有指定，则筛选指定 Actors。否则返回全部 Actors</span><span class="hljs-string"></span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># ! return all actors</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> use_selection <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> actor_class <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> actor_tag:        <span class="hljs-keyword">return</span> getAllActors()    <span class="hljs-comment"># ! get sort actors</span>    selected_actors, class_actors, tag_actors = [], [], []    <span class="hljs-keyword">if</span> use_selection:        selected_actors = list(getSelectedActors())    <span class="hljs-keyword">if</span> actor_class:        class_actors = list(getClassActors(actor_class))    <span class="hljs-keyword">if</span> actor_tag:        tag_actors = list(getTagActors(actor_tag))    final_actors = selected_actors + class_actors + tag_actors    <span class="hljs-keyword">for</span> actor <span class="hljs-keyword">in</span> final_actors:        <span class="hljs-keyword">if</span> use_selection <span class="hljs-keyword">and</span> actor <span class="hljs-keyword">in</span> selected_actors:            <span class="hljs-keyword">pass</span>        <span class="hljs-keyword">else</span>:            final_actors.remove(actor)            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> actor_class <span class="hljs-keyword">and</span> actor <span class="hljs-keyword">in</span> class_actors:            <span class="hljs-keyword">pass</span>        <span class="hljs-keyword">else</span>:            final_actors.remove(actor)            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> actor_tag <span class="hljs-keyword">and</span> actor <span class="hljs-keyword">in</span> tag_actors:            <span class="hljs-keyword">pass</span>        <span class="hljs-keyword">else</span>:            final_actors.remove(actor)            <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">if</span> final_actors:        <span class="hljs-keyword">return</span> final_actors    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> getAllActors()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cast</span>(<span class="hljs-params">object_to_cast, object_class</span>):</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">return</span> object_class.cast(object_to_cast)    <span class="hljs-keyword">except</span>:        <span class="hljs-keyword">return</span> getAllActors()</code></pre><p>&emsp;&emsp;写这个的时候，发现获取出来的 Actors 存储都是用的 数组 array，虽然方法有些和列表 List 相同，但是使用起来效果不一样，最终打印结果数组显示和数组内元素显示有差异。</p><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L12_1.png"></p><h2 id="L13-使用-Qt-进行界面开发"><a href="#L13-使用-Qt-进行界面开发" class="headerlink" title="L13 使用 Qt 进行界面开发"></a>L13 使用 Qt 进行界面开发</h2><p>&emsp;&emsp;在 UE 中一样可以使用Qt Designer进行界面开发。<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L13_1.png"></p><p>主函数 QtFunctions</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-keyword">import</span> syssys.path.append(<span class="hljs-string">&#x27;C:/Python27/Lib/site-packages&#x27;</span>)<span class="hljs-keyword">from</span> PySide <span class="hljs-keyword">import</span> QtGui<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__QtAppTick__</span>(<span class="hljs-params">delta_seconds</span>):</span>    <span class="hljs-keyword">for</span> window <span class="hljs-keyword">in</span> opened_windows:        window.eventTick(delta_seconds)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__QtAppQuit__</span>():</span>    unreal.unregister_slate_post_tick_callback(tick_handle)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__QtWindowClosed__</span>(<span class="hljs-params">window=None</span>):</span>    <span class="hljs-keyword">if</span> window <span class="hljs-keyword">in</span> opened_windows:        opened_windows.remove(window)unreal_app = QtGui.QApplication.instance()<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> unreal_app:    unreal_app = QtGui.QApplication(sys.argv)    tick_handle = unreal.register_slate_post_tick_callback(__QtAppTick__)    unreal_app.aboutToQuit.connect(__QtAppQuit__)    existing_windows = &#123;&#125;    opened_windows = []<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spawnQtWindow</span>(<span class="hljs-params">desired_window_class=None</span>):</span>    window = existing_windows.get(desired_window_class, <span class="hljs-literal">None</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> window:        window = desired_window_class()        existing_windows[desired_window_class] = window        window.aboutToClose = __QtWindowClosed__    <span class="hljs-keyword">if</span> window <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> opened_windows:        opened_windows.append(window)    window.show()    window.activateWindow()</code></pre><p>实现位移函数 QtWindowOne</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> syssys.path.append(<span class="hljs-string">&#x27;C:/Python27/Lib/site-packages&#x27;</span>)<span class="hljs-keyword">from</span> PySide.QtGui <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> PySide <span class="hljs-keyword">import</span> QtUiToolsWINDOW_NAME = <span class="hljs-string">&#x27;Qt Window One&#x27;</span>UI_FILE_FULLNAME = os.path.join(os.path.dirname(__file__), <span class="hljs-string">&#x27;ui&#x27;</span>, <span class="hljs-string">&#x27;window_move.ui&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QtWindowOne</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, parent=None</span>):</span>        super(QtWindowOne, self).__init__(parent)        self.aboutToClose = <span class="hljs-literal">None</span>        self.widget = QtUiTools.QUiLoader().load(UI_FILE_FULLNAME)        self.widget.setParent(self)        self.setWindowTitle(WINDOW_NAME)        self.setGeometry(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, self.widget.width(),self.widget.height())        self.initialiseWidget()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clossEvent</span>(<span class="hljs-params">self, event</span>):</span>          <span class="hljs-keyword">if</span> self.aboutToClose:            self.aboutToClose(self)        event.accept()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eventTick</span>(<span class="hljs-params">self, delta_seconds</span>):</span>        self.myTick(delta_seconds)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialiseWidget</span>(<span class="hljs-params">self</span>):</span>        self.time_while_this_window_is_open = <span class="hljs-number">0.0</span>        self.random_actor = <span class="hljs-literal">None</span>        self.random_actor_is_going_up = <span class="hljs-literal">True</span>        self.widget.pushButton.clicked.connect(self.moveRandomActorInScene)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moveRandomActorInScene</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">import</span> random        <span class="hljs-keyword">import</span> WorldFunctions_2        all_actors = WorldFunctions_2.sortActors(use_selection=<span class="hljs-literal">False</span>, actor_class=unreal.StaticMeshActor, actor_tag=<span class="hljs-literal">None</span>)        rand = random.randrange(<span class="hljs-number">0</span>, len(all_actors))        self.random_actor = all_actors[rand]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myTick</span>(<span class="hljs-params">self, delta_seconds</span>):</span>        self.time_while_this_window_is_open += delta_seconds        self.widget.label.setText(<span class="hljs-string">&quot;&#123;&#125; Seconds&quot;</span>.format(self.time_while_this_window_is_open))        <span class="hljs-keyword">if</span> self.random_actor:            actor_location = self.random_actor.get_actor_location()            speed = <span class="hljs-number">300.0</span> * delta_seconds            <span class="hljs-keyword">if</span> self.random_actor_is_going_up:                <span class="hljs-keyword">if</span> actor_location.z &gt; <span class="hljs-number">1000.0</span>:                    self.random_actor_is_going_up = <span class="hljs-literal">False</span>            <span class="hljs-keyword">else</span>:                speed = -speed                <span class="hljs-keyword">if</span> actor_location.z &lt; <span class="hljs-number">0.0</span>:                    self.random_actor_is_going_up = <span class="hljs-literal">True</span>            self.random_actor.add_actor_world_offset(unreal.Vector(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, speed), <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)</code></pre><p>实现旋转函数（部分） QtWindowTwo</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myTick</span>(<span class="hljs-params">self, delta_seconds</span>):</span>    self.time_while_this_window_is_open += delta_seconds    self.widget.label.setText(<span class="hljs-string">&quot;&#123;&#125; Seconds&quot;</span>.format(self.time_while_this_window_is_open))    <span class="hljs-keyword">if</span> self.random_actor:        speed = <span class="hljs-number">90.0</span> * delta_seconds        self.random_actor.add_actor_world_rotation(unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, speed), <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)</code></pre><p>实现缩放函数（部分） QtWindowThree</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myTick</span>(<span class="hljs-params">self, delta_seconds</span>):</span>    self.time_while_this_window_is_open += delta_seconds    self.widget.label.setText(<span class="hljs-string">&quot;&#123;&#125; Seconds&quot;</span>.format(self.time_while_this_window_is_open))    <span class="hljs-keyword">if</span> self.random_actor:        actor_scale = self.random_actor.get_actor_scale3d()        speed = <span class="hljs-number">3.0</span> * delta_seconds        <span class="hljs-keyword">if</span> self.random_actor_is_going_up:            <span class="hljs-keyword">if</span> actor_scale.z &gt; <span class="hljs-number">2.0</span>:                self.random_actor_is_going_up = <span class="hljs-literal">False</span>        <span class="hljs-keyword">else</span>:            speed = -speed            <span class="hljs-keyword">if</span> actor_scale.z &lt; <span class="hljs-number">0.5</span>:                self.random_actor_is_going_up = <span class="hljs-literal">True</span>        self.random_actor.set_actor_scale3d(unreal.Vector(actor_scale.x + speed, actor_scale.y + speed, actor_scale.z + speed))</code></pre><h2 id="L14-git-代码"><a href="#L14-git-代码" class="headerlink" title="L14 git 代码"></a>L14 git 代码</h2><p>&emsp;&emsp;emmm，学习到这里，才看到作者把代码放到 git 上了。-&gt; <a href="https://github.com/AlexQuevillon/UnrealPythonLibrary">UnrealPythonLibrary</a></p><p>&emsp;&emsp;不用全部自己手打可以节省更多时间！</p><p>&emsp;&emsp;不过有些代码自己还会做一些修改，自己的代码也放到 git上了 -&gt; <a href="https://github.com/VannyYuan/UnrealPythonStudy">UnrealPythonStudy</a></p><h2 id="L15-在世界中选择和取消选择物体"><a href="#L15-在世界中选择和取消选择物体" class="headerlink" title="L15 在世界中选择和取消选择物体"></a>L15 在世界中选择和取消选择物体</h2><p>获取选择物体：unreal.EditorLevelLibrary.get_selected_level_actors()</p><p>设置选择物体：unreal.EditorLevelLibrary.set_selected_level_actors(actors_to_select)</p><p>WorldFunctions_3.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-comment"># return: obj List unreal.Actor : The selected actors in the world</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSelectedActors</span>():</span>    <span class="hljs-keyword">return</span> unreal.EditorLevelLibrary.get_selected_level_actors()<span class="hljs-comment"># Note: Will always clear the selection before selecting.</span><span class="hljs-comment"># actors_to_select: obj List unreal.Actor : The actors to select.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectActors</span>(<span class="hljs-params">actors_to_select=[]</span>):</span>    unreal.EditorLevelLibrary.set_selected_level_actors(actors_to_select)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectActors_EXAMPLE</span>():</span>    <span class="hljs-keyword">import</span> WorldFunctions_2    all_actors = WorldFunctions_2.sortActors()    actors_to_select = []    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(len(all_actors)):        <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span>:            actors_to_select.append(all_actors[x])    selectActors(actors_to_select)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clearActorSelection_EXAMPLE</span>():</span>    selectActors()</code></pre><h2 id="L16-在视口中聚焦物体"><a href="#L16-在视口中聚焦物体" class="headerlink" title="L16 在视口中聚焦物体"></a>L16 在视口中聚焦物体</h2><p>&emsp;&emsp;可以实现在全部/活跃视口中聚焦指定物体。</p><p>EditorFunction_3.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-keyword">import</span> random<span class="hljs-comment"># active_viewport_only: bool : If True, will only affect the active viewport</span><span class="hljs-comment"># actor: obj unreal.Actor : The actor you want to snap to</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">focusViewportOnActor</span>(<span class="hljs-params">active_viewport_only=True, actor=None</span>):</span>    <span class="hljs-comment"># ! focus command</span>    command = <span class="hljs-string">&#x27;CAMERA ALIGN&#x27;</span>    <span class="hljs-keyword">if</span> active_viewport_only:        command += <span class="hljs-string">&#x27; ACTIVEVIEWPORTONLY&#x27;</span>    <span class="hljs-keyword">if</span> actor:        command += <span class="hljs-string">&#x27; NAME=&#x27;</span> + actor.get_name()    unreal.CppLib.execute_console_command(command)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">focusAllViewportsOnSelectedActors_EXAMPLE</span>():</span>    focusViewportOnActor(<span class="hljs-literal">False</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">focusActiveViewportOnRandomActor_EXAMPLE</span>():</span>    actors_in_world = unreal.GameplayStatics.get_all_actors_of_class(unreal.EditorLevelLibrary.get_editor_world(), unreal.Actor)    random_actor_in_world = actors_in_world[random.randrange(len(actors_in_world))]    focusViewportOnActor(<span class="hljs-literal">True</span>, random_actor_in_world)</code></pre><h2 id="L17-移动、旋转视口"><a href="#L17-移动、旋转视口" class="headerlink" title="L17 移动、旋转视口"></a>L17 移动、旋转视口</h2><p>&emsp;&emsp;结合 C++ 和 snapViewport 实现。</p><p>C++ .h 文件（部分）</p><pre><code class="hljs C++">UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetViewportLocationAndRotation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ViewportIndex, FVector Location, FRotator Rotation)</span></span>;UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">GetActiveViewportIndex</span><span class="hljs-params">()</span></span>;</code></pre><p>C++ .cpp 文件（部分）</p><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::SetViewportLocationAndRotation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ViewportIndex, FVector Location, FRotator Rotation)</span> </span>&#123;    <span class="hljs-keyword">if</span> (GEditor != <span class="hljs-literal">nullptr</span> &amp;&amp; ViewportIndex &lt; GEditor-&gt;GetLevelViewportClients().Num()) &#123;        FLevelEditorViewportClient* LevelViewportClient = GEditor-&gt;GetLevelViewportClients()[ViewportIndex];        <span class="hljs-keyword">if</span> (LevelViewportClient != <span class="hljs-literal">nullptr</span>) &#123;            LevelViewportClient-&gt;SetViewLocation(Location);            LevelViewportClient-&gt;SetViewRotation(Rotation);        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">UCppLib::GetActiveViewportIndex</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> Index = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (GEditor != <span class="hljs-literal">nullptr</span> &amp;&amp; GCurrentLevelEditingViewportClient != <span class="hljs-literal">nullptr</span>) &#123;        GEditor-&gt;GetLevelViewportClients().Find(GCurrentLevelEditingViewportClient, Index);    &#125;    <span class="hljs-keyword">return</span> Index;&#125;</code></pre><p>Python EditorFunction_4.py 文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-keyword">import</span> random<span class="hljs-comment"># return: int : The index of the active viewport</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getActiveViewportIndex</span>():</span>    <span class="hljs-keyword">return</span> unreal.CppLib.get_active_viewport_index()<span class="hljs-comment"># viewport_index: int : The index of the viewport you want to affect</span><span class="hljs-comment"># location: obj unreal.Vector : The viewport location</span><span class="hljs-comment"># rotation: obj unreal.Rotator : The viewport rotation</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setViewportLocationAndRotation</span>(<span class="hljs-params">viewport_index=<span class="hljs-number">1</span>, location=unreal.Vector(<span class="hljs-params"></span>), rotation=unreal.Rotator(<span class="hljs-params"></span>)</span>):</span>    unreal.CppLib.set_viewport_location_and_rotation(viewport_index, location, rotation)<span class="hljs-comment"># viewport_index: int : The index of the viewport you want to affect</span><span class="hljs-comment"># actor: obj unreal.Actor : The actor you want to snap to</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">snapViewportToActor</span>(<span class="hljs-params">viewport_index=<span class="hljs-number">1</span>, actor=None</span>):</span>    setViewportLocationAndRotation(viewport_index, actor.get_actor_location(), actor.get_actor_rotation())<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setViewportLocationAndRotation_EXAMPLE</span>():</span>    viewport_index = getActiveViewportIndex()    setViewportLocationAndRotation(viewport_index, unreal.Vector(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>), unreal.Rotator(<span class="hljs-number">0.0</span>, <span class="hljs-number">90.0</span>, <span class="hljs-number">0.0</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">snapViewportToActor_EXAMPLE</span>():</span>    actors_in_world = unreal.GameplayStatics.get_all_actors_of_class(unreal.EditorLevelLibrary.get_editor_world(), unreal.Actor)    random_actor_in_world = actors_in_world[random.randrange(len(actors_in_world))]    viewport_index = getActiveViewportIndex()    snapViewportToActor(viewport_index, random_actor_in_world)</code></pre><h2 id="L18-创建-generic-资产"><a href="#L18-创建-generic-资产" class="headerlink" title="L18 创建 generic 资产"></a>L18 创建 generic 资产</h2><p>AssetFunction_7.py文件</p><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><span class="hljs-keyword">import</span> unreal<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createGenericAsset</span>(<span class="hljs-params">asset_path=<span class="hljs-string">&#x27;&#x27;</span>, unique_name=True, asset_class=None, asset_factory=None</span>):</span>    <span class="hljs-keyword">if</span> unique_name:        asset_path, asset_name = unreal.AssetToolsHelpers.get_asset_tools().create_unique_asset_name(base_package_name=asset_path, suffix=<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> unreal.EditorAssetLibrary.does_asset_exist(asset_path=asset_path):        path = asset_path.rsplit(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]        name = asset_path.rsplit(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]        <span class="hljs-keyword">return</span> unreal.AssetToolsHelpers.get_asset_tools().create_asset(asset_name=name, package_path=path, asset_class=asset_class, factory=asset_factory)    <span class="hljs-keyword">return</span> unreal.load_asset(asset_path)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createGenericAsset_EXAMPLE</span>():</span>    base_path = <span class="hljs-string">&#x27;/Game/MyAsset/GenericAssets/&#x27;</span>    generic_assets = [        [base_path + <span class="hljs-string">&#x27;sequence&#x27;</span>,        unreal.LevelSequence,  unreal.LevelSequenceFactoryNew()],        [base_path + <span class="hljs-string">&#x27;material&#x27;</span>,        unreal.Material,       unreal.MaterialFactoryNew()],        [base_path + <span class="hljs-string">&#x27;world&#x27;</span>,           unreal.World,          unreal.WorldFactory()],        [base_path + <span class="hljs-string">&#x27;particle_system&#x27;</span>, unreal.ParticleSystem, unreal.ParticleSystemFactoryNew()],        [base_path + <span class="hljs-string">&#x27;paper_flipbook&#x27;</span>,  unreal.PaperFlipbook,  unreal.PaperFlipbookFactory()],        [base_path + <span class="hljs-string">&#x27;data_table&#x27;</span>,      unreal.DataTable,      unreal.DataTableFactory()], <span class="hljs-comment"># Will not work</span>    ]    <span class="hljs-keyword">for</span> asset <span class="hljs-keyword">in</span> generic_assets:        <span class="hljs-keyword">print</span> createGenericAsset(asset[<span class="hljs-number">0</span>], <span class="hljs-literal">True</span>, asset[<span class="hljs-number">1</span>], asset[<span class="hljs-number">2</span>])</code></pre><p><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L18_1.png"></p><h2 id="L19-添加动画序列"><a href="#L19-添加动画序列" class="headerlink" title="L19 添加动画序列"></a>L19 添加动画序列</h2><p>pass</p><h2 id="L20-利用-Blueprint-运行Python代码"><a href="#L20-利用-Blueprint-运行Python代码" class="headerlink" title="L20 利用 Blueprint 运行Python代码"></a>L20 利用 Blueprint 运行Python代码</h2><p>&emsp;&emsp;原理和利用 Blueprint 运行 cmd 代码相同。</p><p>build.cs 加上 “Python”, “PythonScriptPlugin”</p><p>C++ .h（部分）</p><pre><code class="hljs C++">UFUNCTION(BlueprintCallable, Category = <span class="hljs-string">&quot;Unreal Python&quot;</span>)    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExecutePythonScript</span><span class="hljs-params">(FString PythonScript)</span></span>;</code></pre><p>C++ .cpp（部分）</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;../Plugins/Experimental/PythonScriptPlugin/Source/PythonScriptPlugin/Private/PythonScriptPlugin.h&quot;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UCppLib::ExecutePythonScript</span><span class="hljs-params">(FString PythonScript)</span> </span>&#123;    FPythonScriptPlugin::Get()-&gt;ExecPythonCommand(*PythonScript);&#125;</code></pre><p>蓝图节点<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L20_1.png"></p><p>点击事件<br><img src="/2021/01/26/unreal/UnrealPython%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/L20_2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UE</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maya开发实践课（二）</title>
    <link href="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="L15-走进-PyMEL-编程"><a href="#L15-走进-PyMEL-编程" class="headerlink" title="L15 走进 PyMEL 编程"></a>L15 走进 PyMEL 编程</h2><h3 id="什么是PyMel"><a href="#什么是PyMel" class="headerlink" title="什么是PyMel"></a>什么是PyMel</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L15_1.png"></p><h3 id="了解PyNode"><a href="#了解PyNode" class="headerlink" title="了解PyNode"></a>了解PyNode</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L15_2.png"></p><h3 id="pynode转化"><a href="#pynode转化" class="headerlink" title="pynode转化"></a>pynode转化</h3><pre><code class="hljs python">node = pm.PyNode(<span class="hljs-string">&#x27;pSphere1&#x27;</span>)<span class="hljs-comment"># ! 查询方法</span>dir(node)<span class="hljs-comment"># ! 查询属性</span>dir(node.attr())</code></pre><h3 id="连接属性"><a href="#连接属性" class="headerlink" title="连接属性"></a>连接属性</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.cmds <span class="hljs-keyword">as</span> cmds<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmball = pm.PyNode(<span class="hljs-string">&#x27;ball&#x27;</span>)ball_tx = ball.attr(<span class="hljs-string">&#x27;tx&#x27;</span>)box = pm.PyNode(<span class="hljs-string">&#x27;pCube1&#x27;</span>)box_tx = box.attr(<span class="hljs-string">&#x27;tx&#x27;</span>)ball_tx &gt;&gt; box.tx</code></pre><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><pre><code class="hljs python">ball_tx //  box_tx</code></pre><h3 id="使用API方法"><a href="#使用API方法" class="headerlink" title="使用API方法"></a>使用API方法</h3><pre><code class="hljs python">ball = pm.PyNode(<span class="hljs-string">&#x27;ball)</span><span class="hljs-string">baii.__apiobject__()</span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>使用PyMEl实现原来融合节点的连接。</p><pre><code class="hljs pyrhon">import pymel.core as pmlam_A &#x3D; pm.createNode(&#39;lambert&#39;)lam_B &#x3D; pm.createNode(&#39;lambert&#39;)lam_C &#x3D; pm.createNode(&#39;lambert&#39;)bc &#x3D; pm.createNode(&#39;blendColors&#39;)lam_A.outColor &gt;&gt; bc.color1lam_B.outColor &gt;&gt; bc.color2bc.output.connect(lam_C.color)</code></pre><h2 id="L16-为-Maya-安装第三方-Python-包"><a href="#L16-为-Maya-安装第三方-Python-包" class="headerlink" title="L16 为 Maya 安装第三方 Python 包"></a>L16 为 Maya 安装第三方 Python 包</h2><ol><li>拷贝安装</li><li>pip安装</li><li>编译安装</li></ol><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>给Maya安装yaml模块和numpy模块。</p><p><strong>Numpy</strong></p><p>官方文档</p><p><a href="https://numpy.org/install/#python-numpy-install-guide">https://numpy.org/install/#python-numpy-install-guide</a></p><p>简介</p><p><a href="https://www.runoob.com/numpy/numpy-tutorial.html">https://www.runoob.com/numpy/numpy-tutorial.html</a></p><p>python安装</p><p>python -m pip install numpy</p><p>maya安装</p><ol><li><p>下载wheel<br><a href="https://pypi.tuna.tsinghua.edu.cn/simple/numpy/">https://pypi.tuna.tsinghua.edu.cn/simple/numpy/</a></p></li><li><p>安装<br>mayapy -m pip install C:\Users\Administrator\Desktop\numpy-1.14.0rc1-cp27-none-win_amd64.whl</p></li></ol><p><strong>yaml</strong></p><p>python安装</p><p>python -m pip install pyyaml</p><p>maya安装</p><ol><li><p>下载wheel<br><a href="https://pypi.tuna.tsinghua.edu.cn/simple/pyyml/">https://pypi.tuna.tsinghua.edu.cn/simple/pyyml/</a></p></li><li><p>安装<br>mayapy -m pip install C:\Users\Administrator\Desktop\pyyml-0.0.2-py2.py3-none-any.whl</p></li></ol><h2 id="L17-自定义-Maya-环境变量"><a href="#L17-自定义-Maya-环境变量" class="headerlink" title="L17 自定义 Maya 环境变量"></a>L17 自定义 Maya 环境变量</h2><h3 id="为什么自定义软件环境"><a href="#为什么自定义软件环境" class="headerlink" title="为什么自定义软件环境"></a>为什么自定义软件环境</h3><ol><li>统一管理</li><li>快速部署</li><li>方便切换</li></ol><p>&emsp;&emsp;环境变量的用户变量会覆盖系统变量。</p><h3 id="cmd设置环境变量"><a href="#cmd设置环境变量" class="headerlink" title="cmd设置环境变量"></a>cmd设置环境变量</h3><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> MAYA_DISABLE_CLIC_IPM=<span class="hljs-number">1</span></code></pre><h3 id="python设置环境变量"><a href="#python设置环境变量" class="headerlink" title="python设置环境变量"></a>python设置环境变量</h3><ol><li>查询<pre><code class="hljs python">os.environ</code></pre></li><li>设置<pre><code class="hljs python">_env = os.environ.copy()_env[<span class="hljs-string">&#x27;XXX_ENV&#x27;</span>] = <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-keyword">import</span> subprocesssubprocess.Popen(<span class="hljs-string">&quot;C:/Program Files/Autodesk/Maya2017/bin/maya.exe&quot;</span>,env=_env)</code></pre></li></ol><h3 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L17_1.png"></p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>使用Yaml编写一个环境配置文件，读取里面内容使用subprocess启动软件。</p><p>写入yaml</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> yamlyaml_str = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">name: yaml_env</span><span class="hljs-string">date: 20200716</span><span class="hljs-string">version: [&#x27;maya2018&#x27;,&#x27;maya2019&#x27;]</span><span class="hljs-string">&quot;&quot;&quot;</span>yaml_data = yaml.load(yaml_str, Loader=yaml.SafeLoader)<span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;D:/td_tech/yaml_test/yaml_write.yaml&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:        yaml.dump(yaml_data, f)</code></pre><p>启动软件</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> yaml<span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;D:/td_tech/yaml_test/yaml_write.yaml&#x27;</span>, <span class="hljs-string">&#x27;r+&#x27;</span>) <span class="hljs-keyword">as</span> f:        data = yaml.load(f, Loader=yaml.Loader)_env = os.environ.copy()<span class="hljs-keyword">for</span> (key,value) <span class="hljs-keyword">in</span> data.items():        _env[key] = str(value)subprocess.Popen(<span class="hljs-string">&quot;C:/Program Files/Autodesk/Maya2018/bin/maya.exe&quot;</span>,env=_env)</code></pre><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L17_2.png"></p><h2 id="L18-Maya-API-基本类型介绍"><a href="#L18-Maya-API-基本类型介绍" class="headerlink" title="L18 Maya API 基本类型介绍"></a>L18 Maya API 基本类型介绍</h2><h3 id="Maya-API基本结构"><a href="#Maya-API基本结构" class="headerlink" title="Maya API基本结构"></a>Maya API基本结构</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L18_1.png"></p><h3 id="API语言支持"><a href="#API语言支持" class="headerlink" title="API语言支持"></a>API语言支持</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L18_2.png"></p><ol><li><p>API编译的插件后缀：</p><p> Linux：.so</p><p> Windows: .mll</p><p> Mac OS X：.bundle</p><p> 通用性插件：.py</p></li><li><p>API内置库：</p><p> OpenMaya 基本的操作工具类</p><p> OpenMayaUI 界面工具类</p><p> OpenMayaAnim 动画工具类</p><p> OpenMayaFX 特效工具类</p><p> OpenMayaRender 渲染工具类</p></li><li><p>API命名规则</p></li></ol><p>M classes - 基本的数据类型</p><p>MFn - Function 函数工具类型</p><p>MIt - Iterator 迭代器类型</p><p>MPx - 代理类型，拓展Maya功能需要继承的类</p><h3 id="DependencyNode、-DagNode"><a href="#DependencyNode、-DagNode" class="headerlink" title="DependencyNode、 DagNode"></a>DependencyNode、 DagNode</h3><p>DependencyNode：Maya最基本的节点类型</p><p>DagNode：Maya带有层级的节点类型</p><p>DagNode由DependencyNode继承而来，DagNode有层级关系继承。</p><h3 id="MObject"><a href="#MObject" class="headerlink" title="MObject"></a>MObject</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L18_3.png"></p><h3 id="查询API帮助文档-API1-0"><a href="#查询API帮助文档-API1-0" class="headerlink" title="查询API帮助文档 API1.0"></a>查询API帮助文档 API1.0</h3><p>MObject() 相当于python的<strong>init</strong>()，可以用于实例化对象</p><p>静态方法static Mobject：在没有实例化节点之前就能使用</p><p>析构函数~Mobject()：变量在销毁的时候执行的操作</p><h3 id="通过Pymel创建Mobject"><a href="#通过Pymel创建Mobject" class="headerlink" title="通过Pymel创建Mobject"></a>通过Pymel创建Mobject</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmball_node = pm.PyNode(<span class="hljs-string">&#x27;pSphere1&#x27;</span>)ball_api_node = ball_node.__apimobject__()<span class="hljs-comment"># 通过pymel转化的MObject已经有了对象</span><span class="hljs-keyword">print</span> ball_api_node.isNull() <span class="hljs-comment"># True</span><span class="hljs-comment"># 通过OpenMaya直接创建的MObject是空的</span><span class="hljs-keyword">print</span> OpenMaya.MObject().isNull() <span class="hljs-comment"># False</span><span class="hljs-comment"># 查询api类型</span><span class="hljs-keyword">print</span> ball_api_node.apiType() <span class="hljs-comment"># 110</span><span class="hljs-keyword">print</span> ball_api_node.apiTypeStr() <span class="hljs-comment"># kTransform</span>ballshape_api_node = pm.PyNode(<span class="hljs-string">&#x27;pSphereShape1&#x27;</span>).__apimobject__()<span class="hljs-keyword">print</span> ballshape_api_node.apiType() <span class="hljs-comment"># 296</span><span class="hljs-keyword">print</span> ballshape_api_node.apiTypeStr() <span class="hljs-comment"># kMesh</span><span class="hljs-comment"># 使用 == != 判断两个物体是否相等</span><span class="hljs-keyword">print</span> ball_api_node == ballshape_api_node <span class="hljs-comment"># False</span><span class="hljs-comment"># 使用 = 直接赋值</span>ballshape_api_node = ball_api_node<span class="hljs-keyword">print</span> ballshape_api_node.apiTypeStr()</code></pre><h3 id="DagPath"><a href="#DagPath" class="headerlink" title="DagPath"></a>DagPath</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L18_4.png"></p><pre><code class="hljs python"><span class="hljs-comment"># 创建一个空的MDagPath</span>ball_dag_path = OpenMaya.MDagPath()<span class="hljs-comment"># 建立DagPath联系</span>OpenMaya.MDagPath.getAPathTo(ball_api_node,ball_dag_path)<span class="hljs-comment"># 获取DagPath名字</span><span class="hljs-keyword">print</span> ball_dag_path.fullPathName() <span class="hljs-comment"># |pSphere1</span><span class="hljs-keyword">print</span> ball_dag_path.partialPathName() <span class="hljs-comment"># pSphere1</span><span class="hljs-comment"># 判断是否显示</span><span class="hljs-keyword">print</span> ball_dag_path.isVisible() <span class="hljs-comment"># True</span><span class="hljs-comment"># 通过MDagPath获取API类型</span><span class="hljs-keyword">print</span> ball_dag_path.apiType() <span class="hljs-comment"># 110</span><span class="hljs-comment"># 通过MDagPath返回MObject</span><span class="hljs-keyword">print</span> ball_dag_path.node() <span class="hljs-comment"># &lt;maya.OpenMaya.MObject; proxy of &lt;Swig Object of type &#x27;MObject *&#x27; at 0x0000014894705F90&gt;</span></code></pre><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>既然Maya已经提供了cmds这个编程的接口，为什么还要提供OpenMaya的呢？</p><h2 id="L19-Maya-API的三种基本类型"><a href="#L19-Maya-API的三种基本类型" class="headerlink" title="L19 Maya API的三种基本类型"></a>L19 Maya API的三种基本类型</h2><h3 id="MFn"><a href="#MFn" class="headerlink" title="MFn"></a>MFn</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L19_1.png"></p><p>MFnDependencyNode：处理任何节点的普通方法</p><p>MFnDagNode：处理大纲物体的常用方法<br>MFnMesh：处理多边形操作</p><p>普通MFn记录Maya内所有节点的类型，MObject中的apiType返回的就是MFn列表的索引值</p><p>其他的有MFnSet、MFnMesh等等。</p><h3 id="MIt"><a href="#MIt" class="headerlink" title="MIt"></a>MIt</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L19_2.png"></p><p>MitDag：处理大纲层级所有物体</p><p>MitCurveCV：处理曲线的点</p><p>MitMeshEdge：多边形的线的循环</p><p>MitMeshFaceVertex：处理多边形面点</p><p>MitMeshPolygon：处理多边形面</p><p>MitMeshVertex：处理多边形点</p><p>MitSelectionList：处理列表中的任何物体</p><p>MitDependencyGraph：通过一个节点寻找上下游所有节点</p><p>MitDependencyNodes：过滤场景内的任何节点</p><h3 id="MPx"><a href="#MPx" class="headerlink" title="MPx"></a>MPx</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L19_3.png"></p><p>用于编写maya没有的物体</p><p>MpxCommand：编写一个命令</p><p>MPxNode：编写一个节点</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L19_4.png"></p><h2 id="L20-Maya-API中基本容器的使用"><a href="#L20-Maya-API中基本容器的使用" class="headerlink" title="L20 Maya API中基本容器的使用"></a>L20 Maya API中基本容器的使用</h2><h3 id="MSelectionList"><a href="#MSelectionList" class="headerlink" title="MSelectionList"></a>MSelectionList</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L20_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pm<span class="hljs-comment"># 创建一个空的MSelectionList</span><span class="hljs-comment"># &lt;maya.OpenMaya.MSelectionList; proxy of &lt;Swig Object of type &#x27;MSelectionList *&#x27; at 0x0000014894705780&gt; &gt; </span>lst = OpenMaya.MSelectionList()<span class="hljs-keyword">print</span> lst.isEmpty() <span class="hljs-comment"># True</span><span class="hljs-comment"># 添加物体</span>lst.add(<span class="hljs-string">&#x27;pSphere1&#x27;</span>)<span class="hljs-comment"># 查询个数</span>lst.length() <span class="hljs-comment"># 1</span><span class="hljs-comment"># 添加所有的球体</span>lst.add(<span class="hljs-string">&#x27;pSphere*&#x27;</span>)lst.length() <span class="hljs-comment"># 2</span><span class="hljs-comment"># 合并两个列表</span>b_lst = OpenMaya.MSelectionList()b_lst.add(<span class="hljs-string">&#x27;pCube?&#x27;</span>)lst.merge(b_lst)<span class="hljs-keyword">print</span> lst.length() <span class="hljs-comment"># 3</span></code></pre><h3 id="MItSelectionList"><a href="#MItSelectionList" class="headerlink" title="MItSelectionList"></a>MItSelectionList</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L20_2.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmsel_lst = OpenMaya.MSelectionList()sel_lst.add(<span class="hljs-string">&#x27;pSphere?&#x27;</span>)<span class="hljs-comment"># 返回列表每一个物体的长名</span>dag_path = OpenMaya.MDagPath()lst_iter = OpenMaya.MItSelectionList(sel_lst)<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> lst_iter.isDone():        lst_iter.getDagPath(dag_path)        <span class="hljs-keyword">print</span> dag_path.fullPathName()                lst_iter.next()</code></pre><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L20_3.png"></p><p>通配符</p><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L20_4.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.cmds <span class="hljs-keyword">as</span> cmds<span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pm<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-comment"># create 10,000 balls</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):        cmds.polySphere()<span class="hljs-comment"># cmds</span>start_time = datetime.now()sel_lst = cmds.ls(sl=<span class="hljs-literal">True</span>)<span class="hljs-keyword">for</span> sel <span class="hljs-keyword">in</span> sel_lst:        <span class="hljs-keyword">pass</span>end_time = datetime.now()<span class="hljs-comment"># 36000</span>cmds_time = (end_time - start_time)<span class="hljs-comment"># OpenMaya</span>sel_lst = OpenMaya.MSelectionList()<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):        sel_lst.add(<span class="hljs-string">&#x27;pSphere&#123;&#125;&#x27;</span>.format(i))iter_lst = OpenMaya.MItSelectionList(sel_lst)dag_path = OpenMaya.MDagPath()start_time = datetime.now()<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> iter_lst.isDone():        iter_lst.getDagPath(dag_path)        iter_lst.next()end_time = datetime.now()<span class="hljs-comment"># 28000</span>OpenMaya_time = (end_time - start_time)<span class="hljs-comment"># Mel</span></code></pre><h2 id="L21-Maya-API-的全局操作方法-MGlobal"><a href="#L21-Maya-API-的全局操作方法-MGlobal" class="headerlink" title="L21 Maya API 的全局操作方法 - MGlobal"></a>L21 Maya API 的全局操作方法 - MGlobal</h2><h3 id="MGlobal"><a href="#MGlobal" class="headerlink" title="MGlobal"></a>MGlobal</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L21_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya<span class="hljs-keyword">from</span> maya.OpenMaya <span class="hljs-keyword">import</span> MGlobal<span class="hljs-keyword">print</span> MGlobal.mayaVersion()<span class="hljs-comment"># 2018</span><span class="hljs-keyword">print</span> MGlobal.apiVersion()<span class="hljs-comment"># 20180500</span><span class="hljs-comment"># 把选择的物体传入sel列表</span>sel = OpenMaya.MSelectionList()OpenMaya.MGlobal.getActiveSelectionList(sel)<span class="hljs-keyword">print</span> sel.length()<span class="hljs-comment"># 选择sel列表的物体</span>OpenMaya.MGlobal.setActiveSelectionList(sel)<span class="hljs-comment"># 执行python或mel命令</span>MGlobal.executeCommand(<span class="hljs-string">&#x27;ls -sl&#x27;</span>)MGlobal.executeCommand(<span class="hljs-string">&#x27;createNode &quot;joint&quot;&#x27;</span>)<span class="hljs-comment"># MGlobal.executePythonCommand(&#x27;cmds.createNode(&quot;joint&quot;)&#x27;)</span>MGlobal.isYAxisUp()<span class="hljs-comment"># True</span>MGlobal.displayInfo(<span class="hljs-string">&#x27;info ..&#x27;</span>)MGlobal.displayWarning(<span class="hljs-string">&#x27;warning ..&#x27;</span>)MGlobal.displayError(<span class="hljs-string">&#x27;error ..&#x27;</span>)<span class="hljs-comment"># 设置当前帧</span>MGlobal.viewFrame(<span class="hljs-number">30</span>)</code></pre><h3 id="MGlobal常用方法"><a href="#MGlobal常用方法" class="headerlink" title="MGlobal常用方法"></a>MGlobal常用方法</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L21_2.png"></p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>尝试使用MGlobal选择屏幕某一块区域的物体。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">from</span> maya.OpenMaya <span class="hljs-keyword">import</span> MGlobal<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmMGlobal.selectFromScreen(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1920</span>,<span class="hljs-number">1080</span>,MGlobal.kAddToList,MGlobal.kSurfaceSelectMethod)</code></pre><h2 id="L22-Maya-API-的文件操作-MFileIO"><a href="#L22-Maya-API-的文件操作-MFileIO" class="headerlink" title="L22 Maya API 的文件操作 MFileIO"></a>L22 Maya API 的文件操作 MFileIO</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya<span class="hljs-keyword">from</span> maya.OpenMaya <span class="hljs-keyword">import</span> MFileIO<span class="hljs-keyword">print</span> MFileIO.currentFile()<span class="hljs-comment"># D:/test/test/test.ma</span>MFileIO.setCurrentFile(<span class="hljs-string">&#x27;D:/test/test_1.ma&#x27;</span>)<span class="hljs-keyword">print</span> MFileIO.currentFile()<span class="hljs-comment"># D:/test/test_1.ma</span><span class="hljs-keyword">print</span> MFileIO.fileType()<span class="hljs-comment"># u&#x27;mayaAscii&#x27;</span>lst = list()MFileIO.getFileTypes(lst)<span class="hljs-keyword">print</span> lst<span class="hljs-comment"># [u&#x27;mayaAscii&#x27;, u&#x27;mayaBinary&#x27;, u&#x27;mel&#x27;, u&#x27;OBJ&#x27;, u&#x27;directory&#x27;, u&#x27;plug-in&#x27;, u&#x27;audio&#x27;, u&#x27;move&#x27;, u&#x27;EPS&#x27;, u&#x27;Adobe(R) Illustrator(R)&#x27;, u&#x27;image&#x27;, u&#x27;fluidCache&#x27;, u&#x27;editMA&#x27;, u&#x27;editMB&#x27;, u&#x27;Alembic&#x27;, u&#x27;RIB&#x27;]</span><span class="hljs-comment"># 新建场景</span>MFileIO.newFile(<span class="hljs-literal">True</span>)<span class="hljs-comment"># 保存场景</span>MFileIO.saveAs(<span class="hljs-string">&#x27;D:/test/test/ball.ma&#x27;</span>, <span class="hljs-string">&#x27;mayaAscii&#x27;</span>)MFileIO.save()</code></pre><h3 id="MFileIO-常用方法"><a href="#MFileIO-常用方法" class="headerlink" title="MFileIO 常用方法"></a>MFileIO 常用方法</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L22_1.png"><br><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L22_2.png"></p><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><p>列出场景内所有的材质shadingGroup节点，并使用API导出为文件。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmsg_lst = pm.ls(type=<span class="hljs-string">&#x27;shadingEngine&#x27;</span>)lst = OpenMaya.MSelectionList()<span class="hljs-comment"># 列出所有sg节点</span><span class="hljs-keyword">for</span> sg <span class="hljs-keyword">in</span> sg_lst:        sg_mobj = sg.__apimobject__()        lst.add(sg_mobj)<span class="hljs-comment"># 选择所有sg节点</span>OpenMaya.MGlobal.setActiveSelectionList(lst)<span class="hljs-comment"># 导出选择的节点</span>OpenMaya.MFileIO.exportSelected(<span class="hljs-string">&#x27;D:/test/sg_test.ma&#x27;</span>)</code></pre><h2 id="L23-Maya-API-中的节点迭代器和函数类"><a href="#L23-Maya-API-中的节点迭代器和函数类" class="headerlink" title="L23 Maya API 中的节点迭代器和函数类"></a>L23 Maya API 中的节点迭代器和函数类</h2><h3 id="MFnDependencyNode"><a href="#MFnDependencyNode" class="headerlink" title="MFnDependencyNode"></a>MFnDependencyNode</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L23_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmmfn = OpenMaya.MFnDependencyNode(pm.ls(sl=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>].__apimobject__())<span class="hljs-keyword">print</span> mfn.typeName()<span class="hljs-comment"># transform</span><span class="hljs-keyword">print</span> mfn.name()<span class="hljs-comment"># pCylinder1</span>mfn.setName(<span class="hljs-string">&#x27;new_pCylinder&#x27;</span>)<span class="hljs-keyword">print</span> mfn.name()<span class="hljs-comment"># new_pCylinder</span>mfn.attributeCount()<span class="hljs-comment"># 249</span>iterator = OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> iterator.isDone():        <span class="hljs-keyword">print</span> OpenMaya.MFnDependencyNode(iterator.thisNode()).name()        <span class="hljs-keyword">print</span> OpenMaya.MFnDependencyNode(iterator.item()).name()        iterator.next()</code></pre><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L23_2.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmmit = OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)sh_sg_connects = &#123;&#125;<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> mit.isDone():        mfn = OpenMaya.MFnDependencyNode(mit.item())        plug_array = OpenMaya.MPlugArray()        mfn.getConnections(plug_array)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(plug_array.length()):                des_array = OpenMaya.MPlugArray()                plug_array[i].destinations(des_array)                <span class="hljs-keyword">if</span> des_array.length():                        <span class="hljs-keyword">if</span> des_array[<span class="hljs-number">0</span>].node().apiTypeStr() == <span class="hljs-string">&#x27;kShadingEngine&#x27;</span>:                                sh_sg_connects[mfn.name()] = des_array[<span class="hljs-number">0</span>].name().split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]        mit.next()<span class="hljs-keyword">for</span> (key,value) <span class="hljs-keyword">in</span> sh_sg_connects.items():        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;&#123;&#125; connected to &#123;&#125;&#x27;</span>.format(key,value)</code></pre><h2 id="L24-Maya-API-层级迭代器与物体函数类"><a href="#L24-Maya-API-层级迭代器与物体函数类" class="headerlink" title="L24 Maya API 层级迭代器与物体函数类"></a>L24 Maya API 层级迭代器与物体函数类</h2><h3 id="MFnDagNode"><a href="#MFnDagNode" class="headerlink" title="MFnDagNode"></a>MFnDagNode</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L24_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmmfn = OpenMaya.MFnDagNode(pm.PyNode(<span class="hljs-string">&#x27;pSphere1&#x27;</span>).__apimobject__())<span class="hljs-keyword">print</span> mfn.partialPathName()<span class="hljs-comment"># pSphere1</span><span class="hljs-keyword">print</span> mfn.fullPathName()<span class="hljs-comment"># |pSphere1</span><span class="hljs-keyword">print</span> mfn.childCount()<span class="hljs-comment"># 1</span>iterator = OpenMaya.MItDag()<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> iterator.isDone():        <span class="hljs-keyword">print</span> iterator.partialPathName()        iterator.next()</code></pre><h3 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L24_2.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pm<span class="hljs-comment"># 选择所有mesh</span>mit = OpenMaya.MItDag(OpenMaya.MItDag.kDepthFirst,OpenMaya.MFn.kMesh)sel_lst = OpenMaya.MSelectionList()<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> mit.isDone():        m_dag = OpenMaya.MFnDagNode(mit.item())        sel_lst.add(m_dag.fullPathName())        mit.next()OpenMaya.MGlobal.setActiveSelectionList(sel_lst)</code></pre><h2 id="L25-Maya-API-中的多边形处理MFnMesh-MItMesh"><a href="#L25-Maya-API-中的多边形处理MFnMesh-MItMesh" class="headerlink" title="L25 Maya API 中的多边形处理MFnMesh MItMesh"></a>L25 Maya API 中的多边形处理MFnMesh MItMesh</h2><h3 id="MFnMesh"><a href="#MFnMesh" class="headerlink" title="MFnMesh"></a>MFnMesh</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L25_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmmfn = OpenMaya.MFnMesh(pm.PyNode(<span class="hljs-string">&#x27;pSphere1&#x27;</span>).__apiobject__())<span class="hljs-keyword">print</span> mfn.numPolygons()<span class="hljs-comment"># 400</span><span class="hljs-keyword">print</span> mfn.numVertices()<span class="hljs-comment"># 382</span>point = OpenMaya.MPoint()mfn.getPoint(<span class="hljs-number">0</span>, point)<span class="hljs-keyword">print</span> point.x,point.y,point.z<span class="hljs-comment"># 0.148778125644 -0.987688362598 -0.0483409427106</span>mfn.getPoint(<span class="hljs-number">381</span>, point)<span class="hljs-keyword">print</span> point.x,point.y,point.z<span class="hljs-comment"># 0.0 1.0 0.0</span><span class="hljs-comment"># 设置点位置</span>point = OpenMaya.MPoint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)mfn.setPoint(<span class="hljs-number">381</span>, point)iterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="hljs-string">&#x27;pSphereShape1&#x27;</span>).__apiobject__())<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> iterator.isDone():        <span class="hljs-comment"># 查询点位置</span>        point = iterator.position()        <span class="hljs-keyword">print</span> iterator.index(), point.x, point.y, point.z                <span class="hljs-comment"># 设置点位置</span>        point = OpenMaya.MPoint(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)        iterator.setPosition(point)        iterator.next()</code></pre><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L25_2.png"></p><h3 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h3><p>使用MFnMesh和MItMesh里的迭代器，寻找两个物体穿插的部分。</p><h2 id="L26-Maya-API-中的指针-MScriptUtil"><a href="#L26-Maya-API-中的指针-MScriptUtil" class="headerlink" title="L26 Maya API 中的指针 - MScriptUtil"></a>L26 Maya API 中的指针 - MScriptUtil</h2><h3 id="MScriptUtil"><a href="#MScriptUtil" class="headerlink" title="MScriptUtil"></a>MScriptUtil</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L26_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmiterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="hljs-string">&#x27;pSphereShape1&#x27;</span>).__apimobject__())<span class="hljs-comment"># 定义float2类型指针</span>s_util = OpenMaya.MScriptUtil()uv_ptr = s_util.asFloat2Ptr()<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> iterator.isDone():        <span class="hljs-comment"># 打印出每个点的uv值</span>        <span class="hljs-keyword">print</span> iterator.index(),        iterator.getUV(uv_ptr)        <span class="hljs-keyword">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),        <span class="hljs-keyword">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)        iterator.next()</code></pre><h3 id="练习-9"><a href="#练习-9" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L26_2.png"></p><h2 id="L27-Maya-API-中的事件捕获-MMessage"><a href="#L27-Maya-API-中的事件捕获-MMessage" class="headerlink" title="L27 Maya API 中的事件捕获 - MMessage"></a>L27 Maya API 中的事件捕获 - MMessage</h2><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p><img src="/2020/11/02/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/L27_1.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMaya <span class="hljs-keyword">as</span> OpenMaya<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pm<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">*args</span>):</span>        <span class="hljs-keyword">print</span> <span class="hljs-number">1</span><span class="hljs-comment"># 添加时间触发事件    </span>callback_id = OpenMaya.MTimerMessage.addTimerCallback(<span class="hljs-number">2</span>, func)<span class="hljs-comment"># 移除时间触发事件</span>OpenMaya.MTimerMessage.removeCallback(callback_id)<span class="hljs-comment"># 获取可以调用的事件种类</span>event_names = list()OpenMaya.MEventMessage.getEventNames(event_names)<span class="hljs-keyword">print</span> event_names()<span class="hljs-comment"># 创建时间轴变化事件</span>callback_id = OpenMaya.MEventMessage.addEventCallback(<span class="hljs-string">&#x27;timeChanged&#x27;</span>,func)<span class="hljs-comment"># 移除时间轴变化事件</span>OpenMaya.MTimerMessage.removeCallback()</code></pre><h3 id="Message使用方法"><a href="#Message使用方法" class="headerlink" title="Message使用方法"></a>Message使用方法</h3><ol><li>定义函数</li><li>addCallback</li><li>removeCallback</li></ol><h3 id="练习-10"><a href="#练习-10" class="headerlink" title="练习"></a>练习</h3><p>使用MSceneMessage创建一个事件，当文件reference创建完成之后，修改它的namespace。</p>]]></content>
    
    
    <categories>
      
      <category>Maya</category>
      
      <category>Maya开发实践课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>SCRIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maya开发实践课（一）</title>
    <link href="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="L0-初识帮助文档"><a href="#L0-初识帮助文档" class="headerlink" title="L0 初识帮助文档"></a>L0 初识帮助文档</h2><ul><li>Maya脚本编辑器</li><li>Maya帮助文档的查阅方法</li><li>Mel与Python写法区别</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L0_prac.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.cmds <span class="hljs-keyword">as</span> cmdscmds.circle()cmds.circle(r=<span class="hljs-number">2</span>)cmds.circle(r=<span class="hljs-number">2</span>,nr=(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))cmds.curve(d=<span class="hljs-number">1</span>,p=[(<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>),(<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>)])</code></pre><h2 id="L1-获取场景内操作对象"><a href="#L1-获取场景内操作对象" class="headerlink" title="L1 获取场景内操作对象"></a>L1 获取场景内操作对象</h2><ol><li><p>什么时候用到获取操作对象？</p><ol><li>当我们需要对物体进行操作时</li><li>给物体分组、分类</li></ol></li><li><p>可以通过什么途径获取对象？</p><ol><li>通过对象名字</li><li>按照类型找到一类物体</li><li>通过UUID找到固定对象（maya中名字可能重复又，但UUID是唯一的）</li></ol></li></ol><h3 id="ls-获取对象"><a href="#ls-获取对象" class="headerlink" title="ls 获取对象"></a>ls 获取对象</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>cmds.ls()</td><td>列举场景内的所有节点</td></tr><tr><td>cmds.ls(sl=1)</td><td>列举选择的节点</td></tr><tr><td>cmds.ls(typ=’mesh’)</td><td>列举所有类型为’mesh’的节点在python中，type是可以看一个实例或变量的类型，在maya中为了避免冲突，因此使用typ简称</td></tr><tr><td>cmds.ls(typ=(‘mesh’,’nurbsCurve’))</td><td>使用元组同时列举多重类型的物体</td></tr><tr><td>cmds.ls(typ=’mesh’,long=1)</td><td>使用long参数列举出长名</td></tr><tr><td>cmds.ls(et=’transform’)</td><td>列举不含骨骼和其他从transform拓展而来的transform类型节点</td></tr><tr><td>cmds.ls(ext=’transform’)</td><td>列举除了transform节点以外的其他节点</td></tr><tr><td>cmds.ls(‘*_cn_*‘)</td><td>列举名字中含有’<em>cn</em>‘的所有节点，*代表无数个字符，?代表一个字符</td></tr><tr><td>cmds.ls(‘具体uuid数值’)</td><td>获取具体uuid的物体</td></tr></tbody></table><ul><li>ls命令详解<br> <img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L1_command.png"></li></ul><h3 id="rename-更改节点名字命令"><a href="#rename-更改节点名字命令" class="headerlink" title="rename 更改节点名字命令"></a>rename 更改节点名字命令</h3><p>使用方法：</p><pre><code class="hljs python">cmds.rename(oldName,newName)</code></pre><p>返回类型：</p><p>&emsp;&emsp;节点新名称</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L1_prac.png"></p><pre><code class="hljs python">cam_sh = cmds.ls(cameras=<span class="hljs-number">1</span>)f_sh = list(set(cmds.ls(shapes=<span class="hljs-number">1</span>)).difference(set(cam_sh)))<span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> f_sh:        new_name = <span class="hljs-string">&#x27;nurbs_&#123;&#125;&#x27;</span>.format(f)        cmds.rename(f,new_name)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L1_prac1.png"> <img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L1_prac2.png"></p><h2 id="L2-获取、改变场景内层级关系"><a href="#L2-获取、改变场景内层级关系" class="headerlink" title="L2 获取、改变场景内层级关系"></a>L2 获取、改变场景内层级关系</h2><ol><li>为什么要处理层级关系？<ol><li>规范文件层级</li><li>便于工具识别</li><li>便于人工整理</li></ol></li></ol><h3 id="listRelatives命令示例"><a href="#listRelatives命令示例" class="headerlink" title="listRelatives命令示例"></a>listRelatives命令示例</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>cmds.listRelatives(‘Mery_grp’,p=1)</td><td>获取’Mery_grp’的父层级物体 p-parent</td></tr><tr><td>cmds.listRelatives(‘Mery_grp’,c=1)</td><td>获取’Mery_grp’的子层级物体 c-children</td></tr><tr><td>cmds.listRelatives(‘Mery_grp’,ad=1)</td><td>获取’Mery_grp’的所有子物体 ad-allDescendents</td></tr><tr><td>cmds.listRelatives(‘Mery_grp’,ad=1,typ=’joint’)</td><td>获取’Mery_grp’的所有类型为骨骼的子物体</td></tr><tr><td>cmds.listRelatives(‘Mery_grp’,ad=1,f=1)</td><td>获取’Mery_grp’的所有子物体的长名 f-fullPath</td></tr><tr><td>cmds.parent(‘pSphere1’,’Mery_grp’)</td><td>把’pSphere1’物体放到’Mery_grp’层级下</td></tr><tr><td>cmds.parent(‘pSphere1’,world=1)</td><td>把’pSphere1’物体放到世界层级下</td></tr><tr><td>cmds.group(cmd.ls(sl=1),name=’ball_grp’)</td><td>把选择的物体打组，组名为’ball_grp’</td></tr></tbody></table><h3 id="listRelatives命令参数说明"><a href="#listRelatives命令参数说明" class="headerlink" title="listRelatives命令参数说明"></a>listRelatives命令参数说明</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L2_command1.png"></p><h3 id="parent命令参数说明"><a href="#parent命令参数说明" class="headerlink" title="parent命令参数说明"></a>parent命令参数说明</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L2_command2.png"></p><h3 id="group命令参数说明"><a href="#group命令参数说明" class="headerlink" title="group命令参数说明"></a>group命令参数说明</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L2_command3.png"></p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>根据物体类型，给物体分组。</p><pre><code class="hljs python">dag_objs = cmds.ls(dagObjects=<span class="hljs-number">1</span>,shapes=<span class="hljs-number">1</span>)cam_objs = [<span class="hljs-string">u&#x27;frontShape&#x27;</span>, <span class="hljs-string">u&#x27;perspShape&#x27;</span>, <span class="hljs-string">u&#x27;sideShape&#x27;</span>, <span class="hljs-string">u&#x27;topShape&#x27;</span>]sort_objs = list(set(dag_objs).difference(set(cam_objs)))<span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> sort_objs:        typ_name = cmds.nodeType(obj)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmds.objExists(typ_name):                cmds.group(name=typ_name,empty=<span class="hljs-number">1</span>,world=<span class="hljs-number">1</span>)        cmds.parent(cmds.listRelatives(obj,parent=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>],typ_name)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L2_prac1.png"></p><h2 id="L3-获取、更改物体位置"><a href="#L3-获取、更改物体位置" class="headerlink" title="L3 获取、更改物体位置"></a>L3 获取、更改物体位置</h2><ul><li>变换属性：移动、旋转、缩放</li><li>自身坐标与世界坐标</li></ul><h3 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h3><table><thead><tr><th>命令</th><th>示例</th></tr></thead><tbody><tr><td>cmds.move(0,1,0,’pCube1’,r=1)</td><td>‘pCube1’物体向Y轴移动1单位 r-relative(自身坐标)</td></tr><tr><td>cmds.move(0,1,0,’pCube1’,a=1)</td><td>‘pCube1’物体移动到(0,1,0)位置 a-absolute(世界坐标)</td></tr><tr><td>cmds.rotate(0,10,0,’pCube1’,r=1)</td><td>‘pCube1’物体向Y轴旋转10度 r-relative(自身坐标)</td></tr><tr><td>cmds.rotate(0,10,0,’pCube1’,a=1)</td><td>‘pCube1’物体Y轴旋转到10度 a-absolute(世界坐标)</td></tr><tr><td>cmds.scale(1,5,1,’pCube1’,r=1)</td><td>‘pCube1’物体Y轴方向放大5倍 r-relative(自身坐标)</td></tr><tr><td>cmds.scale(1,1,1,’pCube1’,a=1)</td><td>‘pCube1’物体恢复默认缩放状态 a-absolute(世界坐标)</td></tr></tbody></table><h3 id="利用xform传递位移、旋转、缩放信息（自身坐标）"><a href="#利用xform传递位移、旋转、缩放信息（自身坐标）" class="headerlink" title="利用xform传递位移、旋转、缩放信息（自身坐标）"></a>利用xform传递位移、旋转、缩放信息（自身坐标）</h3><pre><code class="hljs python">loc_tx = cmds.xform(<span class="hljs-string">&#x27;locator1&#x27;</span>,q=<span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>)cmds.xform(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,t=loc_tx)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L3_1.gif"></p><h3 id="利用xform传递位移、旋转、缩放信息（世界坐标）"><a href="#利用xform传递位移、旋转、缩放信息（世界坐标）" class="headerlink" title="利用xform传递位移、旋转、缩放信息（世界坐标）"></a>利用xform传递位移、旋转、缩放信息（世界坐标）</h3><pre><code class="hljs python">loc_tx = cmds.xform(<span class="hljs-string">&#x27;locator1&#x27;</span>,q=<span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>)cmds.xform(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,t=loc_tx,ws=<span class="hljs-number">1</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L3_2.gif"></p><h3 id="xform命令参数说明"><a href="#xform命令参数说明" class="headerlink" title="xform命令参数说明"></a>xform命令参数说明</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L3_command.png"></p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p>使用 xform 匹配两个角色的pose信息</p><p>思路：同一个角色reference两次，给一个角色摆好pose之后，让另一个角色进行pose的匹配。</p><pre><code class="hljs python">sel1,sel2 = cmds.ls(sl=<span class="hljs-number">1</span>)<span class="hljs-keyword">import</span> pymel.core <span class="hljs-keyword">as</span> pmsel1_ns = pm.PyNode(sel1).namespace()sel2_ns = pm.PyNode(sel2).namespace()<span class="hljs-keyword">for</span> n_curve <span class="hljs-keyword">in</span> cmds.listRelatives(sel1,allDescendents=<span class="hljs-number">1</span>,typ=<span class="hljs-string">&#x27;nurbsCurve&#x27;</span>,fullPath=<span class="hljs-number">1</span>):        n_curve = cmds.listRelatives(n_curve,parent=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]        n_tx = cmds.xform(n_curve,q=<span class="hljs-number">1</span>,translation=<span class="hljs-number">1</span>)        n_ro = cmds.xform(n_curve,q=<span class="hljs-number">1</span>,rotation=<span class="hljs-number">1</span>)        cmds.xform(n_curve.replace(sel1_ns,sel2_ns),translation=n_tx,rotation=n_ro)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L3_3.gif"></p><h2 id="L4-从无到有创建节点"><a href="#L4-从无到有创建节点" class="headerlink" title="L4 从无到有创建节点"></a>L4 从无到有创建节点</h2><h3 id="创建一个球体"><a href="#创建一个球体" class="headerlink" title="创建一个球体"></a>创建一个球体</h3><pre><code class="hljs python">improt maya.cmds <span class="hljs-keyword">as</span> cmdscmds.polySphere()cmds.polySphere(r=<span class="hljs-number">2</span>,sx=<span class="hljs-number">10</span>,sy=<span class="hljs-number">5</span>)</code></pre><h3 id="创建一个圆环"><a href="#创建一个圆环" class="headerlink" title="创建一个圆环"></a>创建一个圆环</h3><pre><code class="hljs python">cmds.circle()cmds.circle(r=<span class="hljs-number">10</span>,s=<span class="hljs-number">20</span>,nr=(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))</code></pre><h3 id="创建一条曲线"><a href="#创建一条曲线" class="headerlink" title="创建一条曲线"></a>创建一条曲线</h3><pre><code class="hljs python">cmds.curve(d=<span class="hljs-number">1</span>,p=[[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]</code></pre><h3 id="创建骨骼"><a href="#创建骨骼" class="headerlink" title="创建骨骼"></a>创建骨骼</h3><pre><code class="hljs python">cmds.joint(p=(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<span class="hljs-comment"># ! 如果选择了物体，会在物体层级下创建骨骼</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):    cmds.joint(p=(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,i))</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L4_1.png"><br><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L4_2.png"></p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><pre><code class="hljs python">cmds.createNode(<span class="hljs-string">&#x27;joint&#x27;</span>)<span class="hljs-comment"># ! 使用这种方式创建骨骼不会自动修正层级</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):    cmds.createNode(<span class="hljs-string">&#x27;joint&#x27;</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L4_3.png"></p><pre><code class="hljs python"><span class="hljs-comment"># !当类型为mesh时，mesh为0个点，0个线，0个面，是一个空的节点</span>cmds.createNode(<span class="hljs-string">&#x27;mesh&#x27;</span>)<span class="hljs-comment"># ! 创建颜色融合节点</span>cmds.createNode(<span class="hljs-string">&#x27;blendColors&#x27;</span>)<span class="hljs-comment"># ! 创建乘除节点</span>cmds.createNode(<span class="hljs-string">&#x27;mutiplyDivide&#x27;</span>)</code></pre><h3 id="createNode命令参数说明"><a href="#createNode命令参数说明" class="headerlink" title="createNode命令参数说明"></a>createNode命令参数说明</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L4_4.png"></p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>自己用细分段数为1的曲线画一个图案，然后转换成代码实现。</p><p>mel生成的命令</p><pre><code class="hljs mel"><span class="hljs-keyword">curve</span> -d <span class="hljs-number">3</span> -p <span class="hljs-number">-0.839395</span> <span class="hljs-number">1.792949</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.604013</span> <span class="hljs-number">1.974062</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.133248</span> <span class="hljs-number">2.336288</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.251516</span> <span class="hljs-number">2.03705</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.21112</span> <span class="hljs-number">1.72368</span> <span class="hljs-number">0</span> -p <span class="hljs-number">2.002488</span> <span class="hljs-number">1.503595</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.456035</span> <span class="hljs-number">1.327409</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.480586</span> <span class="hljs-number">0.560018</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.928836</span> <span class="hljs-number">0.340742</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.158852</span> <span class="hljs-number">0.0512701</span> <span class="hljs-number">0</span> -p <span class="hljs-number">2.1789</span> <span class="hljs-number">-0.666696</span> <span class="hljs-number">0</span> -p <span class="hljs-number">2.57546</span> <span class="hljs-number">-1.21213</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.419647</span> <span class="hljs-number">-1.938615</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.294912</span> <span class="hljs-number">-2.516338</span> <span class="hljs-number">0</span> -p <span class="hljs-number">0.935117</span> <span class="hljs-number">-2.299332</span> <span class="hljs-number">0</span> -p <span class="hljs-number">0.80681</span> <span class="hljs-number">-1.944977</span> <span class="hljs-number">0</span> -p <span class="hljs-number">1.035179</span> <span class="hljs-number">-2.048344</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.636392</span> <span class="hljs-number">-1.989231</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.108525</span> <span class="hljs-number">-2.525225</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.335772</span> <span class="hljs-number">-2.213165</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.163381</span> <span class="hljs-number">-1.797263</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.739298</span> <span class="hljs-number">-0.549653</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.835217</span> <span class="hljs-number">-1.121078</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.762025</span> <span class="hljs-number">-1.211135</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.456917</span> <span class="hljs-number">0.20401</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.560278</span> <span class="hljs-number">-0.28985</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.613106</span> <span class="hljs-number">0.270444</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.005203</span> <span class="hljs-number">0.537676</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.175259</span> <span class="hljs-number">1.567658</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.344683</span> <span class="hljs-number">1.048434</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-1.463913</span> <span class="hljs-number">2.256511</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.736987</span> <span class="hljs-number">1.650197</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.823166</span> <span class="hljs-number">1.709551</span> <span class="hljs-number">0</span> -p <span class="hljs-number">-0.866256</span> <span class="hljs-number">1.739227</span> <span class="hljs-number">0</span> -k <span class="hljs-number">0</span> -k <span class="hljs-number">0</span> -k <span class="hljs-number">0</span> -k <span class="hljs-number">1</span> -k <span class="hljs-number">2</span> -k <span class="hljs-number">3</span> -k <span class="hljs-number">4</span> -k <span class="hljs-number">5</span> -k <span class="hljs-number">6</span> -k <span class="hljs-number">7</span> -k <span class="hljs-number">8</span> -k <span class="hljs-number">9</span> -k <span class="hljs-number">10</span> -k <span class="hljs-number">11</span> -k <span class="hljs-number">12</span> -k <span class="hljs-number">13</span> -k <span class="hljs-number">14</span> -k <span class="hljs-number">15</span> -k <span class="hljs-number">16</span> -k <span class="hljs-number">17</span> -k <span class="hljs-number">18</span> -k <span class="hljs-number">19</span> -k <span class="hljs-number">20</span> -k <span class="hljs-number">21</span> -k <span class="hljs-number">22</span> -k <span class="hljs-number">23</span> -k <span class="hljs-number">24</span> -k <span class="hljs-number">25</span> -k <span class="hljs-number">26</span> -k <span class="hljs-number">27</span> -k <span class="hljs-number">28</span> -k <span class="hljs-number">29</span> -k <span class="hljs-number">30</span> -k <span class="hljs-number">31</span> -k <span class="hljs-number">31</span> -k <span class="hljs-number">31</span> ;</code></pre><p>转成代码实现</p><pre><code class="hljs python">point_script = <span class="hljs-string">&#x27; -p -0.839395 1.792949 0 -p -0.604013 1.974062 0 -p -0.133248 2.336288 0 -p 1.251516 2.03705 0 -p 1.21112 1.72368 0 -p 2.002488 1.503595 0 -p 1.456035 1.327409 0 -p 1.480586 0.560018 0 -p 1.928836 0.340742 0 -p 1.158852 0.0512701 0 -p 2.1789 -0.666696 0 -p 2.57546 -1.21213 0 -p 1.419647 -1.938615 0 -p 1.294912 -2.516338 0 -p 0.935117 -2.299332 0 -p 0.80681 -1.944977 0 -p 1.035179 -2.048344 0 -p -0.636392 -1.989231 0 -p -1.108525 -2.525225 0 -p -1.335772 -2.213165 0 -p -1.163381 -1.797263 0 -p -0.739298 -0.549653 0 -p -0.835217 -1.121078 0 -p -1.762025 -1.211135 0 -p -0.456917 0.20401 0 -p -0.560278 -0.28985 0 -p -1.613106 0.270444 0 -p -1.005203 0.537676 0 -p -1.175259 1.567658 0 -p -1.344683 1.048434 0 -p -1.463913 2.256511 0 -p -0.736987 1.650197 0 -p -0.823166 1.709551 0 -p -0.866256 1.739227 0&#x27;</span>knot_script = <span class="hljs-string">&#x27; -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 31 -k 31&#x27;</span>point_list = point_script.split(<span class="hljs-string">&#x27; -p &#x27;</span>)knot_list = knot_script.split(<span class="hljs-string">&#x27; -k &#x27;</span>)xyz_list = []k_list = []<span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> point_list:        <span class="hljs-keyword">if</span> point == <span class="hljs-string">&#x27;&#x27;</span>:                <span class="hljs-keyword">continue</span>        (x,y,z) = point.split(<span class="hljs-string">&#x27; &#x27;</span>)        xyz_list.append((x,y,z))<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> knot_list:        <span class="hljs-keyword">if</span> k == <span class="hljs-string">&#x27;&#x27;</span>:                <span class="hljs-keyword">continue</span>        k_list.append(int(k))cmds.curve(d=<span class="hljs-number">3</span>,p=xyz_list,k=k_list)</code></pre><p>修改（k是不需要的）：</p><pre><code class="hljs python">point_script = <span class="hljs-string">&#x27; -p -0.839395 1.792949 0 -p -0.604013 1.974062 0 -p -0.133248 2.336288 0 -p 1.251516 2.03705 0 -p 1.21112 1.72368 0 -p 2.002488 1.503595 0 -p 1.456035 1.327409 0 -p 1.480586 0.560018 0 -p 1.928836 0.340742 0 -p 1.158852 0.0512701 0 -p 2.1789 -0.666696 0 -p 2.57546 -1.21213 0 -p 1.419647 -1.938615 0 -p 1.294912 -2.516338 0 -p 0.935117 -2.299332 0 -p 0.80681 -1.944977 0 -p 1.035179 -2.048344 0 -p -0.636392 -1.989231 0 -p -1.108525 -2.525225 0 -p -1.335772 -2.213165 0 -p -1.163381 -1.797263 0 -p -0.739298 -0.549653 0 -p -0.835217 -1.121078 0 -p -1.762025 -1.211135 0 -p -0.456917 0.20401 0 -p -0.560278 -0.28985 0 -p -1.613106 0.270444 0 -p -1.005203 0.537676 0 -p -1.175259 1.567658 0 -p -1.344683 1.048434 0 -p -1.463913 2.256511 0 -p -0.736987 1.650197 0 -p -0.823166 1.709551 0 -p -0.866256 1.739227 0&#x27;</span>point_list = point_script.split(<span class="hljs-string">&#x27; -p &#x27;</span>)xyz_list = []<span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> point_list:        <span class="hljs-keyword">if</span> point == <span class="hljs-string">&#x27;&#x27;</span>:                <span class="hljs-keyword">continue</span>        (x,y,z) = point.split(<span class="hljs-string">&#x27; &#x27;</span>)        xyz_list.append((x,y,z))cmds.curve(d=<span class="hljs-number">3</span>,p=xyz_list)</code></pre><h2 id="L5-节点类型和属性的获取"><a href="#L5-节点类型和属性的获取" class="headerlink" title="L5 节点类型和属性的获取"></a>L5 节点类型和属性的获取</h2><h3 id="获取选择物体的类型nodeType"><a href="#获取选择物体的类型nodeType" class="headerlink" title="获取选择物体的类型nodeType"></a>获取选择物体的类型nodeType</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.cmds <span class="hljs-keyword">as</span> cmdssel = cmds.ls(sl=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]<span class="hljs-keyword">print</span> cmds.nodeType(sel)</code></pre><h3 id="获取物体所有属性listAttr"><a href="#获取物体所有属性listAttr" class="headerlink" title="获取物体所有属性listAttr"></a>获取物体所有属性listAttr</h3><pre><code class="hljs python">cmds.listAttr(<span class="hljs-string">&#x27;pCube1&#x27;</span>)</code></pre><h3 id="获取物体可k帧属性"><a href="#获取物体可k帧属性" class="headerlink" title="获取物体可k帧属性"></a>获取物体可k帧属性</h3><pre><code class="hljs python">cmds.listAttr(<span class="hljs-string">&#x27;pCube1&#x27;</span>,k=<span class="hljs-literal">True</span>)</code></pre><h3 id="获取物体自定义属性"><a href="#获取物体自定义属性" class="headerlink" title="获取物体自定义属性"></a>获取物体自定义属性</h3><pre><code class="hljs python"><span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> cmds.listAttr(box, k=<span class="hljs-literal">True</span>):   _at = <span class="hljs-string">&#x27;&#123;0&#125;.&#123;1&#125;&#x27;</span>.format(box, attr)</code></pre><p>        </p><h3 id="查询属性getAttr"><a href="#查询属性getAttr" class="headerlink" title="查询属性getAttr"></a>查询属性getAttr</h3><pre><code class="hljs python">cmds.getAttr(_at)</code></pre><h3 id="修改属性setAttr"><a href="#修改属性setAttr" class="headerlink" title="修改属性setAttr"></a>修改属性setAttr</h3><pre><code class="hljs python"><span class="hljs-comment"># ! 当设置的属性值为字符串时，需要添加字符串类型</span>cmds.setAttr(_at, <span class="hljs-number">1</span>)cmds.setAttr(_at, <span class="hljs-string">&#x27;1&#x27;</span>, typ=<span class="hljs-string">&#x27;string&#x27;</span>)cmds.setAttr(_at, <span class="hljs-string">&#x27;1&#x27;</span>, typ=<span class="hljs-string">&#x27;string&#x27;</span>, l=<span class="hljs-number">1</span>)</code></pre><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><p>获取选择物体的节点类型和属性信息，存储到文件里。</p><p><font color="orange">把一个场景内需要的物体，导出成一个json文件，比如渲染设置、摄像机信息之类的，存储到文件里，然后从另一个文件里，导入这些属性进行状态的复制。</font></p><p>输出属性</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> jsonnode_name = <span class="hljs-string">&#x27;rmanGlobals&#x27;</span>all_attrs = cmds.listAttr(node_name, hasData=<span class="hljs-number">1</span>, output=<span class="hljs-number">1</span>)save_file = os.path.join(<span class="hljs-string">r&#x27;D:\td_tech\node_info&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#125;.json&#x27;</span>.format(node_name))<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(os.path.dirname(save_file)):        os.makedirs(os.path.dirname(save_file))attr_dict = &#123;&#125;<span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> all_attrs:        attr_name = <span class="hljs-string">&#x27;&#123;0&#125;.&#123;1&#125;&#x27;</span>.format(node_name, attr)        attr_value = str(cmds.getAttr(<span class="hljs-string">&#x27;&#123;0&#125;.&#123;1&#125;&#x27;</span>.format(node_name, attr)))        attr_dict[attr_name] = attr_value<span class="hljs-keyword">with</span> open(save_file, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> json_file:        json_str = json.dumps(attr_dict, indent=<span class="hljs-number">4</span>)        json_file.write(json_str)</code></pre><p>导入属性（属性类型问题未解决）</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> jsonnode_name = <span class="hljs-string">&#x27;rmanGlobals&#x27;</span>save_file = os.path.join(<span class="hljs-string">r&#x27;D:\td_tech\node_info&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#125;.json&#x27;</span>.format(node_name))<span class="hljs-keyword">with</span> open(save_file, <span class="hljs-string">&#x27;r+&#x27;</span>) <span class="hljs-keyword">as</span> json_file:        json_dict = json.load(json_file)        <span class="hljs-keyword">for</span> attr_name, attr_value <span class="hljs-keyword">in</span> json_dict.items():                attr_type = cmds.getAttr(attr_name, type=<span class="hljs-literal">True</span>)</code></pre><h2 id="L6-节点及其属性的断开和连接"><a href="#L6-节点及其属性的断开和连接" class="headerlink" title="L6 节点及其属性的断开和连接"></a>L6 节点及其属性的断开和连接</h2><p><font color="orange">每一个场景资产，都是通过节点之间连接形成网络</font></p><p>打开属性连接编辑器：Windows-General Editors-Connection Editor</p><p>左边为输出属性物体，右边为输入属性物体</p><h3 id="获取物体的transform节点属性"><a href="#获取物体的transform节点属性" class="headerlink" title="获取物体的transform节点属性"></a>获取物体的transform节点属性</h3><p>查看transform节点的帮助文档，只要属性类型是一致的就可以连接</p><h3 id="连接属性connectAttr"><a href="#连接属性connectAttr" class="headerlink" title="连接属性connectAttr"></a>连接属性connectAttr</h3><pre><code class="hljs python">cmds.connectAttr(<span class="hljs-string">&#x27;pCube1.t&#x27;</span>,<span class="hljs-string">&#x27;pSphere1.t&#x27;</span>)cmds.connectAttr(<span class="hljs-string">&#x27;pCube1.ry&#x27;</span>,<span class="hljs-string">&#x27;pSphere1.ry&#x27;</span>)<span class="hljs-comment"># ! 当属性已经被连上，则需要断开再重新连，使用-force 可以强制连接</span>cmds.connectAttr(<span class="hljs-string">&#x27;pCube2.t&#x27;</span>,<span class="hljs-string">&#x27;pSphere1.t&#x27;</span>)<span class="hljs-comment"># ! 一个多边形的形状取决于它的outMesh和inMesh</span>cmds.connectAttr(<span class="hljs-string">&#x27;pCube1.outMesh&#x27;</span>, <span class="hljs-string">&#x27;pSphere1.inMesh&#x27;</span>, f=<span class="hljs-number">1</span>)</code></pre><h3 id="断开属性disconnectAttr"><a href="#断开属性disconnectAttr" class="headerlink" title="断开属性disconnectAttr"></a>断开属性disconnectAttr</h3><pre><code class="hljs python">cmds.disconnectAttr(<span class="hljs-string">&#x27;pCube1.outMesh&#x27;</span>, <span class="hljs-string">&#x27;pSphere1.inMesh&#x27;</span>, f=<span class="hljs-number">1</span>)</code></pre><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L6_1.png"></p><p>通过创建节点并连接网络，通过调节blendColors参数改变球体的颜色</p><pre><code class="hljs python"><span class="hljs-comment"># create nodes</span>lamA = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)lamB = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)lamC = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)bleColor = cmds.shadingNode(<span class="hljs-string">&#x27;blendColors&#x27;</span>,asUtility=<span class="hljs-literal">True</span>)<span class="hljs-comment"># connect attr</span>cmds.connectAttr(<span class="hljs-string">&#x27;&#123;&#125;.outColor&#x27;</span>.format(lamA),<span class="hljs-string">&#x27;&#123;&#125;.color1&#x27;</span>.format(bleColor))cmds.connectAttr(<span class="hljs-string">&#x27;&#123;&#125;.outColor&#x27;</span>.format(lamB),<span class="hljs-string">&#x27;&#123;&#125;.color2&#x27;</span>.format(bleColor))cmds.connectAttr(<span class="hljs-string">&#x27;&#123;&#125;.output&#x27;</span>.format(bleColor),<span class="hljs-string">&#x27;&#123;&#125;.color&#x27;</span>.format(lamC))</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L6_2.png"></p><h2 id="L7-轻松获取节点连接关系"><a href="#L7-轻松获取节点连接关系" class="headerlink" title="L7 轻松获取节点连接关系"></a>L7 轻松获取节点连接关系</h2><h3 id="listConnectins"><a href="#listConnectins" class="headerlink" title="listConnectins()"></a>listConnectins()</h3><p>输入对象是一个节点</p><pre><code class="hljs python">lamA = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)lamB = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)lamC = cmds.shadingNode(<span class="hljs-string">&#x27;lambert&#x27;</span>,asShader=<span class="hljs-literal">True</span>)bleColor = cmds.shadingNode(<span class="hljs-string">&#x27;blendColors&#x27;</span>,asUtility=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_1.png"></p><h4 id="获取所有连接节点"><a href="#获取所有连接节点" class="headerlink" title="获取所有连接节点"></a>获取所有连接节点</h4><pre><code class="hljs python">cmds.listConnections(bleColor)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_2.png"></p><h4 id="只获取上游节点"><a href="#只获取上游节点" class="headerlink" title="只获取上游节点"></a>只获取上游节点</h4><pre><code class="hljs python">cmds.listConnections(bleColor,s=<span class="hljs-literal">True</span>,d=<span class="hljs-literal">False</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_3.png"></p><h4 id="获取连接节点属性以及属性名"><a href="#获取连接节点属性以及属性名" class="headerlink" title="获取连接节点属性以及属性名"></a>获取连接节点属性以及属性名</h4><pre><code class="hljs python">cmds.listConnections(bleColor,s=<span class="hljs-literal">True</span>,d=<span class="hljs-literal">False</span>,p=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_4.png"></p><h4 id="以类型过滤连接节点"><a href="#以类型过滤连接节点" class="headerlink" title="以类型过滤连接节点"></a>以类型过滤连接节点</h4><pre><code class="hljs python">cmds.listConnections(bleColor,type=<span class="hljs-string">&#x27;lambert&#x27;</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_5.png"></p><h3 id="connectionInfo"><a href="#connectionInfo" class="headerlink" title="connectionInfo()"></a>connectionInfo()</h3><p>输入对象是一个节点的属性</p><h4 id="获取输入属性"><a href="#获取输入属性" class="headerlink" title="获取输入属性"></a>获取输入属性</h4><pre><code class="hljs python">cmds.connectionInfo(<span class="hljs-string">&#x27;&#123;&#125;.color1&#x27;</span>.format(bleColor),sfd=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_6.png"></p><h4 id="获取输出属性"><a href="#获取输出属性" class="headerlink" title="获取输出属性"></a>获取输出属性</h4><pre><code class="hljs python">cmds.connectionInfo(<span class="hljs-string">&#x27;&#123;&#125;.output&#x27;</span>.format(bleColor),dfs=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_7.png"></p><h4 id="判断是否为Sources输出的源"><a href="#判断是否为Sources输出的源" class="headerlink" title="判断是否为Sources输出的源"></a>判断是否为Sources输出的源</h4><pre><code class="hljs python">cmds.connectionInfo(<span class="hljs-string">&#x27;&#123;&#125;.output&#x27;</span>.format(bleColor),isSource=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_8.png"></p><h4 id="判断是否为Destination被连接"><a href="#判断是否为Destination被连接" class="headerlink" title="判断是否为Destination被连接"></a>判断是否为Destination被连接</h4><pre><code class="hljs python">cmds.connectionInfo(<span class="hljs-string">&#x27;&#123;&#125;.output&#x27;</span>.format(bleColor),isDestination=<span class="hljs-literal">True</span>)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L7_9.png"></p><h3 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h3><p>获取一个动画角色控制器的关键帧连接信息，连接到另一个相同的角色。</p><h2 id="L8-几种物体的约束关系"><a href="#L8-几种物体的约束关系" class="headerlink" title="L8 几种物体的约束关系"></a>L8 几种物体的约束关系</h2><p>用命令创建约束:</p><p>&emsp;&emsp;常见的约束有父子约束、点约束、旋转约束、缩放约束、目标约束以及极向量约束。</p><h3 id="点约束"><a href="#点约束" class="headerlink" title="点约束"></a>点约束</h3><pre><code class="hljs python">cmds.pointConstraint(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,<span class="hljs-string">&#x27;pSphere2&#x27;</span>)<span class="hljs-comment"># ! 保持相对位移：</span>cmds.pointConstraint(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,<span class="hljs-string">&#x27;pSphere2&#x27;</span>,mo=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 修改约束节点名称</span>cmds.pointConstraint(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,<span class="hljs-string">&#x27;pSphere2&#x27;</span>,mo=<span class="hljs-literal">True</span>,name=<span class="hljs-string">&#x27;ball&#x27;</span>)<span class="hljs-comment"># ! 查询约束节点名</span>cmds.pointConstraint(<span class="hljs-string">&#x27;pSphere2&#x27;</span>,q=<span class="hljs-literal">True</span>,name=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 查询约束权重</span>cmds.pointConstraint(<span class="hljs-string">&#x27;pSphere2&#x27;</span>,q=<span class="hljs-literal">True</span>,wal=<span class="hljs-literal">True</span>)</code></pre><h3 id="旋转约束"><a href="#旋转约束" class="headerlink" title="旋转约束"></a>旋转约束</h3><pre><code class="hljs python">cmds.orientConstraint(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,<span class="hljs-string">&#x27;pSphere2)</span></code></pre><h3 id="父子约束"><a href="#父子约束" class="headerlink" title="父子约束"></a>父子约束</h3><pre><code class="hljs python"><span class="hljs-comment"># ! 绑定时，需要先把控制器和骨骼的轴向一致，再进行约束</span>jnt = <span class="hljs-string">&#x27;joint1&#x27;</span>ctl = <span class="hljs-string">&#x27;ctl&#x27;</span>ctg = <span class="hljs-string">&#x27;ctl_grp&#x27;</span>cmds.delete(cmds.parentConstraint(jnt,ctg))cmds.parentConstraint(ctl,jnt)</code></pre><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L8_1.png"></p><h3 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h3><p>创建一个脚本，根据选择的物体创建控制器并对其约束</p><pre><code class="hljs python">sel = cmds.ls(sl=<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> len(sel) == <span class="hljs-number">1</span>:        sel_obj = sel[<span class="hljs-number">0</span>]        obj_t = cmds.xform(sel_obj,q=<span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>)        obj_ro = cmds.xform(sel_obj,q=<span class="hljs-number">1</span>,ro=<span class="hljs-number">1</span>)        ctl = cmds.circle(name=<span class="hljs-string">&#x27;ctl&#x27;</span>,c=obj_t,nr=obj_ro)        cmds.parentConstraint(ctl,sel_obj,mo=<span class="hljs-number">1</span>)<span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;please select one obj&#x27;</span></code></pre><h2 id="L9-创建和获取关键帧信息"><a href="#L9-创建和获取关键帧信息" class="headerlink" title="L9 创建和获取关键帧信息"></a>L9 创建和获取关键帧信息</h2><p>设置关键帧快捷键：在时间轴上按s。</p><h3 id="设置、创建关键帧setKeyframe"><a href="#设置、创建关键帧setKeyframe" class="headerlink" title="设置、创建关键帧setKeyframe()"></a>设置、创建关键帧setKeyframe()</h3><pre><code class="hljs python">cmds.setKeyframe()<span class="hljs-comment"># ! 不选中物体</span>cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>)<span class="hljs-comment"># ! 添加属性设置关键帧</span>cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,at=<span class="hljs-string">&#x27;tx&#x27;</span>)cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,at=[<span class="hljs-string">&#x27;tx&#x27;</span>,<span class="hljs-string">&#x27;ty&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>])<span class="hljs-comment"># !设置数值</span>cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,at=[<span class="hljs-string">&#x27;tx&#x27;</span>,<span class="hljs-string">&#x27;ty&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>],v=<span class="hljs-number">10</span>)</code></pre><h3 id="案例：让球转圈"><a href="#案例：让球转圈" class="headerlink" title="案例：让球转圈"></a>案例：让球转圈</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<span class="hljs-keyword">import</span> maya.cmds <span class="hljs-keyword">as</span> cmds<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>):        x = math.sin(i * math.pi/<span class="hljs-number">180</span>) * <span class="hljs-number">10</span>        z = math.cos(i * math.pi/<span class="hljs-number">180</span>) * <span class="hljs-number">10</span>                cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, at=<span class="hljs-string">&#x27;tx&#x27;</span>, t=i, v=x)        cmds.setKeyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, at=<span class="hljs-string">&#x27;tz&#x27;</span>, t=i, v=z)</code></pre><h3 id="获取关键帧keyframe"><a href="#获取关键帧keyframe" class="headerlink" title="获取关键帧keyframe()"></a>获取关键帧keyframe()</h3><pre><code class="hljs python"><span class="hljs-comment"># ! 查询帧</span>cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, q=<span class="hljs-literal">True</span>, tc=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 查询属性</span>cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, q=<span class="hljs-literal">True</span>, vc=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 属性过滤</span>cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, at=<span class="hljs-string">&#x27;ty&#x27;</span>, q=<span class="hljs-literal">True</span>, tc=<span class="hljs-literal">True</span>)cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, at=<span class="hljs-string">&#x27;ty&#x27;</span>, q=<span class="hljs-literal">True</span>, vc=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 编辑属性</span>frame_tc = cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, at=<span class="hljs-string">&#x27;ty&#x27;</span>, q=<span class="hljs-literal">True</span>, tc=<span class="hljs-literal">True</span>)cmds.keyframe(<span class="hljs-string">&#x27;pSphere1&#x27;</span>,  <span class="hljs-comment"># 编辑的物体</span>               at=<span class="hljs-string">&#x27;ty&#x27;</span>,   <span class="hljs-comment"># 编辑的属性</span>               e=<span class="hljs-literal">True</span>,    <span class="hljs-comment"># 编辑模式</span>               time=(min(frame_tc), max(frame_tc)),     <span class="hljs-comment"># 编辑的时间范围</span>               tc=<span class="hljs-number">5</span>,     <span class="hljs-comment"># 关键帧变化，正数往右，负数往左</span>               r=<span class="hljs-literal">True</span>    <span class="hljs-comment"># 相对变化</span></code></pre><h3 id="练习-9"><a href="#练习-9" class="headerlink" title="练习"></a>练习</h3><p>给一个物体从1到200逐渐创建关键帧，实现随机抖动效果。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> randomsel = cmds.ls(sl=<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> len(sel) == <span class="hljs-number">1</span>:        sel_obj = sel[<span class="hljs-number">0</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">201</span>):                rand_x = random.uniform(<span class="hljs-number">-20</span>,<span class="hljs-number">20</span>)                rand_y = random.uniform(<span class="hljs-number">-20</span>,<span class="hljs-number">20</span>)                rand_z = random.uniform(<span class="hljs-number">-20</span>,<span class="hljs-number">20</span>)                cmds.setKeyframe(sel_obj, at=<span class="hljs-string">&#x27;tx&#x27;</span>, t=i, v=rand_x)                cmds.setKeyframe(sel_obj, at=<span class="hljs-string">&#x27;ty&#x27;</span>, t=i, v=rand_y)                cmds.setKeyframe(sel_obj, at=<span class="hljs-string">&#x27;tz&#x27;</span>, t=i, v=rand_z)<span class="hljs-keyword">else</span>:        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;please select one obj&#x27;</span></code></pre><h2 id="L10-文件输入输出以及reference处理"><a href="#L10-文件输入输出以及reference处理" class="headerlink" title="L10 文件输入输出以及reference处理"></a>L10 文件输入输出以及reference处理</h2><h3 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h3><pre><code class="hljs python"><span class="hljs-comment"># ! 新建场景</span>cmds.file(new=<span class="hljs-literal">True</span>,f=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 保存场景</span>cmds.file(rename=<span class="hljs-string">&quot;D:/td_tech/test.ma&quot;</span>)cmds.file(save=<span class="hljs-literal">True</span>,typ=<span class="hljs-string">&quot;mayaAscii&quot;</span>)<span class="hljs-comment"># ! 打开文件</span>cmds.file(<span class="hljs-string">&quot;D:/td_tech/test.ma&quot;</span>,o=<span class="hljs-literal">True</span>,force=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 获取场景名称</span>cmds.file(q=<span class="hljs-literal">True</span>,sn=<span class="hljs-literal">True</span>)cmds.file(q=<span class="hljs-literal">True</span>,sn=<span class="hljs-literal">True</span>,shn=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 导出物体</span>cmds.file(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,exportAll=<span class="hljs-literal">True</span>,typ=<span class="hljs-string">&quot;mayaAscii&quot;</span>)cmds.file(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,exportSelected=<span class="hljs-literal">True</span>,typ=<span class="hljs-string">&quot;mayaAscii&quot;</span>)<span class="hljs-comment"># ! 导入物体</span>cmds.file(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,i=<span class="hljs-literal">True</span>,ns=<span class="hljs-string">&#x27;ball&#x27;</span>)<span class="hljs-comment"># ! 参考文件</span>cmds.file(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,r=<span class="hljs-literal">True</span>,ns=<span class="hljs-string">&#x27;ball&#x27;</span>)<span class="hljs-comment"># ! 查询参考文件</span>cmds.file(q=<span class="hljs-literal">True</span>,r=<span class="hljs-literal">True</span>)cmds.file(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,q=<span class="hljs-literal">True</span>,r=<span class="hljs-literal">True</span>)</code></pre><h3 id="referenceQuery"><a href="#referenceQuery" class="headerlink" title="referenceQuery()"></a>referenceQuery()</h3><pre><code class="hljs python"><span class="hljs-comment"># ! 参考文件节点查询</span>cmds.referenceQuery(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,n=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 参考节点文件查询</span>cmds.referenceQuery(<span class="hljs-string">&#x27;ball1:pSphere1&#x27;</span>,f=<span class="hljs-literal">True</span>)<span class="hljs-comment"># ! 查询参考是否加载</span>cmds.referenceQuery(<span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span>,isLoaded=<span class="hljs-literal">True</span>)</code></pre><h3 id="练习-10"><a href="#练习-10" class="headerlink" title="练习"></a>练习</h3><p>利用循环实现批量reference功能。</p><pre><code class="hljs python">ref_file = <span class="hljs-string">&quot;D:/td_tech/export.ma&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):        cmds.file(ref_file,r=<span class="hljs-literal">True</span>,ns=<span class="hljs-string">&#x27;ball&#123;&#125;&#x27;</span>.format(i))</code></pre><h2 id="L11-Maya-窗口与控件编程"><a href="#L11-Maya-窗口与控件编程" class="headerlink" title="L11 Maya 窗口与控件编程"></a>L11 Maya 窗口与控件编程</h2><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L11_1.png"></p><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L11_2.png"></p><h3 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h3><pre><code class="hljs python">wnd = cmds.window()</code></pre><h3 id="显示窗口"><a href="#显示窗口" class="headerlink" title="显示窗口"></a>显示窗口</h3><pre><code class="hljs python">cmds.showWindow(wnd)</code></pre><h3 id="添加窗口属性"><a href="#添加窗口属性" class="headerlink" title="添加窗口属性"></a>添加窗口属性</h3><pre><code class="hljs python">wnd = cmds.window(w=<span class="hljs-number">600</span>,h=<span class="hljs-number">800</span>,t=<span class="hljs-string">&#x27;main_window&#x27;</span>)</code></pre><h3 id="定义变量避免窗口重复创建，并恢复默认窗口设置"><a href="#定义变量避免窗口重复创建，并恢复默认窗口设置" class="headerlink" title="定义变量避免窗口重复创建，并恢复默认窗口设置"></a>定义变量避免窗口重复创建，并恢复默认窗口设置</h3><pre><code class="hljs python">wnd_name = <span class="hljs-string">&#x27;my_win&#x27;</span><span class="hljs-keyword">if</span> cmds.window(wnd_name,q=<span class="hljs-literal">True</span>,exists=<span class="hljs-literal">True</span>):        cmds.deleteUI(wnd_name,wnd=<span class="hljs-literal">True</span>)<span class="hljs-keyword">if</span> cmds.windowPref(wnd_name,q=<span class="hljs-literal">True</span>,exists=<span class="hljs-literal">True</span>):        cmds.windowPref(wnd_name,r=<span class="hljs-literal">True</span>)wnd = cmds.window(wnd_name,w=<span class="hljs-number">600</span>,h=<span class="hljs-number">800</span>,t=<span class="hljs-string">&#x27;main_window&#x27;</span>)cmds.showWindow(wnd)</code></pre><h3 id="创建layout和按钮"><a href="#创建layout和按钮" class="headerlink" title="创建layout和按钮"></a>创建layout和按钮</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L11_3.png"></p><h3 id="练习-11"><a href="#练习-11" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L11_4.png"></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_ball</span>(<span class="hljs-params">*args</span>):</span>        num = cmds.textField(num_text,q=<span class="hljs-number">1</span>,tx=<span class="hljs-number">1</span>)        ra = cmds.textField(ra_text,q=<span class="hljs-number">1</span>,tx=<span class="hljs-number">1</span>)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,int(num)):                cmds.polySphere(r=ra)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:        wnd_name = <span class="hljs-string">&#x27;my_win&#x27;</span>        <span class="hljs-keyword">if</span> cmds.window(wnd_name,q=<span class="hljs-literal">True</span>,exists=<span class="hljs-literal">True</span>):                cmds.deleteUI(wnd_name,wnd=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">if</span> cmds.windowPref(wnd_name,q=<span class="hljs-literal">True</span>,exists=<span class="hljs-literal">True</span>):                cmds.windowPref(wnd_name,r=<span class="hljs-literal">True</span>)                        wnd = cmds.window(wnd_name,w=<span class="hljs-number">300</span>,h=<span class="hljs-number">50</span>,t=<span class="hljs-string">&#x27;main_window&#x27;</span>)        cmds.gridLayout(numberOfColumns=<span class="hljs-number">2</span>,numberOfRows=<span class="hljs-number">2</span>,cellWidthHeight=(<span class="hljs-number">150</span>, <span class="hljs-number">30</span>))        cmds.text(label=<span class="hljs-string">&#x27;num&#x27;</span>)        num_text = cmds.textField()        cmds.text(label=<span class="hljs-string">&#x27;ra&#x27;</span>)        ra_text = cmds.textField()        cmds.button(l=<span class="hljs-string">&#x27;create&#x27;</span>,c=create_ball)        cmds.showWindow(wnd)</code></pre><h2 id="L12-Maya中的视图与相机操作"><a href="#L12-Maya中的视图与相机操作" class="headerlink" title="L12 Maya中的视图与相机操作"></a>L12 Maya中的视图与相机操作</h2><h3 id="getPanel"><a href="#getPanel" class="headerlink" title="getPanel()"></a>getPanel()</h3><h4 id="获取所有视图"><a href="#获取所有视图" class="headerlink" title="获取所有视图"></a>获取所有视图</h4><pre><code class="hljs python">cmds.getPanel(all=<span class="hljs-literal">True</span>)</code></pre><h4 id="只获取显示的视图"><a href="#只获取显示的视图" class="headerlink" title="只获取显示的视图"></a>只获取显示的视图</h4><pre><code class="hljs python">cmds.getPanel(vis=<span class="hljs-literal">True</span>)</code></pre><h4 id="通过视图类型返回视图"><a href="#通过视图类型返回视图" class="headerlink" title="通过视图类型返回视图"></a>通过视图类型返回视图</h4><pre><code class="hljs python">cmds.getPanel(typ=<span class="hljs-string">&#x27;outlinerPanel&#x27;</span>)</code></pre><h4 id="返回当前激活视图"><a href="#返回当前激活视图" class="headerlink" title="返回当前激活视图"></a>返回当前激活视图</h4><pre><code class="hljs python">cmds.getPanel(withFocus=<span class="hljs-literal">True</span>)</code></pre><h3 id="modelPanel"><a href="#modelPanel" class="headerlink" title="modelPanel()"></a>modelPanel()</h3><h4 id="查询当前视图摄像机"><a href="#查询当前视图摄像机" class="headerlink" title="查询当前视图摄像机"></a>查询当前视图摄像机</h4><pre><code class="hljs python">cmds.modelPanel(<span class="hljs-string">&#x27;modelPanel4&#x27;</span>,q=<span class="hljs-literal">True</span>,cam=<span class="hljs-literal">True</span>)cmds.modelEditor(<span class="hljs-string">&#x27;modelPanel4&#x27;</span>,q=<span class="hljs-literal">True</span>,cam=<span class="hljs-literal">True</span>)</code></pre><h4 id="编辑当前视图摄像机"><a href="#编辑当前视图摄像机" class="headerlink" title="编辑当前视图摄像机"></a>编辑当前视图摄像机</h4><pre><code class="hljs python">cmds.modelPanel(<span class="hljs-string">&#x27;modelPanel4&#x27;</span>,e=<span class="hljs-literal">True</span>,cam=<span class="hljs-string">&#x27;front&#x27;</span>)</code></pre><h4 id="裁剪视图"><a href="#裁剪视图" class="headerlink" title="裁剪视图"></a>裁剪视图</h4><pre><code class="hljs python">cmds.modelPanel(<span class="hljs-string">&#x27;modelPanel4&#x27;</span>,e=<span class="hljs-literal">True</span>,tearOff=<span class="hljs-literal">True</span>)</code></pre><h4 id="编辑视图显示的内容"><a href="#编辑视图显示的内容" class="headerlink" title="编辑视图显示的内容"></a>编辑视图显示的内容</h4><pre><code class="hljs python">cmds.modelEditor(<span class="hljs-string">&#x27;modelPanel2&#x27;</span>,e=<span class="hljs-literal">True</span>,joints=<span class="hljs-literal">True</span>)</code></pre><h3 id="练习-12"><a href="#练习-12" class="headerlink" title="练习"></a>练习</h3><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L12_1.png"></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">playblast_polygon</span>():</span>        my_cam = cmds.camera(p=[<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;36&#x27;</span>,<span class="hljs-string">&#x27;33&#x27;</span>],rot=[<span class="hljs-string">&#x27;-42&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>])        my_ball = cmds.polySphere()        cmds.circle(center=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))        cmds.setKeyframe(my_ball,at=<span class="hljs-string">&#x27;translateX&#x27;</span>,v=<span class="hljs-number">10</span>,t=<span class="hljs-number">10</span>)        cmds.setKeyframe(my_ball,at=<span class="hljs-string">&#x27;translateX&#x27;</span>,v=<span class="hljs-number">5</span>,t=<span class="hljs-number">20</span>)        cmds.modelPanel(my_panel,e=<span class="hljs-literal">True</span>,cam=my_cam[<span class="hljs-number">0</span>])        cmds.modelEditor(my_panel,e=<span class="hljs-literal">True</span>,alo=<span class="hljs-literal">False</span>,polymeshes=<span class="hljs-literal">True</span>)        cmds.refresh()        cmds.playblast(st=<span class="hljs-number">1</span>,et=<span class="hljs-number">30</span>)        playblast_polygon()</code></pre><h2 id="L13-Maya-中的事件触发"><a href="#L13-Maya-中的事件触发" class="headerlink" title="L13 Maya 中的事件触发"></a>L13 Maya 中的事件触发</h2><h3 id="时间轴变化触发事件"><a href="#时间轴变化触发事件" class="headerlink" title="时间轴变化触发事件"></a>时间轴变化触发事件</h3><pre><code class="hljs python">job_id = cmds.scriptJob(tc=<span class="hljs-string">&#x27;print &quot;change&quot;&#x27;</span>)cmds.scriptJob(kill=job_id)</code></pre><h3 id="属性变化触发事件"><a href="#属性变化触发事件" class="headerlink" title="属性变化触发事件"></a>属性变化触发事件</h3><pre><code class="hljs python">job_id = cmds.scriptJob(attributeChange=(<span class="hljs-string">&#x27;pSphere1.tx&#x27;</span>,<span class="hljs-string">&#x27;print &quot;123&quot;&#x27;</span>))</code></pre><h3 id="删除所有任务"><a href="#删除所有任务" class="headerlink" title="删除所有任务"></a>删除所有任务</h3><pre><code class="hljs python">cmds.scriptJob(killAll=<span class="hljs-literal">True</span>)</code></pre><h3 id="其他属性更改"><a href="#其他属性更改" class="headerlink" title="其他属性更改"></a>其他属性更改</h3><pre><code class="hljs python">cmds.scriptJob(nodeDeleted=(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, <span class="hljs-string">&#x27;print &quot;ball delete&quot;&#x27;</span>))cmds.scriptJob(nodeNameChanged=(<span class="hljs-string">&#x27;pSphere1&#x27;</span>, <span class="hljs-string">&#x27;print &quot;ball rename&quot;&#x27;</span>))</code></pre><h3 id="防止killAll全部删除"><a href="#防止killAll全部删除" class="headerlink" title="防止killAll全部删除"></a>防止killAll全部删除</h3><p>只有在maya关闭才会删除</p><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L13_1.png"></p><h3 id="跟踪条件"><a href="#跟踪条件" class="headerlink" title="跟踪条件"></a>跟踪条件</h3><p>自动k帧是否打开</p><pre><code class="hljs python">cmds.scriptJob(conditionTure=(<span class="hljs-string">&#x27;autoKeyFrameState&#x27;</span>, <span class="hljs-string">&#x27;print &quot;auto key enable&quot;&#x27;</span>))cmds.scriptJob(conditionFalse=(<span class="hljs-string">&#x27;autoKeyFrameState&#x27;</span>, <span class="hljs-string">&#x27;print &quot;auto key disable&quot;&#x27;</span>))</code></pre><p>是否有物体被选择</p><pre><code class="hljs python">cmds.scriptJob(conditionTrue=(<span class="hljs-string">&#x27;Something Selected&#x27;</span>, <span class="hljs-string">&#x27;print &quot;selected&quot;&#x27;</span>))</code></pre><p>传入方法</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span>    <span class="hljs-keyword">print</span> cmds.ls(sl=<span class="hljs-literal">True</span>)cmds.scriptJob(conditionTrue=(<span class="hljs-string">&#x27;Something Selected&#x27;</span>, func))</code></pre><h3 id="练习-13"><a href="#练习-13" class="headerlink" title="练习"></a>练习</h3><p>利用 scriptJob 创建一个属性变化影响另一个属性变化。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ball_tx_change</span>():</span>        new_tx = cmds.getAttr(<span class="hljs-string">&#x27;pCube1.tx&#x27;</span>)        cmds.setAttr(<span class="hljs-string">&#x27;pSphere1.tx&#x27;</span>,new_tx)        job_id = cmds.scriptJob(attributeChange=(<span class="hljs-string">&#x27;pCube1.tx&#x27;</span>,ball_tx_change))cmds.scriptJob(kill=job_id)</code></pre><h2 id="L14-基础部分总结"><a href="#L14-基础部分总结" class="headerlink" title="L14 基础部分总结"></a>L14 基础部分总结</h2><p>Maya帮助文档</p><p>Maya命令反馈</p><p>mel whatIs</p><p><img src="/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%B8%80%EF%BC%89/L14_1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Maya</category>
      
      <category>Maya开发实践课</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>SCRIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hugo中使用css自定义图片位置</title>
    <link href="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/"/>
    <url>/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近公司开发了gitlab上的文档功能，并配置了主题（hugo-learn-free）。</p><p>&emsp;&emsp;在使用过程中，我发现该主题的图片会自动换行追踪，不能修改图片显示的位置。这对于需要图片排版的文章十分不友好，因此我自己在本地配置了一个相同主题的网站做测试。</p><p>我在markdown中编辑的效果：</p><p><img src="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/right.png"></p><p>我在Hugo主题中显示的效果：</p><p><img src="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/wrong.png"></p><hr><h3 id="🦊-Hugo安装"><a href="#🦊-Hugo安装" class="headerlink" title="🦊 Hugo安装"></a>🦊 Hugo安装</h3><p>&emsp;&emsp;Hugo是一个非常受欢迎的、开源的静态网站生成工具，和Hexo类似。 它速度快，扩展性强。</p><ol><li>从 hugo 的 <a href="https://github.com/gohugoio/hugo/releases">GitHub 仓库</a> 下载对应安装包（我的win10系统下载的是“ hugo_0.76.5_Windows-64bit.zip ”）。</li><li>解压安装包到自定义目录下。</li><li>把目录添加到 Windows 的系统环境变量的 PATH 中。</li><li>验证Hugo是否安装成功：<code>hugo version</code></li></ol><h3 id="🐮-搭建站点"><a href="#🐮-搭建站点" class="headerlink" title="🐮 搭建站点"></a>🐮 搭建站点</h3><p>&emsp;&emsp;在想放置站点的文件夹，打开“Git Bash Here”，输入“ hugo new site + 站点名”。</p><pre><code class="hljs haxe">hugo <span class="hljs-keyword">new</span> <span class="hljs-type">site</span> blog</code></pre><h3 id="🐰-配置主题"><a href="#🐰-配置主题" class="headerlink" title="🐰 配置主题"></a>🐰 配置主题</h3><p>&emsp;&emsp;既然要测试，那么肯定要测试相同的主题了。</p><ol><li>把“ hugo-learn-free ”主题内容解压后放在 “blog/themes” 目录下（blog替换成创建的站点名）。</li><li>在“ blog/hugo-theme-learn/exampleSite ”中有一个“config.toml”文件，这是一个主题的模版配置文件，把它复制到你的站点根目录下。</li><li>这样就能加载到该主题了。</li></ol><h3 id="🐢-添加文章"><a href="#🐢-添加文章" class="headerlink" title="🐢 添加文章"></a>🐢 添加文章</h3><p>&emsp;&emsp;创建 blog/content/posts/_index.md。</p><pre><code class="hljs reasonml">hugo <span class="hljs-keyword">new</span> posts/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_index</span>.</span></span>md</code></pre><p>&emsp;&emsp;正常主题这样就可以显示文章了，但是“ hugo-learn-free ”主题不一样，它有文章命名规则：</p><p><img src="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/theme_rules.png"></p><p>&emsp;&emsp;第一点就是：在内容文件夹中创建一个_index.md文档，并用Markdown内容填充它。也就是说，我们的文章需要放在一个文件夹内，且文章命名要为_index.md。</p><p>&emsp;&emsp;文章的大致结构如下：</p><pre><code class="hljs markdown">content├─ pages│  ├─ first<span class="hljs-emphasis">_page                //文件夹，可以自定义命名</span><span class="hljs-emphasis">│  │  ├─ index                  //文件夹，存放同层级的_</span>index.md中的图片│  │  │  └─ test<span class="hljs-emphasis">_pic.png        </span><span class="hljs-emphasis">│  │  └─ _</span>index.md              //文章A下的文章B│  └─ <span class="hljs-emphasis">_index.md                 //文章A</span><span class="hljs-emphasis">└─ _</span>index.md                    //主页</code></pre><p>&emsp;&emsp;_index.md文件中 title 属性为在页面中显示的文章标题。</p><p>&emsp;&emsp;创建成功的页面预览：</p><p><img src="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/show1.png"></p><h3 id="🐭-利用css修改图片位置"><a href="#🐭-利用css修改图片位置" class="headerlink" title="🐭 利用css修改图片位置"></a>🐭 利用css修改图片位置</h3><p>&emsp;&emsp;到这里，站点配置差不多了，可以开始进行图片设置了。这里使用的方法参考了这里：<a href="https://www.jianshu.com/p/5b13d1b3ca3a">自定义 HUGO Markdown 图文混排和图片位置</a>。</p><ol><li>找到 blog\themes\hugo-theme-learn\static\css 文件夹下的 theme.css 。</li><li>打开 theme.css ，找到设置图片的css样式代码。这里的实现效果是图片视频都默认居中且会上下换行。  <pre><code class="hljs css"><span class="hljs-selector-id">#body</span> <span class="hljs-selector-tag">img</span>, <span class="hljs-selector-id">#body</span> <span class="hljs-selector-class">.video-container</span> &#123;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">3rem</span> auto;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">text-align</span>: center;&#125;</code></pre></li><li>如果我们想保留这个样式，但又想有时使图片居中，添加以下css样式到 theme.css 文件夹中：<pre><code class="hljs css"><span class="hljs-selector-id">#body</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-attr">[alt$=<span class="hljs-string">&quot;&lt;&quot;</span>]</span> &#123;    <span class="hljs-attribute">float</span>: left;&#125;<span class="hljs-selector-id">#body</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-attr">[alt$=<span class="hljs-string">&quot;&gt;&lt;&quot;</span>]</span> &#123;    <span class="hljs-attribute">float</span>: center;&#125;<span class="hljs-selector-id">#body</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-attr">[alt$=<span class="hljs-string">&quot;&gt;&quot;</span>]</span> &#123;    <span class="hljs-attribute">float</span>: right;&#125;</code></pre></li></ol><p>在markdown中写图片：</p><pre><code class="hljs markdown"><span class="hljs-section"># 图片靠左</span>![<span class="hljs-string">&lt;</span>](<span class="hljs-link">./index/test_pic.png</span>)<span class="hljs-section"># 图片居中</span>![](./index/test<span class="hljs-emphasis">_pic.png)</span><span class="hljs-emphasis"></span><span class="hljs-emphasis"># 图片靠右</span><span class="hljs-emphasis"></span><span class="hljs-emphasis">![<span class="hljs-string">&gt;</span>](<span class="hljs-link">./index/test_pic.png</span>)</span></code></pre><p>显示效果：</p><p><img src="/2020/10/29/script/%E5%9C%A8Hugo%E4%B8%AD%E4%BD%BF%E7%94%A8css%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/float.png"></p><p>也可以尝试下这种写法：</p><pre><code class="hljs css"><span class="hljs-selector-id">#body</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-attr">[src$=<span class="hljs-string">&quot;#left&quot;</span>]</span> &#123;    <span class="hljs-attribute">float</span>: left;    <span class="hljs-attribute">margin</span>: auto;    <span class="hljs-attribute">display</span>: -moz-inline-box;&#125;</code></pre><p>对应markdown：</p><pre><code class="hljs awk">![](.<span class="hljs-regexp">/index/</span>test_pic.png<span class="hljs-comment">#left)</span></code></pre><hr><p>Over~</p>]]></content>
    
    
    <categories>
      
      <category>SCRIPT</category>
      
      <category>Hogo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCRIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maya开发过程常用功能集合</title>
    <link href="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/"/>
    <url>/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于我的工作需要在Maya上进行开发，所以想总结一下自己常用的功能，以免下次自己使用的时候忘记。</p><h3 id="❌-Traceback-显示详细的报错信息"><a href="#❌-Traceback-显示详细的报错信息" class="headerlink" title="❌ Traceback 显示详细的报错信息"></a>❌ <font color="FireBrick">Traceback 显示详细的报错信息</font></h3><p>&emsp;&emsp;使用traceback类可以捕捉异常并打印信息。由于在编写代码时，经常需要import多个类，但是如果在maya的脚本编辑器中直接运行错误的代码，不一定能返回详细的报错信息，无法得知是哪一个文件哪一行的错误。下面是一个小例子。</p><ul><li><strong>创建两个文件：test.py 和 errorfile.py</strong><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> errorfile<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>():</span>    errorfile.error_func()</code></pre>  errorfile.py<pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">error_func</span>():</span>    os.makedirs(<span class="hljs-string">r&quot;C:\test_folder&quot;</span>)</code></pre></li></ul><ul><li><strong>在maya中的运行代码：</strong><ul><li>不使用traceback的代码<pre><code class="hljs python"><span class="hljs-keyword">import</span> syssys.path.insert(<span class="hljs-number">0</span>,<span class="hljs-string">r&#x27;D:\git_script&#x27;</span>)<span class="hljs-keyword">import</span> testreload(test)test.test_func()</code></pre>  报错：<br>  <font color="red"># Error: WindowsError: file C:\Program Files\Autodesk\Maya2018\bin\python27.zip\os.py line 157: 183 # </font></li><li>使用traceback的代码<pre><code class="hljs python"><span class="hljs-keyword">try</span>:    <span class="hljs-keyword">import</span> test    reload(test)    test.test_func()<span class="hljs-keyword">except</span>:    <span class="hljs-keyword">import</span> traceback    traceback.print_exc()</code></pre>  报错：<br>  <font color="red"># Traceback (most recent call last):<br>  #   File “<maya console>“, line 7, in <module><br>  #   File “D:\git_script\test.py”, line 5, in test_func<br>  #     faa.error_func()<br>  #   File “D:\git_script\errorfile.py”, line 4, in error_func<br>  #     os.makedirs(r”C:\test_folder”)<br>  #   File “C:\Program Files\Autodesk\Maya2018\bin\python27.zip\os.py”, line 157, in makedirs<br>  #     mkdir(name, mode)<br>  # WindowsError: [Error 183] : ‘C:\test_folder’  </module></maya></font></li></ul></li></ul><p>&emsp;&emsp;从上面例子可以看到，使用traceback后显示的错误信息十分完整，对于找bug十分有用。👍</p><h3 id="💡-修改参考文件的路径"><a href="#💡-修改参考文件的路径" class="headerlink" title="💡 修改参考文件的路径"></a>💡 <font color="FireBrick">修改参考文件的路径</font></h3><p>&emsp;&emsp;开发某些工具的过程中需要修改maya场景参考资产的路径，以下是cmds和pm获取reference节点以及修改路径的方法：</p><ul><li><strong>使用pm</strong><pre><code class="hljs python">pm.FileReference(rn_node).unresolvedPath()pm.FileReference(rn_node).replaceWith(new_path)</code></pre></li><li><strong>使用cmds</strong>：<pre><code class="hljs python">cmds.referenceQuery(rn_node, filename=<span class="hljs-number">1</span>)cmds.file(new_path, loadReference=rn_node)</code></pre></li></ul><h3 id="⏰-场景时间轴节点-sceneConfigurationScriptNode"><a href="#⏰-场景时间轴节点-sceneConfigurationScriptNode" class="headerlink" title="⏰ 场景时间轴节点 sceneConfigurationScriptNode"></a>⏰ <font color="FireBrick">场景时间轴节点 sceneConfigurationScriptNode</font></h3><p>&emsp;&emsp;Maya在保存文件时会记录一个记录场景时间轴信息的节点“sceneConfigurationScriptNode”，该节点可以在表达式编辑器“Expression Editor”中找到。<br><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/editor.png"></p><p>&emsp;&emsp;在属性编辑器“Attribute Editor”中，可以看到该节点的详细信息。<br><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/script_editor.png"></p><p>&emsp;&emsp;可以通过cmds.objExists()查询节点是否存在。在对选择导出时，可以把该节点一同选择导出，使场景保留时间轴信息。</p><pre><code class="hljs python">cmds.objExists(<span class="hljs-string">&#x27;sceneConfigurationScriptNode&#x27;</span>)cmds.objectType(<span class="hljs-string">&#x27;sceneConfigurationScriptNode&#x27;</span>)</code></pre><h3 id="💎-使用PySide2创建Maya置顶的窗口"><a href="#💎-使用PySide2创建Maya置顶的窗口" class="headerlink" title="💎 使用PySide2创建Maya置顶的窗口"></a>💎 <font color="FireBrick">使用PySide2创建Maya置顶的窗口</font></h3><p>&emsp;&emsp;Maya2016版本以上会自带PySide2，我们可以使用PySide2在Maya中创建窗口。</p><p>&emsp;&emsp;M该内容参考来源 <a href="https://blog.l0v0.com/%2Fposts%2F2e0af969.html">智伤帝 - Python Qt 开发教程 扩展说明</a>。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> maya.OpenMayaUI <span class="hljs-keyword">as</span> omui<span class="hljs-keyword">try</span>:    <span class="hljs-keyword">from</span> shiboken2 <span class="hljs-keyword">import</span> wrapInstance<span class="hljs-keyword">except</span> ImportError:    <span class="hljs-keyword">from</span> shiboken <span class="hljs-keyword">import</span> wrapInstance<span class="hljs-comment"># ! 这个函数可以实现将 Maya 的 UI 转换为 Qt 的 QWidget 组件</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mayaToQT</span>(<span class="hljs-params">name</span>):</span>    ptr = omui.MQtUtil.findControl(name)    <span class="hljs-keyword">if</span> ptr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        ptr = omui.MQtUtil.findLayout(name)    <span class="hljs-keyword">if</span> ptr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        ptr = omui.MQtUtil.findMenuItem(name)    <span class="hljs-keyword">if</span> ptr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">return</span> wrapInstance(long(ptr), QWidget)<span class="hljs-comment"># ! 检查窗口多开</span><span class="hljs-keyword">global</span> XG_WIN<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;XG_WIN&#x27;</span> <span class="hljs-keyword">in</span> globals():    <span class="hljs-keyword">if</span> cmds.window(XG_WIN, q=<span class="hljs-number">1</span>, ex=<span class="hljs-number">1</span>):        cmds.evalDeferred(<span class="hljs-string">&quot;cmds.deleteUI(\&quot;&quot;</span> + XG_WIN + <span class="hljs-string">&quot;\&quot;)&quot;</span>)<span class="hljs-comment"># ! 获取 Qt 窗口控件</span>tool_ui = p_xgmArchiveExportBatchUI(<span class="hljs-literal">False</span>)<span class="hljs-comment"># ! 创建 Maya 窗口</span>XG_WIN = cmds.window(title=tool_ui.windowTitle())<span class="hljs-comment"># ! 显示 Maya 窗口</span>cmds.showWindow(XG_WIN)<span class="hljs-comment"># ! Maya 窗口转换为 Qt 对象</span>ptr = mayaToQT(XG_WIN)<span class="hljs-comment"># ! Maya 窗口添加 Qt 布局</span>ptr.setLayout(QVBoxLayout())ptr.layout().setContentsMargins(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<span class="hljs-comment"># ! 把 Qt 窗口控件添加到 Maya 窗口布局中</span>ptr.layout().addWidget(tool_ui)ptr.setFixedSize(QSize(tool_ui.width(), tool_ui.height()))</code></pre><h3 id="🔎-加快Maya启动速度"><a href="#🔎-加快Maya启动速度" class="headerlink" title="🔎 加快Maya启动速度"></a>🔎 <font color="FireBrick">加快Maya启动速度</font></h3><p>&emsp;&emsp;Maya在启动时会获取服务器登陆信息，在断网的工作状态下，会由于无法联网而不断重新获取，因此会卡住一段时间，对于需要频繁打开关闭maya测试会十分影响效率。</p><p>&emsp;&emsp;在“文档\maya\2018（视下载版本而定）”文件夹的“Maya.env”文件中，添加<code>MAYA_DISABLE_CLIC_IPM=1</code>即可关闭在线登入功能，提高maya打开的速度。</p><p><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/%E5%8A%A0%E5%BF%ABmaya%E5%90%AF%E5%8A%A8.png"></p><p>&emsp;&emsp;运行以下文件可以对该电脑内所有maya版本的“Maya.env”文件添加“MAYA_DISABLE_CLIC_IPM=1”。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> ctypes<span class="hljs-keyword">from</span> ctypes.wintypes <span class="hljs-keyword">import</span> MAX_PATH<span class="hljs-keyword">import</span> win32api,win32con<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setting</span>():</span>    <span class="hljs-comment"># ! 获取文档路径</span>    dll = ctypes.windll.shell32    buf = ctypes.create_unicode_buffer(MAX_PATH + <span class="hljs-number">1</span>)    <span class="hljs-keyword">if</span> dll.SHGetSpecialFolderPathW(<span class="hljs-literal">None</span>, buf, <span class="hljs-number">0x0005</span>, <span class="hljs-literal">False</span>):        doc_path = buf.value    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    maya_path = doc_path + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;maya&#x27;</span>    maya_path = maya_path.replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(maya_path):        win32api.MessageBox(<span class="hljs-number">0</span>,<span class="hljs-string">u&#x27;文档下没有maya文件夹!&#x27;</span>, <span class="hljs-string">u&#x27;MayaEnv配置失败&#x27;</span>,win32con.MB_OK)        <span class="hljs-keyword">return</span>    <span class="hljs-comment"># ! 获取mayaenv路径</span>    maya_env_list = []    file_list = os.listdir(maya_path)    <span class="hljs-keyword">for</span> _file <span class="hljs-keyword">in</span> file_list:        match = re.match(<span class="hljs-string">&#x27;^(20\d\d)&#x27;</span>,_file)        maya_dir = maya_path + <span class="hljs-string">&#x27;/&#x27;</span> + _file        <span class="hljs-keyword">if</span> match <span class="hljs-keyword">and</span> os.path.isdir(maya_dir):            maya_env_list.append(maya_path + <span class="hljs-string">&#x27;/&#x27;</span> + _file + <span class="hljs-string">&#x27;/maya.env&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> maya_env_list:        win32api.MessageBox(<span class="hljs-number">0</span>, <span class="hljs-string">u&#x27;maya文件夹下没有对应版本的maya!&#x27;</span>, <span class="hljs-string">u&#x27;MayaEnv配置失败&#x27;</span>,win32con.MB_OK)        <span class="hljs-keyword">return</span>    setting_content = <span class="hljs-string">&#x27;MAYA_DISABLE_CLIC_IPM=1&#x27;</span>    lines = []    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> maya_env_list:        <span class="hljs-comment"># ! 添加配置</span>        <span class="hljs-keyword">with</span> open(path,<span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> fp:            content = fp.read()            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> setting_content <span class="hljs-keyword">in</span> content:                fp.seek(<span class="hljs-number">0</span>)                fp.write(<span class="hljs-string">&#x27;\n&#x27;</span> + setting_content)    win32api.MessageBox(<span class="hljs-number">0</span>, <span class="hljs-string">u&#x27;配置成功!&#x27;</span>, <span class="hljs-string">u&#x27;MayaEnv配置&#x27;</span>,win32con.MB_OK)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    setting()</code></pre><h3 id="🍒-获取Maya的runTimeCommand所在路径"><a href="#🍒-获取Maya的runTimeCommand所在路径" class="headerlink" title="🍒 获取Maya的runTimeCommand所在路径"></a>🍒 <font color="FireBrick">获取Maya的runTimeCommand所在路径</font></h3><p>&emsp;&emsp;在Maya开发经常会在一些Maya自带的功能上进行改进，假设需要对工具栏上的某个功能进行改进，如何找到这些命令的代码呢？</p><p>&emsp;&emsp;以Maya的Attach Cache为例来说明，这个命令可以通过选择需要替换的节点，指定缓存路径来替换缓存，但是只能对选择的节点进行替换。假如我们需要对场景中所有的毛发节点根据节点名称替换不同缓存，该如何实现呢？</p><p><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/ncache1.png"></p><ol><li>首先，找到这个功能的名称。通过组合键“Ctrl+Shift+左键”点击“Attach Cache”，可以把它添加到工具栏上。<br><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/ncache2.png"></li><li>在工具栏中右击该工具，选择“Edit”，打开工具编辑器。<br><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/ncache3.png"></li><li>在“Shelf Editor”中，可以通过Command面板查看到该工具使用的语言以及调用的命令。可以看到，“Attach Cache”工具用的是Mel语言，调用的命令为“attachCache”。在脚本编辑器“MEL”中运行“attachCache”，效果与直接点击该工具相同。<br><img src="/2020/10/13/maya/Maya%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/ncache4.png"></li><li>通过whatIs命令查询mel文件所在位置。  <pre><code class="hljs MEL"><span class="hljs-comment">// 直接运行</span> attachCache <span class="hljs-comment">// 查询attachCache类型</span> <span class="hljs-keyword">whatIs</span> attachCache <span class="hljs-comment">// Result: Run Time Command // </span> <span class="hljs-comment">// 查询runTimeCommand调用的方法</span> <span class="hljs-keyword">runTimeCommand</span> -q -command attachCache <span class="hljs-comment">// Result: doAttachCacheArgList(0,&#123;&#125;) // </span> <span class="hljs-comment">// 查询doAttachCacheArgList</span> <span class="hljs-keyword">whatIs</span> doAttachCacheArgList <span class="hljs-comment">// Result: Mel procedure found in: C:/Program Files/Autodesk/Maya2018/scripts/others/doAttachCacheArgList.mel //</span></code></pre></li><li>找到所在mel文件后，我们就可以查看里面的代码内容自己进行修改了~。</li></ol><p>🖌 待续未完…</p>]]></content>
    
    
    <categories>
      
      <category>Maya</category>
      
      <category>collection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>SUM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用cv2进行图像匹配</title>
    <link href="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/"/>
    <url>/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本节介绍cv2在python中的安装，及其读取、显示、保存图片功能用法。</p><h3 id="🔻-安装cv2"><a href="#🔻-安装cv2" class="headerlink" title="🔻 安装cv2"></a>🔻 安装cv2</h3><p>&emsp;&emsp;利用pip3 install 安装</p><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> opencv-python</code></pre><p>&emsp;&emsp;安装成功：</p><p><img src="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/pip%E5%AE%89%E8%A3%85.png"></p><p>😮 <font color="orange">题外话 Begin</font></p><p>&emsp;&emsp;为什么我使用pip安装时候是使用国内镜像呢？其实只需要配置一个文件即可实现默认使用国内源。在Windows系统下的具体操作如下：</p><ol><li>在用户目录“C:/Users/<font color="pink">用户名</font>”中创建一个名为“pip”的文件夹</li><li>在“pip”文件夹中新建文件“pip.ini”</li><li>在“pip.ini”文件中写入一下内容并保存   <pre><code class="hljs ini"><span class="hljs-section">[global]</span><span class="hljs-attr">index-url</span>=https://pypi.tuna.tsinghua.edu.cn/simple <span class="hljs-section">[install]</span>  <span class="hljs-attr">trusted-host</span>=pypi.tuna.tsinghua.edu.cn<span class="hljs-attr">disable-pip-version-check</span> = <span class="hljs-literal">true</span>  <span class="hljs-attr">timeout</span> = <span class="hljs-number">6000</span></code></pre></li><li>之后使用pip安装的库都会默认下载清华国内源啦</li></ol><p>😮 <font color="orange">题外话 Over</font></p><p>&emsp;&emsp;现在，我们可以在python3中导入cv2这个库了。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2</code></pre><h3 id="👀-读取、显示、保存图像"><a href="#👀-读取、显示、保存图像" class="headerlink" title="👀 读取、显示、保存图像"></a>👀 读取、显示、保存图像</h3><p>参考：<a href="https://blog.csdn.net/qq_42079689/article/details/102535329">https://blog.csdn.net/qq_42079689/article/details/102535329</a></p><h4 id="读取图像-cv2-imread-filepath-flags"><a href="#读取图像-cv2-imread-filepath-flags" class="headerlink" title="读取图像 cv2.imread(filepath,flags)"></a><font color="pink">读取图像 cv2.imread(filepath,flags)</font></h4><ul><li>filepath：读入图像路径（索引地址）</li><li>flags：用于指定以什么样的格式来读取图像<ul><li>flags = 1 / cv2.IMREAD_UNCHANGED：采用保持原始格式的方式读取图像。默认参数。</li><li>flags = 2 / cv2.IMREAD_GRAYSCALE：以灰度图像格式读取图像。无论原始图像原来是什么格式，读取后都的结果都转变为灰度图像。</li><li>flags = 3 / cv2.IMREAD_COLOR：以BGR格式读取图像。无论原始图像原来是什么格式，读取后都的结果都转变为BGR形式的三通道图像。</li></ul></li></ul><p>需要特别注意的是：cv2.imread()函数读取RGB图像时，返回的图像格式的通道并不是按R、G、B排列的，而是按B、G、R顺序排列的。</p><h4 id="显示图像-cv2-imshow-wname-img"><a href="#显示图像-cv2-imshow-wname-img" class="headerlink" title="显示图像 cv2.imshow(wname,img)"></a><font color="pink">显示图像 cv2.imshow(wname,img)</font></h4><ul><li>wname：显示窗口的名字</li><li>img：需要显示的图像（使用imread读入）</li></ul><h4 id="保存图像-cv2-imwrite-file，img，num"><a href="#保存图像-cv2-imwrite-file，img，num" class="headerlink" title="保存图像 cv2.imwrite(file，img，num)"></a><font color="pink">保存图像 cv2.imwrite(file，img，num)</font></h4><ul><li><p>file：要保存的文件名</p></li><li><p>img：需要保存的图像（使用imread读入）</p></li><li><p>num：可选参数，针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95；对于png 第三个参数表示的是压缩级别，默认为3。</p><ul><li>cv2.IMWRITE_JPEG_QUALITY类型为 long ,必须转换成 int</li><li>cv2.IMWRITE_PNG_COMPRESSION, 从0到9 压缩级别越高图像越小</li></ul></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a><font color="orange">实例</font></h4><p>&emsp;&emsp;以“sky.jpg”图片为例进行图像读取、显示及保存。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> cv2<span class="hljs-comment"># ! 读入一张图像，读取方式为灰度模式</span>img = cv2.imread(<span class="hljs-string">&#x27;sky.jpg&#x27;</span>,cv2.IMREAD_GRAYSCALE)<span class="hljs-comment"># ! 显示读入的图像，并设置窗口名为“sky_image”</span>cv2.imshow(<span class="hljs-string">&#x27;sky_image&#x27;</span>,img)<span class="hljs-comment"># ! 等待键盘输入，单位为毫秒，即等待指定的毫秒数看是否有键盘输入</span><span class="hljs-comment"># ! 若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。若没有按下任何键，超时后返回-1。参数为0表示无限等待。</span><span class="hljs-comment"># ! 不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。</span>cv2.waitKey(<span class="hljs-number">0</span>)<span class="hljs-comment"># ! 销毁指定窗口</span>cv2.destroyWindow(<span class="hljs-string">&#x27;sky_image&#x27;</span>)<span class="hljs-comment"># ! 销毁所有窗口</span><span class="hljs-comment"># cv2.destroyAllWindow()</span><span class="hljs-comment"># ! 保存图像</span>cv2.imwrite(<span class="hljs-string">&#x27;sky_1.jpeg&#x27;</span>,img, [int( cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">95</span>])cv2.imwrite(<span class="hljs-string">&#x27;sky_2.png&#x27;</span>,img, [int(cv2.IMWRITE_PNG_COMPRESSION), <span class="hljs-number">9</span>])</code></pre><p>运行后显示图片：</p><p><img src="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/%E6%98%BE%E7%A4%BA%E7%9A%84%E5%9B%BE%E5%83%8F.png"></p><p>运行结束后保存图片：</p><p><img src="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/%E4%BF%9D%E5%AD%98%E7%9A%84%E5%9B%BE%E5%83%8F.png"></p><h3 id="🎆-翻转、复制、颜色空间转换图像"><a href="#🎆-翻转、复制、颜色空间转换图像" class="headerlink" title="🎆 翻转、复制、颜色空间转换图像"></a>🎆 翻转、复制、颜色空间转换图像</h3><p>参考：<a href="https://blog.csdn.net/djcxym/article/details/52097812">https://blog.csdn.net/djcxym/article/details/52097812</a></p><h4 id="翻转图像-cv2-flip-img-flipcode"><a href="#翻转图像-cv2-flip-img-flipcode" class="headerlink" title="翻转图像 cv2.flip(img,flipcode)"></a><font color="pink">翻转图像 cv2.flip(img,flipcode)</font></h4><ul><li>img：需要翻转的图像（使用imread读入）</li><li>flipcode：控制翻转效果<ul><li>flipcode = 0：沿x轴翻转</li><li>flipcode &gt; 0：沿y轴翻转</li><li>flipcode &lt; 0：x,y轴同时翻转</li></ul></li></ul><pre><code class="hljs python"><span class="hljs-comment"># ! 翻转图像</span>img = cv2.flip(img,<span class="hljs-number">0</span>)</code></pre><h4 id="复制图像-cv2-flip-img-flipcode"><a href="#复制图像-cv2-flip-img-flipcode" class="headerlink" title="复制图像 cv2.flip(img,flipcode)"></a><font color="pink">复制图像 cv2.flip(img,flipcode)</font></h4><pre><code class="hljs python">imgcopy = img.copy()</code></pre><h4 id="颜色空间转化-cv2-flip-img-flipcode"><a href="#颜色空间转化-cv2-flip-img-flipcode" class="headerlink" title="颜色空间转化 cv2.flip(img,flipcode)"></a><font color="pink">颜色空间转化 cv2.flip(img,flipcode)</font></h4><pre><code class="hljs python"><span class="hljs-comment"># 彩色图像转为灰度图像</span>img2 = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) <span class="hljs-comment"># 灰度图像转为彩色图像</span>img3 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)<span class="hljs-comment"># cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS</span></code></pre><h3 id="🔍-图像匹配"><a href="#🔍-图像匹配" class="headerlink" title="🔍 图像匹配"></a>🔍 图像匹配</h3><p>参考：<a href="https://blog.csdn.net/zhusongziye/article/details/93393725">https://blog.csdn.net/zhusongziye/article/details/93393725</a></p><h4 id="模版匹配-cv2-matchTemplate"><a href="#模版匹配-cv2-matchTemplate" class="headerlink" title="模版匹配 cv2.matchTemplate()"></a><font color="pink">模版匹配 cv2.matchTemplate()</font></h4><p>&emsp;&emsp;在模板和输入图像之间寻找匹配，获得匹配结果图像。</p><p>&emsp;&emsp;模板匹配具有自身的局限性，主要表现在它只能进行平行移动，若原图像中的匹配目标发生旋转或大小变化，该算法无效。</p><p><img src="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/%E6%A8%A1%E7%89%88%E5%8C%B9%E9%85%8D.png"></p><p>&emsp;&emsp;其中模板匹配的算法：</p><ol><li>利用平方差来进行匹配，最好匹配为0。匹配越差，匹配值越大。<ul><li>平方差匹配：CV_TM_SQDIFF</li><li>标准平方差匹配：CV_TM_SQDIFF_NORMED</li></ul></li><li>采用模板和图像间的乘法操作，得出数值越大表示匹配程度较高，0为最坏匹配。<ul><li>相关匹配：CV_TM_CCORR</li><li>标准相关匹配：CV_TM_CCORR_NORMED</li></ul></li><li>将模版对其均值的相对值与图像对其均值的相关值进行匹配，1表示完美匹配，-1表示糟糕的匹配，0表示没有任何相关性(随机序列)。<ul><li>相关系数匹配：CV_TM_CCOEFF</li><li>标准相关系数匹配：CV_TM_CCOEFF_NORMED</li></ul></li></ol><p>&emsp;&emsp;标准化意味着将数值统一到0~1。除了平方差类型的是值越小越好，其他的都是值越大越好。</p><h4 id="找出矩阵最大值和最小值的位置-cv2-minMaxLoc"><a href="#找出矩阵最大值和最小值的位置-cv2-minMaxLoc" class="headerlink" title="找出矩阵最大值和最小值的位置 cv2.minMaxLoc()"></a><font color="pink">找出矩阵最大值和最小值的位置 cv2.minMaxLoc()</font></h4><p>&emsp;&emsp;在给定的矩阵中寻找最大和最小值，并给出它们的位置。</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><font color="orange">实例</font></h4><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> cv2<span class="hljs-comment"># ! 读取匹配图像</span>img = cv2.imread(<span class="hljs-string">&#x27;sky.jpg&#x27;</span>,<span class="hljs-number">1</span>)<span class="hljs-comment"># ! 读取模版图像</span>temple = cv2.imread(<span class="hljs-string">&#x27;people.png&#x27;</span>,<span class="hljs-number">1</span>)<span class="hljs-comment"># ! 获取匹配图像的宽高</span>ih, iw = img.shape[:<span class="hljs-number">2</span>]<span class="hljs-comment"># ! 获取模版图像的宽高</span>th, tw = temple.shape[:<span class="hljs-number">2</span>]<span class="hljs-comment"># ! 使用标准相关系数匹配，返回一个矩阵</span>result = cv2.matchTemplate(img, temple, cv2.TM_CCOEFF_NORMED)<span class="hljs-comment"># ! 获取矩阵的最大值和最小值，以及其位置</span>min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)<span class="hljs-comment"># ! 此处选取最大值的位置,即匹配结果图像的左上角</span>tl = max_loc<span class="hljs-comment"># ! 根据模版大小，得出匹配结果图像的右下角</span>br = (tl[<span class="hljs-number">0</span>]+tw, tl[<span class="hljs-number">1</span>]+th)<span class="hljs-comment"># ! 绘制矩形框</span>cv2.rectangle(img, tl, br, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<span class="hljs-comment"># ! 显示匹配结果窗口</span>cv2.namedWindow(<span class="hljs-string">&#x27;match&#x27;</span>, <span class="hljs-number">0</span>)cv2.resizeWindow(<span class="hljs-string">&#x27;match&#x27;</span>, iw, ih)cv2.imshow(<span class="hljs-string">&#x27;match&#x27;</span>, img)cv2.waitKey(<span class="hljs-number">0</span>)</code></pre><p>&emsp;&emsp;图像显示的匹配结果：</p><p><img src="/2020/10/12/script/python/cv2/%E4%BD%BF%E7%94%A8cv2%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C.png"></p>]]></content>
    
    
    <categories>
      
      <category>SCRIPT</category>
      
      <category>cv2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCRIPT</tag>
      
      <tag>PYTHON</tag>
      
      <tag>cv2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maya制作文件问题集合</title>
    <link href="/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <url>/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于工作中经常遇到Maya中奇奇怪怪的问题上，所以总结一下一些遇到的小问题。</p><h3 id="🎥-文件中多余的相机无法删除"><a href="#🎥-文件中多余的相机无法删除" class="headerlink" title="🎥 文件中多余的相机无法删除"></a>🎥 <font color="FireBrick">文件中多余的相机无法删除</font></h3><p><img src="/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/%E7%9B%B8%E6%9C%BA%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4.png"></p><p>&emsp;&emsp;<font color="orange">原因：</font>相机重复出现可能是因为在导入或参考时出错了，需要把相机设置成非默认摄像机才可以删除。</p><p>&emsp;&emsp;<font color="orange">解决：</font>选中需要删除的相机执行。</p><pre><code class="hljs mel"><span class="hljs-comment">// MEL</span><span class="hljs-keyword">string</span> $selection[] = <span class="hljs-string">`ls -selection -long`</span>;<span class="hljs-keyword">string</span> $object;<span class="hljs-keyword">for</span> ( $object <span class="hljs-keyword">in</span> $selection ) &#123;<span class="hljs-keyword">camera</span> -e -startupCamera false $object;<span class="hljs-keyword">lockNode</span> -lock off $object;<span class="hljs-keyword">delete</span> $object;&#125;</code></pre><pre><code class="hljs python"><span class="hljs-comment"># python</span>cams = cmds.ls(sl=<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span> cam <span class="hljs-keyword">in</span> cams:cmds.camera(cam,startupCamera=<span class="hljs-number">0</span>,edit=<span class="hljs-number">1</span>)cmds.lockNode(cam,lock=<span class="hljs-number">0</span>)cmds.delete(cam)</code></pre><h3 id="🌄-内存不足，纹理加载失败警告"><a href="#🌄-内存不足，纹理加载失败警告" class="headerlink" title="🌄 内存不足，纹理加载失败警告"></a>🌄 <font color="FireBrick">内存不足，纹理加载失败警告</font></h3><p>&emsp;&emsp;<font color="orange">原因：</font>场景中包含多个高分辨率纹理，以致您的显卡没有足够的内存来处理，则不会加载这些纹理并以非纹理模式显示该场景。</p><p>&emsp;&emsp;<font color="orange">解决：</font></p><ol><li>选择渲染器 &gt; Viewport 2.0 (Renderer &gt; Viewport 2.0) &gt; 。<br><img src="/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/vp%E6%B8%B2%E6%9F%93%E5%99%A8.png"></li><li>在“最大纹理分辨率钳制”(Maximum Texture Resolution Clamping)下，启用“钳制纹理分辨率”(Clamp Texture Resolution)并减小“最大纹理分辨率”(Max Texture Resolution)。<br><img src="/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/%E8%AE%BE%E7%BD%AE%E6%9C%80%E5%A4%A7%E7%BA%B9%E7%90%86%E5%88%86%E8%BE%A8%E7%8E%87.png"></li><li>单击“重新加载所有纹理”(Re-load All Textures)。</li><li>在带纹理的模式的场景视图中按 6。</li></ol><p>&emsp;&emsp;<font color="orange">官方解决方式参考：</font></p><p><img src="/2020/10/12/maya/Maya%E5%88%B6%E4%BD%9C%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/%E7%BA%B9%E7%90%86%E5%AE%98%E6%96%B9%E8%A7%A3%E5%86%B3.png"></p><p>🖌 待续未完…</p>]]></content>
    
    
    <categories>
      
      <category>Maya</category>
      
      <category>collection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>SUM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具架界面开发</title>
    <link href="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    <url>/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近有一个任务是开发工具架，主要功能为工具的显示和编辑。由于这次开发涉及未接触过的知识点比较多，而且对美观设计方面也有所欠缺，因此开发周期比较长，但收获良多。</p><p>&emsp;&emsp;Qt是跨平台的，虽然该工具主要是在 Maya 中使用，但是同样可以拓展到其他平台上。在开发这个工具的过程中更加深入学习了 Qt 的 MVC 框架以及对接数据库的 QSql 相关的知识，下面详细讲一下这个工具过程和演示。</p><hr><h1 id="🐙-工具展示"><a href="#🐙-工具展示" class="headerlink" title="🐙 工具展示"></a>🐙 工具展示</h1><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><ul><li>用户界面<br>用户模式主要进行工具的调用。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/1.png"></li><li>管理员界面<br>管理员模式主要进行工具的编辑，功能包括工具的增加、删除、修改、移动、改变分组。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/2.png"></li></ul><hr><h2 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h2><ol><li>切换组分类<br>通过点击组选项框，选择需要切换的组名，即可更改视图中显示的工具为所选组内的工具。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/14.gif"></li><li>搜索工具<br>通过在搜索框中输入需要搜索的工具名称或备注信息，即可从视图中筛选符合搜索条件的工具并显示。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/15.gif"></li><li>切换用户模式与管理员模式<br>可以通过点击设置菜单中的“进入用户/管理员模式”进行工具模式切换。<br>当工具首次进入管理员模式时会要求输入密码，只有在密码输入正确后才能进入管理员模式，在下次初始化工具前不需要重新输入密码进入管理员模式。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/17.gif"></li><li>折叠界面<br>可以通过点击工具右上角的 “-” 按钮，把界面进行折叠或者展开。折叠后的标题栏可以点击进行拖拽。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/22.gif"></li><li>窗口拖拽<br>可以在界面空白处按住鼠标左键并移动鼠标，实现界面拖拽功能。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/23.gif"></li><li>窗口缩放<br>可以把鼠标移动到窗口边缘，当鼠标出现缩放样式时，可以按住鼠标左键并移动鼠标，实现界面缩放功能。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/24.gif"></li></ol><hr><h2 id="用户功能展示"><a href="#用户功能展示" class="headerlink" title="用户功能展示"></a>用户功能展示</h2><ol><li>切换视图显示模式<br>在用户模式下，工具视图显示模式有列表显示和图标显示两种，可以通过点击设置菜单上的“切换显示模式”，对视图的显示模式进行交替更换。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/3.gif"></li><li>调节视图显示比例<br>在用户模式下，可以通过滑动设置菜单上的“调节显示比例”的滑动条，对视图的显示比例进行缩放。<br>不同显示模式视图的缩放值完全独立，调节比例时仅对当前显示模式视图生效，不影响其他显示模式比例。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/4.gif"></li><li>查看备注<br>在用户模式下，当鼠标悬停在工具上，会弹出该工具的备注。<br>对于设置了说明文档链接的工具，还可以点击“Help”打开说明链接。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/16.gif"></li><li>运行工具<br>&emsp;&emsp;单击用户界面中的工具即可运行选中工具。</li></ol><hr><h2 id="管理员功能展示"><a href="#管理员功能展示" class="headerlink" title="管理员功能展示"></a>管理员功能展示</h2><h3 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h3><ol><li>在当前行前插入工具<br>在管理员模式下，选中其中一行工具，点击图示“添加”按钮，可以在选中行前插入一行新工具。<br>如果当前组不是 All 组，创建的工具会自动加入到 All 组中。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/5.gif"></li><li>删除当前行的工具<br>在管理员模式下，选中需要移除的工具，点击图示“删除”按钮，可以删除选中行的工具。<br>删除工具会把工具从所有组中移除。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/6.gif"></li><li>上移当前行<br>在管理员模式下，选择需要上移的工具行，点击图示“上移”按钮，可以把选中工具上移一位。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/7.gif"></li><li>下移当前行<br>在管理员模式下，选择需要下移的工具行，点击图示“下移”按钮，可以把选中工具下移一位。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/8.gif"></li><li>拖拽移动行<br>在管理员模式下，鼠标左键按住需要拖拽移动的工具行，按住拖动鼠标到需要插入的行位置后松开鼠标左键，可以把工具移动到指定行位置。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/13.gif"></li><li>编辑工具内容<br>在管理员模式下，鼠标左键双击选中需要编辑的内容，可以编辑当前工具。其中 使用次数、 tid 和 tdatetime 为不可编辑列。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/21.gif"></li></ol><h3 id="运行工具和打开工具帮助"><a href="#运行工具和打开工具帮助" class="headerlink" title="运行工具和打开工具帮助"></a>运行工具和打开工具帮助</h3><ol><li>运行工具<br>在管理员模式下，右键点击选中工具，在弹出菜单中选择“运行工具”，即可运行选中工具。  </li><li>打开帮助<br>在管理员模式下，右键点击选中工具，在弹出菜单中选择“打开帮助”，即可打开选中工具的帮助文档。  </li></ol><h3 id="修改工具的分组"><a href="#修改工具的分组" class="headerlink" title="修改工具的分组"></a>修改工具的分组</h3><ol><li>添加到组<br>在管理员模式下，右键点击选中工具，在弹出菜单中选择“添加到组”，弹出列表会显示除了当前组、 All 组以及 Unsorted 组外的其他组，选择需要添加的组，可以把选中工具添加到选择的组内。<br>“添加到组”功能不会把工具从原来的组中移除，而是直接在需要添加的组中添加该工具。<br>假如选中工具已经存在于需要添加的组，则会跳过添加操作。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/18.gif"></li><li>移动到组<br>在管理员模式下，右键点击选中工具，在弹出菜单中选择“移动到组”，弹出列表会显示除了当前组、 All 组以及 Unsorted 组外的其他组，选择需要移动的组，可以把选中工具移动到选择的组内。<br>“移动到组”功能会把工具从原来组中移除，并在需要移动的组中添加该工具。<br>假如选中工具已经存在于需要移动的组，则会跳过添加操作，但仍会从原来组中移除。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/19.gif"></li><li>移出该组<br>在管理员模式下，右键点击选中工具，在弹出菜单中选择“移出该组”，可以把工具从当前组中移除。<br>与“删除工具”不同的是，“删除工具”会把工具从所有组中删除，而“移出该组”只会把工具从该组中移除，而不会影响工具在其他组的存在情况。<br>假如工具在该组中移除后不存在于除了 All 组外的任何其他分组，则工具会自动添加到 Unsorted 分组中。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/20.gif"></li></ol><h3 id="编辑组"><a href="#编辑组" class="headerlink" title="编辑组"></a>编辑组</h3><p>在管理员模式下，点击“编辑组”按钮，会弹出编辑组窗口界面。我们可以在界面中查看到已经创建的组名，以及进行添加新组、删除组和重命名组操作。编辑组中的组会同步到工具的分组中。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/9.gif">   </p><ol><li>添加新组<br>在打开的编辑组窗口中，点击“添加组”按钮，会弹出需要输入新组名的窗口，在窗口中输入需要创建的组名后，点击“OK”按钮，即可把在组列表最下方创建一个新组。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/10.gif"></li><li>删除组<br>在打开的编辑组窗口中，选择需要删除的组，点击“删除组”按钮，会弹出提示框：“确定删除 xxx 组？删除后未分类工具会移动到 Unsorted 组”。点击提示框的“Ok”按钮，即可删除选中组。<br>假如选中组中存在多个工具，则会判断每个工具是否存在与别的组中，如果工具不存在于任何组（“All”组除外），则会把工具移动到 Unsorted 未分类组中。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/11.gif"></li><li>重命名组<br>在打开的编辑窗口中，选择需要重命名的组，点击“重命名组”，会弹出需要输入新组名的窗口，在窗口中输入新组名后，点击“Ok”按钮，即可把选中组重命名。<br><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/12.gif"></li></ol><hr><h1 id="🐝-数据结构"><a href="#🐝-数据结构" class="headerlink" title="🐝 数据结构"></a>🐝 数据结构</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>&emsp;&emsp;本来一开始是计划用 PostgreSQL 来实现的，但是由于 Maya 的 PySide2 中没有 PSql 的驱动，本来使用 PSql 已经开发一半了，也无奈被迫中止，转用 sqlite 。</p><p>&emsp;&emsp;至于 Model ，一开始不清楚 Qt 有直接处理数据库的类，使用了传统的 QAbstractTableModel 结合自定义 Node 类型节点实现显示。虽然也可以正常显示数据，但是在得知可以使用 QSqlTableModel 直接操作数据库数据后，就舍弃了传统模型，改用 QSqlTableModel 了。</p><h3 id="PSQL"><a href="#PSQL" class="headerlink" title="PSQL"></a>PSQL</h3><p>&emsp;&emsp;虽然最终并没有使用 Psql ，但是毕竟投入了一点时间进行研究，所以还是记录一下 Psql 中的开发使用吧。</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>&emsp;&emsp;使用 pgAdmin 4 创建数据库。</p><h4 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h4><pre><code class="hljs Python"><span class="hljs-keyword">import</span> psycopg2conn = psycopg2.connect(                database=<span class="hljs-string">&#x27;database name&#x27;</span>,                user=<span class="hljs-string">&#x27;user name&#x27;</span>,                password=<span class="hljs-string">&#x27;database password&#x27;</span>,                host=<span class="hljs-string">&#x27;your host&#x27;</span>,                port=<span class="hljs-string">&#x27;your port&#x27;</span>)TOOL_TABLE = <span class="hljs-string">&#x27;public.tool_manager&#x27;</span></code></pre><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_data</span>(<span class="hljs-params">conn, table, tname, tcommand, tlocation, ttooltip=<span class="hljs-string">&#x27;&#x27;</span>,  tenabled=True, ticon=<span class="hljs-string">&#x27;&#x27;</span>, thelp=<span class="hljs-string">&#x27;&#x27;</span>, tgitlab=<span class="hljs-string">&#x27;&#x27;</span>, tused=<span class="hljs-number">0</span>, tid=<span class="hljs-number">0</span>, tdatetime=<span class="hljs-string">&#x27;&#x27;</span></span>):</span>    cursor = conn.cursor()    cursor.execute(<span class="hljs-string">&quot;INSERT INTO &#123;&#125;(tname, ttooltip, tcommand, tenabled, ticon, tlocation, thelp, tgitlab, tused, tid, tdate) \</span><span class="hljs-string">        VALUES(&#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#x27;&#123;&#125;&#x27;, &#123;&#125;, &#123;&#125;, &#x27;&#123;&#125;&#x27;)&quot;</span>.format(            table, tname, ttooltip.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), tcommand, tenabled, ticon, tlocation, thelp, tgitlab, tused, tid, tdatetime        ))insert_data(conn, <span class="hljs-string">&#x27;public.group_&#123;&#125;&#x27;</span>.format(tgroups.lower().replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>)), tname=tname, tcommand=tcommand, tlocation=tlocation, ttooltip=ttooltip, ticon=ticon, tenabled=tenabled, thelp=thelp, tused=tused, tid=tid, tdatetime=tdatetime)</code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_data</span>(<span class="hljs-params">conn, table, condition_key, condition_value</span>):</span>    cursor = conn.cursor()    cursor.execute(<span class="hljs-string">&quot;DELETE FROM &#123;&#125; \</span><span class="hljs-string">        WHERE &#123;&#125;=&#x27;&#123;&#125;&#x27;&quot;</span>.format(table, condition_key, condition_value))delete_data(conn, TOOL_TABLE, <span class="hljs-string">&#x27;tname&#x27;</span>, <span class="hljs-string">&#x27;first_tool&#x27;</span>)</code></pre><h4 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h4><p>&emsp;&emsp;truncate 方法在 sqlite 是没有的。</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">truncate_table</span>(<span class="hljs-params">conn, table</span>):</span>    cursor = conn.cursor()    cursor.execute(<span class="hljs-string">&quot;truncate &#123;&#125;&quot;</span>.format(table))truncate_table(TOOL_TABLE)</code></pre><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_data</span>(<span class="hljs-params">conn, table, key, condition=<span class="hljs-string">&#x27;&#x27;</span></span>):</span>    cursor = conn.cursor()    <span class="hljs-keyword">if</span> condition:        cursor.execute(<span class="hljs-string">&quot;SELECT &#123;&#125; from &#123;&#125; where &#123;&#125;&quot;</span>.format(key, table, condition))    <span class="hljs-keyword">else</span>:        cursor.execute(<span class="hljs-string">&quot;SELECT &#123;&#125; from &#123;&#125;&quot;</span>.format(key, table))    data = cursor.fetchall()    <span class="hljs-keyword">return</span> dataquery_data(conn, TOOL_TABLE, <span class="hljs-string">&#x27;tname&#x27;</span>)</code></pre><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_data</span>(<span class="hljs-params">conn, table, key, value, condition</span>):</span>    cursor = conn.cursor()    <span class="hljs-keyword">try</span>:        cursor.execute(<span class="hljs-string">&quot;UPDATE &#123;&#125; SET &#123;&#125;=&#x27;&#123;&#125;&#x27; WHERE &#123;&#125;;&quot;</span>.format(table, key, value.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), condition))    <span class="hljs-keyword">except</span>:        cursor.execute(<span class="hljs-string">&quot;UPDATE &#123;&#125; SET &#123;&#125;=&#123;&#125; WHERE &#123;&#125;;&quot;</span>.format(table, key, value, condition))update_data(conn, TOOL_TABLE, <span class="hljs-string">&#x27;thelp&#x27;</span>, thelp, <span class="hljs-string">&quot;tname=&#x27;&#123;&#125;&#x27;&quot;</span>.format(tname))</code></pre><hr><h3 id="SQlite"><a href="#SQlite" class="headerlink" title="SQlite"></a>SQlite</h3><p>&emsp;&emsp;SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。</p><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>&emsp;&emsp;SQLite 可以指定数据库位置，假如位置不存在则会自动创建一个数据库。</p><pre><code class="hljs Python">TOOLS_DB = <span class="hljs-string">&#x27;tools.db&#x27;</span>conn = sqlite3.connect(TOOLS_DB)cursor = conn.cursor()</code></pre><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>&emsp;&emsp;SQLite 没有单独的 Boolean 存储类。相反，布尔值被存储为整数 0（false）和 1（true）。</p><p>&emsp;&emsp;SQLite 没有一个单独的用于存储日期和/或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span>(<span class="hljs-params">table_name</span>):</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select name from sqlite_master where type=&#x27;table&#x27; order by name;&#x27;&#x27;&#x27;</span>)    table_tuples = cursor.fetchall()    <span class="hljs-keyword">if</span> tuple([table_name]) <span class="hljs-keyword">in</span> table_tuples:        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;create table &#123;&#125;(</span><span class="hljs-string">        tname       text,</span><span class="hljs-string">        ttooltip    text,</span><span class="hljs-string">        tenabled    boolean,</span><span class="hljs-string">        tsetup      boolean,</span><span class="hljs-string">        tcommand    text,</span><span class="hljs-string">        ticon       text,</span><span class="hljs-string">        tlocation   text,</span><span class="hljs-string">        thelp       text,</span><span class="hljs-string">        tgitlab     text,</span><span class="hljs-string">        tused       integer,</span><span class="hljs-string">        tid         integer,</span><span class="hljs-string">        tdate       text</span><span class="hljs-string">        );&#x27;&#x27;&#x27;</span>.format(table_name))    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>create_table(<span class="hljs-string">&#x27;group_all&#x27;</span>)</code></pre><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>&emsp;&emsp;SQLite 的 DROP TABLE 语句用来删除表定义及其所有相关数据、索引、触发器、约束和该表的权限规范。</p><p>&emsp;&emsp;使用此命令时要特别注意，因为一旦一个表被删除，表中所有信息也将永远丢失。</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drop_table</span>(<span class="hljs-params">table_name</span>):</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;DROP TABLE &#123;&#125;;&#x27;&#x27;&#x27;</span>.format(table_name))drop_table(<span class="hljs-string">&#x27;group_all&#x27;</span>)</code></pre><h4 id="重命名表名"><a href="#重命名表名" class="headerlink" title="重命名表名"></a>重命名表名</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rename_table</span>(<span class="hljs-params">old_table, new_table</span>):</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;select name from sqlite_master where type=&#x27;table&#x27; order by name;&#x27;&#x27;&#x27;</span>)    table_tuples = cursor.fetchall()    <span class="hljs-keyword">if</span> tuple([new_table]) <span class="hljs-keyword">in</span> table_tuples:        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;ALTER TABLE &#123;&#125; RENAME TO &#123;&#125;;&#x27;&#x27;&#x27;</span>.format(old_table, new_table))    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>rename_table(<span class="hljs-string">&#x27;old&#x27;</span>, <span class="hljs-string">&#x27;new&#x27;</span>)</code></pre><h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><p>&emsp;&emsp;在 SQLite 中，并没有 TRUNCATE TABLE 命令，但可以使用 SQLite 的 DELETE 命令从已有的表中删除全部的数据。</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">truncate_table</span>(<span class="hljs-params">table</span>):</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;delete from &#123;&#125;;&#x27;&#x27;&#x27;</span>.format(table))truncate_table(<span class="hljs-string">&#x27;group_all&#x27;</span>)</code></pre><h4 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_record</span>(<span class="hljs-params">table, tname=<span class="hljs-string">&#x27;NewTool&#x27;</span>, tcommand=<span class="hljs-string">&#x27;&lt;Command&gt;&#x27;</span>, tlocation=<span class="hljs-string">&#x27;&lt;Location&gt;&#x27;</span>, ttooltip=<span class="hljs-string">&#x27;&lt;ToolTip&gt;&#x27;</span>,  tenabled=True, ticon=<span class="hljs-string">&#x27;&lt;Icon&gt;&#x27;</span>, thelp=<span class="hljs-string">&#x27;&lt;Help&gt;&#x27;</span>, tgitlab=<span class="hljs-string">&#x27;&lt;Gitlab&gt;&#x27;</span>, tused=<span class="hljs-number">0</span>, tid=<span class="hljs-number">0</span>, tdate=<span class="hljs-string">&#x27;&#x27;</span>, tsetup=False</span>):</span>    cursor.execute(<span class="hljs-string">&#x27;&#x27;&#x27;insert into &#123;&#125;(tname, ttooltip, tenabled, tsetup, tcommand, ticon, tlocation, thelp, tgitlab, tused, tid, tdate)</span><span class="hljs-string">        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?</span><span class="hljs-string">        )&#x27;&#x27;&#x27;</span>.format(table), (tname, ttooltip, tenabled, tsetup, tcommand, ticon, tlocation, thelp, tgitlab, tused, tid, tdate))insert_record(<span class="hljs-string">&#x27;group_&#123;&#125;&#x27;</span>.format(tgroups.lower().replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>)), tname=tname, tcommand=tcommand, tlocation=tlocation, ttooltip=ttooltip, ticon=ticon, tenabled=tenabled, thelp=thelp, tused=tused, tid=tid, tdate=tdatetime, tsetup=tsetup)</code></pre><hr><h2 id="QSqlTableModel"><a href="#QSqlTableModel" class="headerlink" title="QSqlTableModel"></a>QSqlTableModel</h2><p>&emsp;&emsp;QSqlTableModel 可以作为 QTableView 的数据源。</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><pre><code class="hljs Python">TOOLS_DB = <span class="hljs-string">&#x27;tools.db&#x27;</span><span class="hljs-meta">@staticmethod</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sql_db</span>():</span>    <span class="hljs-keyword">if</span> QSqlDatabase.contains(<span class="hljs-string">&quot;qt_sql_default_connection&quot;</span>):        db = QSqlDatabase.database(<span class="hljs-string">&quot;qt_sql_default_connection&quot;</span>)    <span class="hljs-keyword">else</span>:        db = QSqlDatabase.addDatabase(<span class="hljs-string">&quot;QSQLITE&quot;</span>)            db.setDatabaseName(TOOLS_DB)    <span class="hljs-keyword">if</span> db.open():        <span class="hljs-keyword">return</span> db    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> QSqlDatabase()</code></pre><h3 id="设置编辑策略"><a href="#设置编辑策略" class="headerlink" title="设置编辑策略"></a>设置编辑策略</h3><p>QSqlTableModel.setEditStrategy(strategy)</p><p>参数为枚举类型：</p><ul><li>OnFieldChange 字段值变化时立即更新到数据库</li><li>OnRowChange 当前行变化时更新到数据库</li><li>OnManualSubmit  所有修改暂时缓存，手动调用submitAll保存</li></ul><pre><code class="hljs Python">self.setEditStrategy(QSqlTableModel.OnManualSubmit)</code></pre><hr><h1 id="⭐-具体功能详解"><a href="#⭐-具体功能详解" class="headerlink" title="⭐ 具体功能详解"></a>⭐ 具体功能详解</h1><h2 id="MVC-框架-显示工具数据"><a href="#MVC-框架-显示工具数据" class="headerlink" title="MVC 框架 显示工具数据"></a>MVC 框架 显示工具数据</h2><p>&emsp;&emsp;经典 MVC 模式中，M 是指业务模型，V 是指用户界面，C 则是控制器，使用 MVC 的目的是将 M 和 V 的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View 的定义比较清晰，就是用户界面。</p><p>&emsp;&emsp;在 Qt 中的 MVC 并不叫MVC，而是叫“MVD”，Qt中没有 Controller 的说法，而是使用了另外一种抽象: Delegate (委托) ，其行为和传统的 MVC 是相同的。</p><p>&emsp;&emsp;在本工具中，View 使用了 QListView（用户界面）和 QTableView（管理员界面），Model 使用了 QSqlTableModel，Delegate 使用了 QStyledItemDelegate（combobox 显示 data）。</p><h3 id="工具视图-ToolView"><a href="#工具视图-ToolView" class="headerlink" title="工具视图 ToolView"></a>工具视图 ToolView</h3><p>&emsp;&emsp;继承架构：</p><p><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/ToolView%E7%BB%A7%E6%89%BF%E5%9B%BE.jpg"></p><h3 id="数据模型-sqlTableModel"><a href="#数据模型-sqlTableModel" class="headerlink" title="数据模型 sqlTableModel"></a>数据模型 sqlTableModel</h3><p>&emsp;&emsp;模型方法：</p><p><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/sqlTableModel%E7%BB%A7%E6%89%BF%E5%9B%BE.jpg"></p><h3 id="委托代理-ComboBoxDelegate"><a href="#委托代理-ComboBoxDelegate" class="headerlink" title="委托代理 ComboBoxDelegate"></a>委托代理 ComboBoxDelegate</h3><p>&emsp;&emsp;对 tenabled、tsetup 这类布尔值项设置代理，使得编辑时显示自定义下拉框以选择“Yes”或者“No”。</p><p><img src="/2020/10/09/qt/%E5%B7%A5%E5%85%B7%E6%9E%B6%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/ComboBoxDelegate%E7%BB%A7%E6%89%BF%E5%9B%BE.jpg"></p><h3 id="为视图设置模型和代理"><a href="#为视图设置模型和代理" class="headerlink" title="为视图设置模型和代理"></a>为视图设置模型和代理</h3><p>ui_main_sql.py</p><pre><code class="hljs Python"><span class="hljs-comment"># init list view</span>self.UserView = self.icon_list_viewself.tool_view = self.UserView<span class="hljs-comment"># init model</span>self.tool_model = _sql_table_model.sqlTableModel(self.tool_view)<span class="hljs-comment"># set list view model</span>self.icon_list_view.setModel(self.tool_model)self.list_list_view.setModel(self.tool_model)<span class="hljs-comment"># --- change to AdminMode --- </span><span class="hljs-comment"># init table view</span>self.AdminView = _table_view.TableView(self)<span class="hljs-comment"># init combobox delegate</span>combo_model = QStandardItemModel(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, self.AdminView)combo_model.setData(combo_model.index(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, QModelIndex()), <span class="hljs-string">&quot;Yes&quot;</span>)combo_model.setData(combo_model.index(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, QModelIndex()), <span class="hljs-string">&quot;No&quot;</span>)<span class="hljs-comment"># set table view delegate</span>self.AdminView.setItemDelegateForColumn(self.tool_model._column_key[<span class="hljs-string">&#x27;tenabled&#x27;</span>], _combobox_delegate.ComboBoxDelegate(combo_model, self.AdminView))self.AdminView.setItemDelegateForColumn(self.tool_model._column_key[<span class="hljs-string">&#x27;tsetup&#x27;</span>], _combobox_delegate.ComboBoxDelegate(combo_model, self.AdminView))<span class="hljs-comment"># set table view model</span>self.AdminView.setModel(self.tool_model)</code></pre><hr><h2 id="切换组时更新工具视图"><a href="#切换组时更新工具视图" class="headerlink" title="切换组时更新工具视图"></a>切换组时更新工具视图</h2><p>&emsp;&emsp;当切换组时，sqkTableModel重新设置数据表。</p><p>ui_main_sql.py</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToolWin</span>(<span class="hljs-params">QMainWindow</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, parent=None</span>):</span>        <span class="hljs-comment"># init group combobox</span>        self.group_combobox = _combo_box.ComboBox(self.group_list)        <span class="hljs-comment"># parse group combobox to model</span>        self.tool_model.set_group_combobox(self.group_combobox)        <span class="hljs-comment"># set group combobox signal</span>        self.group_combobox.currentTextChanged.connect(self.change_group)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_group</span>(<span class="hljs-params">self, cur_group</span>):</span>        group_table = _table_view.TableView.group_to_table(cur_group)        self.tool_model.change_db_table(group_table)</code></pre><p>sql_table_model.py</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sqlTableModel</span>(<span class="hljs-params">QSqlTableModel</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_db_table</span>(<span class="hljs-params">self, table_name</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;更变当前数据库表为指定新表名</span><span class="hljs-string"></span><span class="hljs-string">        Args:</span><span class="hljs-string">            table_name (str): 数据库表名</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.setTable(table_name)        <span class="hljs-comment"># 重新筛选符合搜索条件的工具</span>        self.setFilter(<span class="hljs-string">&quot;lower(tname) like &#x27;%&#123;&#125;%&#x27; or lower(ttooltip) like &#x27;%&#123;&#125;%&#x27;&quot;</span>.format(self._filter_text.lower(), self._filter_text.lower()))        self.setSort(self._sort_key, Qt.AscendingOrder)        self.select()        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tname&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;工具名称&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;ttooltip&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;说明&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tcommand&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;调用命令&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tenabled&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;可见性&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tsetup&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;启动时调用&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;ticon&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;图标&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tlocation&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;调用位置&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;thelp&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;帮助文档&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tgitlab&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;Gitlab仓库&quot;</span>)        self.setHeaderData(self._column_key[<span class="hljs-string">&#x27;tused&#x27;</span>], Qt.Horizontal, <span class="hljs-string">u&quot;使用次数&quot;</span>)        <span class="hljs-comment"># 设置组下拉框当前值为新表名对应的组名</span>        <span class="hljs-keyword">if</span> self._group_combobox:            cur_table_group = self._parent_view.table_to_group(table_name)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cur_table_group == self._group_combobox.currentText():                self._group_combobox.setCurrentText(cur_table_group)        <span class="hljs-comment"># 表格根据记录的tdate选择工具</span>        <span class="hljs-keyword">if</span> self._parent_view.inherits(<span class="hljs-string">&#x27;QTableView&#x27;</span>):            self._parent_view.setColumnWidth(self._column_key[<span class="hljs-string">&#x27;tname&#x27;</span>], <span class="hljs-number">150</span>)            self.set_select_row()</code></pre><hr><h2 id="无边框窗口添加阴影"><a href="#无边框窗口添加阴影" class="headerlink" title="无边框窗口添加阴影"></a>无边框窗口添加阴影</h2><p>&emsp;&emsp;把阴影窗口 ShadowWidget 设置为显示主窗口的父窗体。</p><p>ui_main_sql.py</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShadowWidget</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, main_win, parent=None</span>):</span>        super(ShadowWidget, self).__init__(parent)        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Windo        self.setAttribute(Qt.WA_TranslucentBackground)        self.main_widget = main_win        self.main_widget.setParent(self)        self.main_layout = QVBoxLayout(self)        self.main_layout.addWidget(self.main_widget)        self.main_layout.setContentsMargins(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)        wndShadow = QGraphicsDropShadowEffect(self)        wndShadow.setBlurRadius(<span class="hljs-number">20</span>)        wndShadow.setColor(Qt.gray)        wndShadow.setOffset(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)        self.main_widget.setGraphicsEffect(wndShadow)</code></pre><hr><h2 id="无边框窗口拖拽功能"><a href="#无边框窗口拖拽功能" class="headerlink" title="无边框窗口拖拽功能"></a>无边框窗口拖拽功能</h2><p>&emsp;&emsp;通过重写鼠标点击、释放和移动事件实现窗口拖拽功能。</p><p>&emsp;&emsp;用 ismoving 属性记录窗口移动状态。</p><p>ui_main_sql.py</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShadowWidget</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, main_win, parent=None</span>):</span>        self.ismoving = <span class="hljs-literal">False</span>        self.main_widget.setMouseTracking(<span class="hljs-literal">True</span>)        self.setMouseTracking(<span class="hljs-literal">True</span>)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mouseMoveEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mouseMoveEvent(event)        <span class="hljs-keyword">if</span> self.ismoving:            relpos = event.globalPos() - self.start_point            self.move(self.window_point + relpos)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mousePressEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mousePressEvent(event)        <span class="hljs-keyword">if</span> event.button() == Qt.LeftButton:            self.ismoving = <span class="hljs-literal">True</span>            self.setCursor(Qt.ClosedHandCursor)            self.start_point = event.globalPos()            self.window_point = self.frameGeometry().topLeft()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mouseReleaseEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mouseReleaseEvent(event)        self.ismoving = <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> event.button() == Qt.LeftButton:            self.setCursor(Qt.ArrowCursor)</code></pre><hr><h2 id="无边框窗口缩放功能"><a href="#无边框窗口缩放功能" class="headerlink" title="无边框窗口缩放功能"></a>无边框窗口缩放功能</h2><p>属性：</p><ul><li>Margins: 判定窗口边缘距离鼠标的值</li><li>current_edit_rect: 鼠标所在界面的区域范围</li><li>on_left_btn：是否按下左键</li></ul><p>方法：</p><ul><li>judgeReigon(pos): 判断鼠标在窗口边缘的哪一部分区域</li><li>resizeWin(mgPos): 鼠标在可以缩放的区域范围并左键点击和拖拽，则进行缩放</li></ul><p>ui_main_sql.py</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShadowWidget</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, main_win, parent=None</span>):</span>        self.Margins = <span class="hljs-number">10</span>        self.current_edit_rect = <span class="hljs-literal">None</span>        self.on_left_btn = <span class="hljs-literal">False</span>        self.main_widget.setMouseTracking(<span class="hljs-literal">True</span>)        self.setMouseTracking(<span class="hljs-literal">True</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mouseMoveEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mouseMoveEvent(event)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.on_left_btn:            self.judgeReigon(self.mapToParent(event.pos()))        <span class="hljs-keyword">elif</span> self.cursor() != Qt.ArrowCursor:            self.resizeWin(event.globalPos())    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mousePressEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mousePressEvent(event)        <span class="hljs-keyword">if</span> event.button() == Qt.LeftButton:            self.on_left_btn = <span class="hljs-literal">True</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mouseReleaseEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).mouseReleaseEvent(event)        <span class="hljs-keyword">if</span> event.button() == Qt.LeftButton:            self.setCursor(Qt.ArrowCursor)            self.current_edit_rect = <span class="hljs-literal">None</span>            self.on_left_btn = <span class="hljs-literal">False</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judgeReigon</span>(<span class="hljs-params">self, pos</span>):</span>        rect = self.frameGeometry()        self.top_rect = QRect(rect.x()+self.Margins, rect.y(), rect.width()-self.Margins*<span class="hljs-number">2</span>, self.Margins)        self.top_left_rect = QRect(rect.x(), rect.y(), self.Margins, self.Margins)        self.left_rect = QRect(rect.x(), rect.y()+self.Margins, self.Margins, rect.height()-self.Margins*<span class="hljs-number">2</span>)        self.bottom_left_rect = QRect(rect.x(), rect.y()+rect.height()-self.Margins, self.Margins, self.Margins)        self.bottom_rect = QRect(rect.x()+self.Margins, rect.y()+rect.height()-self.Margins, rect.width()-self.Margins*<span class="hljs-number">2</span>, self.Margins)        self.botton_right_rect = QRect(rect.x()+self.width()-self.Margins, rect.y()+rect.height()-self.Margins, self.Margins, self.Margins)        self.right_rect = QRect(rect.x()+self.width()-self.Margins, rect.y()+self.Margins, self.Margins, rect.height()-self.Margins*<span class="hljs-number">2</span>)        self.top_right_rect = QRect(rect.x()+self.width()-self.Margins, rect.y(), self.Margins, self.Margins)        <span class="hljs-keyword">if</span> self.top_rect.contains(pos):            self.setCursor(Qt.SizeVerCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;top_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.top_left_rect.contains(pos):            self.setCursor(Qt.SizeFDiagCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;top_left_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.left_rect.contains(pos):            self.setCursor(Qt.SizeHorCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;left_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.bottom_left_rect.contains(pos):            self.setCursor(Qt.SizeBDiagCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;bottom_left_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.bottom_rect.contains(pos):            self.setCursor(Qt.SizeVerCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;bottom_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.botton_right_rect.contains(pos):            self.setCursor(Qt.SizeFDiagCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;botton_right_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.right_rect.contains(pos):            self.setCursor(Qt.SizeHorCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;right_rect&#x27;</span>        <span class="hljs-keyword">elif</span> self.top_right_rect.contains(pos):            self.setCursor(Qt.SizeBDiagCursor)            self.current_edit_rect = <span class="hljs-string">&#x27;top_right_rect&#x27;</span>        <span class="hljs-keyword">else</span>:            self.setCursor(Qt.ArrowCursor)            self.current_edit_rect = <span class="hljs-literal">None</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resizeWin</span>(<span class="hljs-params">self, mgPos</span>):</span>        <span class="hljs-keyword">if</span> self.current_edit_rect == <span class="hljs-literal">None</span>:            <span class="hljs-keyword">return</span>        winX = self.geometry().x()        winY = self.geometry().y()        winW = self.geometry().width()        winH = self.geometry().height()        downside = self.pos().y() + winH        rightside = self.pos().x() + winW        <span class="hljs-keyword">if</span> self.current_edit_rect == <span class="hljs-string">&#x27;top_rect&#x27;</span>:            winY = mgPos.y()            winH = downside - winY        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;top_left_rect&#x27;</span>:            winY = mgPos.y()            winH = downside - winY            winX = mgPos.x()            winW = rightside - winX        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;left_rect&#x27;</span>:            winX = mgPos.x()            winW = rightside - winX        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;bottom_left_rect&#x27;</span>:            winX = mgPos.x()            winW = rightside - winX            winH = mgPos.y() - self.pos().y()        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;botton_right_rect&#x27;</span>:            winW = mgPos.x() - self.pos().x()            winH = mgPos.y() - self.pos().y()        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;right_rect&#x27;</span>:            winW = mgPos.x() - self.pos().x()        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;bottom_rect&#x27;</span>:            winH = mgPos.y() - self.pos().y()        <span class="hljs-keyword">elif</span> self.current_edit_rect == <span class="hljs-string">&#x27;top_right_rect&#x27;</span>:            winY = mgPos.y()            winH = downside - winY            winW = mgPos.x() - self.pos().x()        <span class="hljs-keyword">if</span> winW &lt; self.win_min_width:            <span class="hljs-keyword">return</span>        <span class="hljs-keyword">if</span> winH &lt; self.win_min_height:            <span class="hljs-keyword">return</span>        self.setGeometry(winX, winY, winW, winH)</code></pre><hr><h2 id="窗口应用用户配置"><a href="#窗口应用用户配置" class="headerlink" title="窗口应用用户配置"></a>窗口应用用户配置</h2><h3 id="关闭时保存配置信息"><a href="#关闭时保存配置信息" class="headerlink" title="关闭时保存配置信息"></a>关闭时保存配置信息</h3><p>&emsp;&emsp;当工具关闭或者退出时，会在电脑本地文档路径下生成一个“popic_tool_config.json”文件。该文件记录工具窗口的位置、大小、用户/管理员模式、当前列表视图显示模式、工具缩放滑块条数值和当前显示组的信息。</p><pre><code class="hljs Python">USER_CONFIG_PATH = os.path.expanduser(<span class="hljs-string">&#x27;~/popic_tool_config.json&#x27;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShadowWidget</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">closeEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).closeEvent(event)        user_config = &#123;            <span class="hljs-string">&#x27;win_left&#x27;</span> : self.pos().x(),            <span class="hljs-string">&#x27;win_top&#x27;</span> : self.pos().y(),            <span class="hljs-string">&#x27;user_width&#x27;</span> : self.main_widget.UserViewWidth,            <span class="hljs-string">&#x27;user_height&#x27;</span> : self.main_widget.UserViewHeight,            <span class="hljs-string">&#x27;admin_width&#x27;</span> : self.main_widget.AdminViewWidth,            <span class="hljs-string">&#x27;admin_height&#x27;</span> : self.main_widget.AdminViewHeight,            <span class="hljs-string">&#x27;admin_mode&#x27;</span> : self.main_widget.AdminMode,            <span class="hljs-string">&#x27;current_view&#x27;</span> : str(self.main_widget.UserView.viewMode()).split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">-1</span>],            <span class="hljs-string">&#x27;icon_slider_value&#x27;</span> : self.main_widget.size_slider.icon_mode_value,            <span class="hljs-string">&#x27;list_slider_value&#x27;</span> : self.main_widget.size_slider.list_mode_value,            <span class="hljs-string">&#x27;group_index&#x27;</span> : self.main_widget.group_combobox.currentIndex()        &#125;        <span class="hljs-keyword">with</span> open(USER_CONFIG_PATH, <span class="hljs-string">&#x27;w+&#x27;</span>) <span class="hljs-keyword">as</span> f:            json_str = json.dumps(user_config, indent=<span class="hljs-number">4</span>)            f.write(json_str)</code></pre><h3 id="打开时读取配置信息"><a href="#打开时读取配置信息" class="headerlink" title="打开时读取配置信息"></a>打开时读取配置信息</h3><p>&emsp;&emsp;当工具启动时，假如电脑本地文档路径下存在“popic_tool_config.json”文件，则读取该文件信息并更新工具显示，以恢复与关闭工具前相同的状态。</p><p>&emsp;&emsp;如果电脑本地文档路径下不存在“popic_tool_config.json”文件，则会以默认配置启动工具。</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShadowWidget</span>(<span class="hljs-params">QWidget</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showEvent</span>(<span class="hljs-params">self, event</span>):</span>        super(ShadowWidget, self).showEvent(event)        <span class="hljs-keyword">if</span> os.path.exists(USER_CONFIG_PATH):            <span class="hljs-keyword">with</span> open(USER_CONFIG_PATH, <span class="hljs-string">&#x27;r+&#x27;</span>) <span class="hljs-keyword">as</span> f:                user_config = json.load(f)            self.move(user_config[<span class="hljs-string">&#x27;win_left&#x27;</span>], user_config[<span class="hljs-string">&#x27;win_top&#x27;</span>])            self.main_widget.UserViewWidth = user_config[<span class="hljs-string">&#x27;user_width&#x27;</span>]            self.main_widget.UserViewHeight = user_config[<span class="hljs-string">&#x27;user_height&#x27;</span>]            self.main_widget.AdminViewWidth = user_config[<span class="hljs-string">&#x27;admin_width&#x27;</span>]            self.main_widget.AdminViewHeight = user_config[<span class="hljs-string">&#x27;admin_height&#x27;</span>]            self.main_widget.group_combobox.setCurrentIndex(user_config[<span class="hljs-string">&#x27;group_index&#x27;</span>])            self.main_widget.size_slider.icon_mode_value = user_config[<span class="hljs-string">&#x27;icon_slider_value&#x27;</span>]            self.main_widget.size_slider.list_mode_value = user_config[<span class="hljs-string">&#x27;list_slider_value&#x27;</span>]            admin_mode = user_config[<span class="hljs-string">&#x27;admin_mode&#x27;</span>]            <span class="hljs-keyword">if</span> admin_mode <span class="hljs-keyword">and</span> self.main_widget.AdminView:                <span class="hljs-keyword">pass</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> user_config[<span class="hljs-string">&#x27;current_view&#x27;</span>] == <span class="hljs-string">&#x27;IconMode&#x27;</span>:                    self.main_widget.change_to_icon_mode()                <span class="hljs-keyword">elif</span> user_config[<span class="hljs-string">&#x27;current_view&#x27;</span>] == <span class="hljs-string">&#x27;ListMode&#x27;</span>:                    self.main_widget.change_to_list_mode()        self.main_widget.resize_view()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize</span>(<span class="hljs-params">self</span>):</span>        super(ShadowWidget, self).resize(self.main_widget.width()+self.Margins + <span class="hljs-number">20</span>, self.main_widget.height()+self.Margins + <span class="hljs-number">20</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToolWin</span>(<span class="hljs-params">QMainWindow</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize_view</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.tool_view == self.AdminView:            self.resize(self.AdminViewWidth, self.AdminViewHeight)        <span class="hljs-keyword">else</span>:            self.resize(self.UserViewWidth, self.UserViewHeight)        self.parent().resize()</code></pre><hr><h2 id="调用工具"><a href="#调用工具" class="headerlink" title="调用工具"></a>调用工具</h2><h3 id="在-Windows-下调用工具"><a href="#在-Windows-下调用工具" class="headerlink" title="在 Windows 下调用工具"></a>在 Windows 下调用工具</h3><pre><code class="hljs Python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app = QApplication(sys.argv)    main_win = ToolWin()    win = ShadowWidget(main_win)    win.show()    sys.exit(app.exec_())</code></pre><h3 id="在-Maya-下调用工具"><a href="#在-Maya-下调用工具" class="headerlink" title="在 Maya 下调用工具"></a>在 Maya 下调用工具</h3><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maya_main</span>():</span>    ptr = OpenMayaUI.MQtUtil.mainWindow()    mayaWindow = wrapInstance(long(ptr), QWidget)    win_obj = mayaWindow.findChild(QWidget, <span class="hljs-string">&#x27;popic_tool_window&#x27;</span>)    <span class="hljs-keyword">if</span> win_obj:        win_obj.close()    <span class="hljs-keyword">else</span>:        main_win = ToolWin()        win_obj = ShadowWidget(main_win, mayaWindow)        win_obj.setObjectName(<span class="hljs-string">&#x27;popic_tool_window&#x27;</span>)    win_obj.show()maya_main()</code></pre><hr><h2 id="获取-Maya-的-Icon-路径"><a href="#获取-Maya-的-Icon-路径" class="headerlink" title="获取 Maya 的 Icon 路径"></a>获取 Maya 的 Icon 路径</h2><p>&emsp;&emsp;很多 Maya 的工具显示使用的是 Maya 自带的图标，这些图标路径可以通过几个地方找到。</p><h3 id="XBMLANGPATH"><a href="#XBMLANGPATH" class="headerlink" title="XBMLANGPATH"></a>XBMLANGPATH</h3><p>&emsp;&emsp;Icon 路径，在该变量下的路径中的图片文件可以直接用来当作界面控件的图标。  </p><ol><li>运行 mel 命令 <code>xbmLangPathList;</code> 可以查看 icon 路径。  </li><li>也可以通过查询环境变量 <code>os.environ[&#39;XBMLANGPATH&#39;]</code>  查看路径。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>Maya</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git配置多个SSH-key</title>
    <link href="/2020/10/09/script/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-key/"/>
    <url>/2020/10/09/script/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-key/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;该内容主要源于 <a href="https://blog.csdn.net/hao495430759/article/details/80673568">Git配置多个SSH key</a>。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;有时候我们的代码托管在多个平台上，这就需要为每个托管平台设置SSH-key。比如我现在的情况是需要为GitHub和公司的GitLab配置SSH-key。</p><p>&emsp;&emsp;以下为创建及配置步骤。</p><h3 id="1，生成SSH-key"><a href="#1，生成SSH-key" class="headerlink" title="1，生成SSH-key"></a>1，生成SSH-key</h3><p>&emsp;&emsp;生成公司用的SSH-key：</p><pre><code class="hljs vim">ssh-keygen -t rsa -C <span class="hljs-comment">&quot;your email” -f ~/.ssh/popic_rsa</span></code></pre><p>&emsp;&emsp;生成GitHub用的SSH-key：</p><pre><code class="hljs vim">ssh-keygen -t rsa -C <span class="hljs-comment">&quot;your email” -f ~/.ssh/github_rsa</span></code></pre><p>&emsp;&emsp;此时，C:/Users/“用户名”/.ssh文件夹下应该有四个新创建的文件，其中“.pub”格式结尾的文件为公钥文件。</p><h3 id="2-添加公钥到代码平台"><a href="#2-添加公钥到代码平台" class="headerlink" title="2. 添加公钥到代码平台"></a>2. 添加公钥到代码平台</h3><p>&emsp;&emsp;分别登录github和公司代码托管平台，在“Setting - SSH-keys”中添加公钥。</p><p><img src="/2020/10/09/script/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-key/%E5%85%AC%E9%92%A5.png"></p><p>&emsp;&emsp;填写好名称和内容后，点击“Add SSH key”。</p><h3 id="3-添加私钥"><a href="#3-添加私钥" class="headerlink" title="3. 添加私钥"></a>3. 添加私钥</h3><pre><code class="hljs arcade">ssh-add ~<span class="hljs-regexp">/.ssh/</span>popic_rsassh-add ~<span class="hljs-regexp">/.ssh/gi</span>thub_rsa</code></pre><p>&emsp;&emsp;如果运行后出现“Could not open a connection to your authentication agent.”，执行“ssh-agent bash”后再重新执行添加命令。</p><p><img src="/2020/10/09/script/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-key/not_connect.png"></p><pre><code class="hljs arcade">ssh-agent bashssh-add ~<span class="hljs-regexp">/.ssh/</span>popic_rsassh-add ~<span class="hljs-regexp">/.ssh/gi</span>thub_rsa</code></pre><p>&emsp;&emsp;通过“ssh-add -l”列出私钥列表，通过“ssh-add -D”来清空私钥列表</p><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="bash"> -l</span>ssh-<span class="hljs-keyword">add</span><span class="bash"> -D</span></code></pre><h3 id="4-修改config配置文件"><a href="#4-修改config配置文件" class="headerlink" title="4. 修改config配置文件"></a>4. 修改config配置文件</h3><p>&emsp;&emsp;在“.ssh”文件夹下，如果没有“config”文件（无后缀名），可以通过“touch config”命令创建一个。</p><pre><code class="hljs arduino">touch <span class="hljs-built_in">config</span></code></pre><p>&emsp;&emsp;打开“config”文件进行编辑。</p><pre><code class="hljs routeros"><span class="hljs-comment"># github</span>Host github.comPort 22HostName github.comPreferredAuthentications publickeyIdentityFile C:/Users/“用户名”/.ssh/github_rsaUser vannyyuan <span class="hljs-comment"># gitpopic</span>Host git.popic.comHostName git.popic.comPreferredAuthentications publickeyIdentityFile C:/Users/“用户名”/.ssh/popic_rsaUser vanny</code></pre><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.comssh -T git<span class="hljs-variable">@git</span>.popic.com</code></pre><p>&emsp;&emsp;如果提示 <font color="orange">Are you sure you want to continue connecting (yes/no/[fingerprint])? </font>，则输入“yes”并回车即可。会在“.ssh”目录下生成缺少的known_hosts文件。</p><p>&emsp;&emsp;成功！🎉</p><p><img src="/2020/10/09/script/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-key/succeed.png"></p><h3 id="🚏-出现-Permission-denied-问题"><a href="#🚏-出现-Permission-denied-问题" class="headerlink" title="🚏 出现 Permission denied 问题"></a>🚏 出现 Permission denied 问题</h3><p>&emsp;&emsp;在使用命令 <code>ssh -T git@git.popic.com</code> 时，出现了 <font color="red">Permission denied (publickey,password,keyboard-interactive). </font> 的错误。</p><p>&emsp;&emsp;试过删除密钥重新生成和添加，也不能解决这个问题，最终在网上找到了可用方法：提升 “~/.ssh” 文件夹的权限。</p><pre><code class="hljs angelscript">chmod <span class="hljs-number">700</span> ~/.ssh</code></pre><p>&emsp;&emsp;执行后删除 “~/.ssh” 文件夹中的 “known_hosts” 文件。</p><p>&emsp;&emsp;此时重新使用命令就可以成功登陆了！</p>]]></content>
    
    
    <categories>
      
      <category>SCRIPT</category>
      
      <category>Common</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCRIPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按下“ESC”中断运行中的for循环</title>
    <link href="/2020/10/09/script/python/%E6%8C%89%E4%B8%8BESC%E4%B8%AD%E6%96%AD%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF/"/>
    <url>/2020/10/09/script/python/%E6%8C%89%E4%B8%8BESC%E4%B8%AD%E6%96%AD%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;假设有一个程序，运行过程中每隔一秒打印一次数字，当键盘按下“ESC”时，使该循环终止。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_func</span>():</span>    <span class="hljs-comment"># ! 循环程序</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):        time.sleep(<span class="hljs-number">1</span>)        <span class="hljs-keyword">print</span> i</code></pre><h3 id="🐾-pynput"><a href="#🐾-pynput" class="headerlink" title="🐾 pynput"></a>🐾 pynput</h3><p>&emsp;&emsp;pynput.keyboard：包含控制和监控键盘的类。</p><p>&emsp;&emsp;调用pynput.mouse.Listener.stop，发起StopException异常，或者回调函数中返回False都会停止事件的监听。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> pynput <span class="hljs-keyword">import</span> keyboard<span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">thread</span>(<span class="hljs-params">Thread</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        Thread.__init__( self )        self.shut_down_signal = <span class="hljs-literal">True</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-comment"># ! 循环程序</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):            <span class="hljs-keyword">if</span> self.shut_down_signal:                time.sleep(<span class="hljs-number">1</span>)                <span class="hljs-keyword">print</span> i            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_press</span>(<span class="hljs-params">key</span>):</span>    <span class="hljs-comment"># ! 重写on_press</span>    <span class="hljs-keyword">pass</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_release</span>(<span class="hljs-params">key</span>):</span>    <span class="hljs-comment"># ! 重写on_release</span>    <span class="hljs-keyword">if</span> key ==  keyboard.Key.esc:        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Esc&quot;</span>        <span class="hljs-comment"># ! 修改线程中的shut_down_signal</span>        run_thread.shut_down_signal = <span class="hljs-literal">False</span>        <span class="hljs-comment"># ! 退出监听器</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><span class="hljs-comment"># ! 启动线程</span>run_thread = thread()run_thread.start()<span class="hljs-comment"># ! 启动监听器</span><span class="hljs-keyword">with</span> keyboard.Listener(on_press=on_press,on_release=on_release) <span class="hljs-keyword">as</span> listener:    listener.join()</code></pre><h3 id="🚀-QWidget-的-keyPressEvent-和-keyReleaseEvent"><a href="#🚀-QWidget-的-keyPressEvent-和-keyReleaseEvent" class="headerlink" title="🚀 QWidget 的 keyPressEvent 和 keyReleaseEvent"></a>🚀 QWidget 的 keyPressEvent 和 keyReleaseEvent</h3><p>&emsp;&emsp;在Qt窗口中，可以通过重写 keyPressEvent() 和 keyReleaseEvent() 这两个方法实现。keyPressEvent 是 QWidget 里面的函数，所以凡是继承自 QWidget 的类都可以通过实现这个函数来完成对按键事件的响应。</p><p>&emsp;&emsp;点击“Click to run”按钮开始for循环，按“Esc”退出。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<span class="hljs-keyword">from</span> PySide2.QtCore <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> PySide2.QtGui <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> PySide2.QtWidgets <span class="hljs-keyword">import</span> *<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">thread</span>(<span class="hljs-params">Thread</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        Thread.__init__( self )        self.shut_down_signal = <span class="hljs-literal">True</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-comment"># ! 循环程序</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):            <span class="hljs-keyword">if</span> self.shut_down_signal:                time.sleep(<span class="hljs-number">1</span>)                <span class="hljs-keyword">print</span> i            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_window</span>(<span class="hljs-params">QMainWindow</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        super(m_window, self).__init__()        self.centralwidget = QWidget(self)        <span class="hljs-comment"># ! StrongFocus：可以通过单击来接受焦点，只要在窗口下，就能接收键盘事件</span>        self.setFocusPolicy(Qt.StrongFocus)        self.lay = QHBoxLayout(self.centralwidget)        self.m_btn = QPushButton(<span class="hljs-string">&#x27;Click to run&#x27;</span>)        self.lay.addWidget(self.m_btn)        <span class="hljs-comment"># ! 点击按钮启动线程</span>        self.m_btn.clicked.connect(self.start_thread)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_thread</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-comment"># ! 启动线程</span>        self.thread = thread()        self.thread.start()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keyPressEvent</span>(<span class="hljs-params">self, event</span>):</span>        <span class="hljs-comment"># ! 重写keyPressEvent</span>        <span class="hljs-keyword">pass</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keyReleaseEvent</span>(<span class="hljs-params">self, event</span>):</span>        <span class="hljs-comment"># ! 重写keyReleaseEvent</span>        <span class="hljs-comment"># ! 当按下“esc”时，退出for循环</span>        <span class="hljs-keyword">if</span> event.key() == Qt.Key_Escape:            <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;esc&quot;</span>            self.thread.shut_down_signal = <span class="hljs-literal">False</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    mainWin = m_window()    mainWin.show()</code></pre><h3 id="🎉-QProgressDialog"><a href="#🎉-QProgressDialog" class="headerlink" title="🎉 QProgressDialog"></a>🎉 QProgressDialog</h3><p>&emsp;&emsp;进度对话框用于向用户指示操作将花费多长时间，并表明应用程序正在运行。它还可以使用户有机会中止该操作。</p><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> PySide2.QtCore <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> PySide2.QtGui <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> PySide2.QtWidgets <span class="hljs-keyword">import</span> *<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">m_window</span>(<span class="hljs-params">QMainWindow</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        super(m_window, self).__init__()        self.centralwidget = QWidget(self)        self.lay = QHBoxLayout(self.centralwidget)        self.m_btn = QPushButton(<span class="hljs-string">&#x27;Click to run&#x27;</span>)        self.lay.addWidget(self.m_btn)        <span class="hljs-comment"># ! 点击按钮启动线程</span>        self.m_btn.clicked.connect(self.start_thread)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_thread</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-comment"># ! 创建进度条</span>        progress = QProgressDialog(<span class="hljs-string">&quot;Running...&quot;</span>, <span class="hljs-string">&quot;Abort&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, self);        <span class="hljs-comment"># ! 设置进度条模式</span>        progress.setWindowModality(Qt.WindowModal);        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):            progress.setValue(i);            <span class="hljs-keyword">if</span> progress.wasCanceled():                <span class="hljs-keyword">break</span>            time.sleep(<span class="hljs-number">1</span>)            <span class="hljs-keyword">print</span> i        <span class="hljs-keyword">return</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    mainWin = m_window()    mainWin.show()</code></pre><p>&emsp;&emsp;我们可以通过QProgressDialog进度条随时打断正在运行的程序，而不用自己创建线程。</p>]]></content>
    
    
    <categories>
      
      <category>SCRIPT</category>
      
      <category>Common</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAYA</tag>
      
      <tag>SCRIPT</tag>
      
      <tag>PYTHON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2020/08/27/own/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/08/27/own/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;其实早在一年多就有搭建自己博客的想法，主要是受到身边的一位优秀同学的影响，这位同学在下文中就以<font color="Darkorange"><b>添添</b></font>相称吧。</p><h3 id="✨一位优秀的同学"><a href="#✨一位优秀的同学" class="headerlink" title="✨一位优秀的同学"></a>✨<font color="FireBrick">一位优秀的同学</font></h3><p>&emsp;&emsp;添添是一位自律性强、学习能力突出、乐于分享的人，我有幸在大学成为他的同学并在去年与他在深圳同一家公司进行实习，在实习期间，我发现了他身上许多亮点，不仅仅是他的学习精神，他的正义、勤于律己和乐于奉献更加令人敬佩。天道酬勤，他现在找到了自己满意的工作，并且孜孜不倦地为自己的目标方向努力。</p><p>&emsp;&emsp;添添可以说是我当前职业道路上的明灯，原在大三找实习迷茫的期间，他给了我一个机会，并且指明了学习的道路，我之所以能够顺利到深圳实习添添功不可没。大三下学期开学的时候，我明显感觉宿舍的氛围不一样了，考研的开始每天跑图书馆，找实习的开始准备自己的简历和作品集，这一切都因为秋招马上要到了。当时我对自己的方向并不明确，但是紧张的氛围使我没有针对性地学习着，直到有一位师兄问我有没有兴趣做一名流程TD。这位师兄和当时的添添在同一家公司，他们帮我内推，给我推荐学习的教程，最终在一个月后，我成功进入了这家公司并当了为期近一年实习生。由于我的经验不足，在工作过程中，添添给了我很多帮助，使我更快地熟悉这一份工作。在相处过程中，我越发能感觉到自己与优秀人才的差距，只有更加努力才能让差距不要越拉越大。好吧，我承认还是没有跟上添添快如闪电、迅若惊雷的步伐。。。😂</p><p>&emsp;&emsp;他有个人技术博客，当然他也会在上面分享一些他生活上的经历，这是他博客的地址：<a href="https://blog.l0v0.com/">智伤帝的个人博客</a></p><p>&emsp;&emsp;当我第一次看他的博客时，我不禁感慨，这太强了！然后我也成为了他博客的粉丝，定期上去看有没有更新新内容。当时我萌生了搭建自己博客的想法，他很热心地帮助我并帮我解决过程中的问题，但之所以我的博客没有在一年前出世，归根到底还是因为自己不够勤快。(͒˶´⚇`˵)͒</p><p>&emsp;&emsp;现在，终于把一件没做完的事实现了。😀</p><p>&emsp;&emsp;博客搭建参考：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><h3 id="✋One-Note的缺点"><a href="#✋One-Note的缺点" class="headerlink" title="✋One Note的缺点"></a>✋<font color="FireBrick">One Note的缺点</font></h3><p>&emsp;&emsp;由于之前没有使用博客，一般遇到问题都是直接记录在One Note上。但是OneNote可以在空白版上随意空间插入文本内容，记录问题时很多时候仅仅为了方便而没有进行排版，导致之后阅读上的体验比较糟糕，也不便于分享。One Note还有一个致命的缺点是：如果直接把代码粘贴到页面上，当你之后需要重新复制这段代码时，代码中的空格会变成乱码，不可以直接运行使用。😠虽然这个问题可以通过插件“NoteHighlight”解决，但是每次都要通过这个插件进行转化后再粘贴，着实不够方便。</p><p>&emsp;&emsp;因此，趁着有空整理一下笔记顺便记录到博客上来吧！</p>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PERSONAL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
